[
  {
    "objectID": "Django/indexing_and_caching.html",
    "href": "Django/indexing_and_caching.html",
    "title": "Indexing and Caching",
    "section": "",
    "text": "Reduce query execution time ‚è±Ô∏è\n\nMinimize database load üíæ\n\nImprove overall app performance üöÄ",
    "crumbs": [
      "Blog",
      "Django",
      "Indexing and Caching"
    ]
  },
  {
    "objectID": "Django/indexing_and_caching.html#goal-of-query-optimization",
    "href": "Django/indexing_and_caching.html#goal-of-query-optimization",
    "title": "Indexing and Caching",
    "section": "",
    "text": "Reduce query execution time ‚è±Ô∏è\n\nMinimize database load üíæ\n\nImprove overall app performance üöÄ",
    "crumbs": [
      "Blog",
      "Django",
      "Indexing and Caching"
    ]
  },
  {
    "objectID": "Django/indexing_and_caching.html#indexing-in-django-and-databases",
    "href": "Django/indexing_and_caching.html#indexing-in-django-and-databases",
    "title": "Indexing and Caching",
    "section": "1Ô∏è‚É£ Indexing in Django (and Databases)",
    "text": "1Ô∏è‚É£ Indexing in Django (and Databases)\n\nüìñ What is an Index?\nAn index is a data structure (like a sorted list or B-tree) that makes lookup operations fast.\nImagine an index at the back of a textbook. Instead of reading every page, you jump to the exact location.\n\n\n\n‚úÖ Why Use Indexes?\n\nSpeed up SELECT, JOIN, ORDER BY, WHERE, and GROUP BY queries.\nReduce full table scans (which are slow on large datasets).\n\n\n\n\nüõ†Ô∏è How to Create Indexes in Django\n\n1. Automatic Indexes\n\nDjango automatically creates indexes for primary keys and unique fields.\n\n\n\n2. Add Indexes on Other Fields\nIn models.py:\nfrom django.db import models\n\nclass Player(models.Model):\n    name = models.CharField(max_length=100)\n    score = models.IntegerField(db_index=True)  # Create an index on score\n\n\n3. Multi-Column Indexes\nclass Player(models.Model):\n    name = models.CharField(max_length=100)\n    country = models.CharField(max_length=100)\n\n    class Meta:\n        indexes = [\n            models.Index(fields=['country', 'name']),\n        ]\n\n\n\n\nüîç When to Use Indexes\n\n\n\nQuery Type\nIndex Field(s)\n\n\n\n\nWHERE filters\nFilter columns\n\n\nORDER BY sorting\nSorted column\n\n\nJOIN conditions\nForeignKey fields\n\n\nUNIQUE constraints\nEnforced fields\n\n\n\n\n\n\nüö® When NOT to Use Indexes\n\nColumns that frequently update (write-heavy workloads). Indexes slow down INSERT/UPDATE/DELETE.\nColumns with low cardinality (few unique values, e.g., boolean flags).\n\n\n\n\nüîß Check Your Indexes\nIn PostgreSQL (via psql):\n\\d tablename\nYou‚Äôll see indexes, constraints, etc.",
    "crumbs": [
      "Blog",
      "Django",
      "Indexing and Caching"
    ]
  },
  {
    "objectID": "Django/indexing_and_caching.html#caching-in-django",
    "href": "Django/indexing_and_caching.html#caching-in-django",
    "title": "Indexing and Caching",
    "section": "2Ô∏è‚É£ Caching in Django",
    "text": "2Ô∏è‚É£ Caching in Django\n\nüìñ What is Caching?\nCaching stores frequently used data in a fast-access layer (memory) to reduce database load.\n\n\n\n‚úÖ Why Use Caching?\n\nReduces database queries\nSpeeds up response time\nSupports high concurrency apps (leaderboards, dashboards, etc.)\n\n\n\n\nüõ†Ô∏è Types of Caching in Django\n\n\n\n\n\n\n\n\nCache Type\nUse Case\nExample\n\n\n\n\nPer-View Cache\nCache entire view responses\n@cache_page decorator\n\n\nTemplate Cache\nCache parts of templates\n{% cache 600 my_key %}\n\n\nLow-Level Cache\nCache arbitrary data (queries, objects)\ncache.set() / cache.get()\n\n\nDatabase Query Cache\nCache expensive ORM queries\nCustom caching logic\n\n\n\n\n\n\n‚öôÔ∏è How to Set Up Caching in Django\n\n1. Install Redis or Memcached\nFor Redis:\npip install django-redis\n\n\n2. Configure in settings.py\nCACHES = {\n    \"default\": {\n        \"BACKEND\": \"django_redis.cache.RedisCache\",\n        \"LOCATION\": \"redis://127.0.0.1:6379/1\",\n        \"OPTIONS\": {\n            \"CLIENT_CLASS\": \"django_redis.client.DefaultClient\",\n        }\n    }\n}\n\n\n\n\nüî® Cache Example: Per-View\nfrom django.views.decorators.cache import cache_page\n\n@cache_page(60 * 15)  # Cache for 15 minutes\ndef leaderboard(request):\n    # expensive DB logic\n    return render(request, \"leaderboard.html\", context)\n\n\n\nüî® Cache Example: Low-Level Data Caching\nfrom django.core.cache import cache\n\ndef get_top_players():\n    data = cache.get('top_players')\n\n    if data is None:\n        data = Player.objects.order_by('-score')[:10]\n        cache.set('top_players', data, timeout=300)  # Cache for 5 mins\n\n    return data",
    "crumbs": [
      "Blog",
      "Django",
      "Indexing and Caching"
    ]
  },
  {
    "objectID": "Django/indexing_and_caching.html#indexing-vs-caching-at-a-glance",
    "href": "Django/indexing_and_caching.html#indexing-vs-caching-at-a-glance",
    "title": "Indexing and Caching",
    "section": "3Ô∏è‚É£ Indexing vs Caching (At a Glance)",
    "text": "3Ô∏è‚É£ Indexing vs Caching (At a Glance)\n\n\n\n\n\n\n\n\nAspect\nIndexing\nCaching\n\n\n\n\nLocation\nDatabase engine (B-tree)\nMemory store (Redis, Memcached)\n\n\nPurpose\nSpeed up data retrieval\nReduce query repetition\n\n\nPersistence\nPersistent (on disk)\nTemporary (in memory)\n\n\nUse When\nQuerying frequently-used columns\nServing repeated data",
    "crumbs": [
      "Blog",
      "Django",
      "Indexing and Caching"
    ]
  },
  {
    "objectID": "Django/indexing_and_caching.html#advanced-optimizations",
    "href": "Django/indexing_and_caching.html#advanced-optimizations",
    "title": "Indexing and Caching",
    "section": "4Ô∏è‚É£ Advanced Optimizations",
    "text": "4Ô∏è‚É£ Advanced Optimizations\n\n\n\n\n\n\n\nTechnique\nHow\n\n\n\n\nSelect Related / Prefetch Related\nReduce N+1 queries when joining related models\n\n\nMaterialized Views\nPre-compute and store complex queries (PostgreSQL)\n\n\nDatabase Partitioning\nSplit large tables to speed up queries\n\n\nCDNs\nCache static/dynamic API responses closer to users",
    "crumbs": [
      "Blog",
      "Django",
      "Indexing and Caching"
    ]
  },
  {
    "objectID": "Django/indexing_and_caching.html#best-practices-for-indexing-caching",
    "href": "Django/indexing_and_caching.html#best-practices-for-indexing-caching",
    "title": "Indexing and Caching",
    "section": "‚úÖ Best Practices for Indexing & Caching",
    "text": "‚úÖ Best Practices for Indexing & Caching\n\n\n\n\n\n\n\nBest Practice\nWhy\n\n\n\n\nProfile queries (Django Debug Toolbar)\nKnow which queries are slow\n\n\nCache only expensive data\nSimple queries don‚Äôt need caching\n\n\nInvalidate caches on data changes\nPrevent stale data\n\n\nIndex high-read fields with filters, joins, sorting\nSpeed up common lookups\n\n\nUse Redis for caching dynamic leaderboard dashboards\nFast, in-memory store",
    "crumbs": [
      "Blog",
      "Django",
      "Indexing and Caching"
    ]
  },
  {
    "objectID": "Django/indexing_and_caching.html#example-leaderboard-with-indexes-and-caching",
    "href": "Django/indexing_and_caching.html#example-leaderboard-with-indexes-and-caching",
    "title": "Indexing and Caching",
    "section": "üèÜ Example: Leaderboard with Indexes and Caching",
    "text": "üèÜ Example: Leaderboard with Indexes and Caching\n\nModel\nclass Player(models.Model):\n    name = models.CharField(max_length=100)\n    score = models.IntegerField(db_index=True)\n\n\nView (with caching)\nfrom django.core.cache import cache\nfrom django.shortcuts import render\n\ndef leaderboard(request):\n    top_players = cache.get('leaderboard_top_10')\n\n    if not top_players:\n        top_players = Player.objects.order_by('-score')[:10]\n        cache.set('leaderboard_top_10', top_players, timeout=300)\n\n    return render(request, 'leaderboard.html', {'players': top_players})",
    "crumbs": [
      "Blog",
      "Django",
      "Indexing and Caching"
    ]
  },
  {
    "objectID": "Django/0_authentication.html",
    "href": "Django/0_authentication.html",
    "title": "Authentication",
    "section": "",
    "text": "üîê Authentication = Who are you?\nüîì Authorization = Are you allowed to do this?\n\nDRF handles authentication via pluggable classes set in REST_FRAMEWORK['DEFAULT_AUTHENTICATION_CLASSES'].",
    "crumbs": [
      "Blog",
      "Django",
      "Authentication"
    ]
  },
  {
    "objectID": "Django/0_authentication.html#authentication-in-django-rest-framework-drf",
    "href": "Django/0_authentication.html#authentication-in-django-rest-framework-drf",
    "title": "Authentication",
    "section": "",
    "text": "üîê Authentication = Who are you?\nüîì Authorization = Are you allowed to do this?\n\nDRF handles authentication via pluggable classes set in REST_FRAMEWORK['DEFAULT_AUTHENTICATION_CLASSES'].",
    "crumbs": [
      "Blog",
      "Django",
      "Authentication"
    ]
  },
  {
    "objectID": "Django/0_authentication.html#built-in-common-authentication-classes-in-django-rest-framework",
    "href": "Django/0_authentication.html#built-in-common-authentication-classes-in-django-rest-framework",
    "title": "Authentication",
    "section": "üß± Built-in & Common Authentication Classes in Django REST Framework",
    "text": "üß± Built-in & Common Authentication Classes in Django REST Framework\n\n\n\n\n\n\n\n\nClass\nDescription\nUse Case\n\n\n\n\nSessionAuthentication\nUses Django‚Äôs session + CSRF cookies\nWeb clients using Django templates or admin\n\n\nBasicAuthentication\nSends Base64-encoded username/password in header\nQuick API testing; not for production\n\n\nTokenAuthentication\nToken in Authorization: Token &lt;token&gt;\nSimple token-based API auth for mobile, SPA\n\n\nJWTAuthentication (via djangorestframework-simplejwt)\nToken with built-in expiry, stateless\nMobile apps, SPAs, modern REST APIs\n\n\nOAuth2Authentication (via django-oauth-toolkit)\nSupports Bearer tokens with scopes, introspection, refresh\nSaaS-to-SaaS integrations, B2B APIs, third-party developer portals\n\n\nRemoteUserAuthentication\nAuthenticates based on REMOTE_USER HTTP header\nInternal apps behind enterprise SSO or reverse proxies\n\n\nCustomAuthentication\nYou implement authenticate(self, request)\nFor API keys, mTLS, hardware-based tokens, etc.",
    "crumbs": [
      "Blog",
      "Django",
      "Authentication"
    ]
  },
  {
    "objectID": "Django/0_authentication.html#basic-setup",
    "href": "Django/0_authentication.html#basic-setup",
    "title": "Authentication",
    "section": "üõ† Basic Setup",
    "text": "üõ† Basic Setup\nIn settings.py:\nREST_FRAMEWORK = {\n    'DEFAULT_AUTHENTICATION_CLASSES': [\n        'rest_framework.authentication.SessionAuthentication',\n        'rest_framework.authentication.TokenAuthentication',\n    ]\n}\nThis enables both browser and API clients to authenticate.",
    "crumbs": [
      "Blog",
      "Django",
      "Authentication"
    ]
  },
  {
    "objectID": "Django/0_authentication.html#common-auth-workflows",
    "href": "Django/0_authentication.html#common-auth-workflows",
    "title": "Authentication",
    "section": "‚úÖ Common Auth Workflows",
    "text": "‚úÖ Common Auth Workflows\n\n\n\n\n\n\n\n\nType\nUser Experience\nUse With\n\n\n\n\nSessionAuth\nLog in through Django Admin or LoginView\nBrowsers\n\n\nTokenAuth\nPOST username+password ‚Üí get token\nPostman, scripts, apps\n\n\nJWTAuth\nPOST credentials ‚Üí get access/refresh tokens\nSPAs, mobile apps\n\n\nAPI Keys\nHeader with a static token\n3rd-party integrations\n\n\nOAuth2 / SSO\nLogin via Google, GitHub, etc.\nSaaS, enterprise",
    "crumbs": [
      "Blog",
      "Django",
      "Authentication"
    ]
  },
  {
    "objectID": "Django/0_authentication.html#token-authentication-built-in",
    "href": "Django/0_authentication.html#token-authentication-built-in",
    "title": "Authentication",
    "section": "üîë Token Authentication (Built-in)",
    "text": "üîë Token Authentication (Built-in)\n\nAdd 'rest_framework.authtoken' to INSTALLED_APPS\nRun python manage.py migrate\nAdd login view:\n\nfrom rest_framework.authtoken.views import obtain_auth_token\n\nurlpatterns = [\n    path('api/token/', obtain_auth_token),\n]\n\nUse it:\n\nPOST /api/token/\n{ \"username\": \"user\", \"password\": \"pass\" }\n\n# Response:\n{ \"token\": \"abc123\" }\n\n# Then use:\nAuthorization: Token abc123",
    "crumbs": [
      "Blog",
      "Django",
      "Authentication"
    ]
  },
  {
    "objectID": "Django/0_authentication.html#jwt-authentication-recommended-for-apis",
    "href": "Django/0_authentication.html#jwt-authentication-recommended-for-apis",
    "title": "Authentication",
    "section": "üîê JWT Authentication (Recommended for APIs)",
    "text": "üîê JWT Authentication (Recommended for APIs)\n\nInstall SimpleJWT:\n\npip install djangorestframework-simplejwt\n\nAdd to settings.py:\n\nREST_FRAMEWORK = {\n    'DEFAULT_AUTHENTICATION_CLASSES': [\n        'rest_framework_simplejwt.authentication.JWTAuthentication',\n    ]\n}\n\nfrom datetime import timedelta\nSIMPLE_JWT = {\n    'ACCESS_TOKEN_LIFETIME': timedelta(minutes=30),\n    'REFRESH_TOKEN_LIFETIME': timedelta(days=7),\n}\n\nAdd routes:\n\nfrom rest_framework_simplejwt.views import TokenObtainPairView, TokenRefreshView\n\nurlpatterns = [\n    path('api/token/', TokenObtainPairView.as_view()),\n    path('api/token/refresh/', TokenRefreshView.as_view()),\n]\n‚úÖ Usage:\nPOST /api/token/ ‚Üí get { access, refresh }\nAuthorization: Bearer &lt;access&gt;",
    "crumbs": [
      "Blog",
      "Django",
      "Authentication"
    ]
  },
  {
    "objectID": "Django/0_authentication.html#oauth2.0-authentication-recommended-for-b2b-3rd-party-apis",
    "href": "Django/0_authentication.html#oauth2.0-authentication-recommended-for-b2b-3rd-party-apis",
    "title": "Authentication",
    "section": "üîê OAuth2.0 Authentication (Recommended for B2B & 3rd-Party APIs)",
    "text": "üîê OAuth2.0 Authentication (Recommended for B2B & 3rd-Party APIs)\nOAuth2 is an open protocol for secure delegated access ‚Äî ideal for giving external apps access without exposing user credentials.\n\n\n‚úÖ 1. Install dependencies\npip install django-oauth-toolkit\n\n\n\nüõ† 2. Add to settings.py\nINSTALLED_APPS += [\n    'oauth2_provider',\n]\n\nAUTHENTICATION_BACKENDS = (\n    'django.contrib.auth.backends.ModelBackend',\n    'oauth2_provider.backends.OAuth2Backend',\n)\n\nREST_FRAMEWORK = {\n    'DEFAULT_AUTHENTICATION_CLASSES': [\n        'oauth2_provider.contrib.rest_framework.OAuth2Authentication',\n        'rest_framework.authentication.SessionAuthentication',\n        'rest_framework_simplejwt.authentication.JWTAuthentication',  # optional\n    ],\n    'DEFAULT_PERMISSION_CLASSES': [\n        'rest_framework.permissions.IsAuthenticated',\n    ],\n}\n\n\n\nüîß 3. Configure OAuth2 settings (optional)\nOAUTH2_PROVIDER = {\n    'ACCESS_TOKEN_EXPIRE_SECONDS': 3600,\n    'REFRESH_TOKEN_EXPIRE_SECONDS': 7 * 24 * 3600,\n    'SCOPES': {\n        'read': 'Read access to protected resources',\n        'write': 'Write access to protected resources',\n        'email': 'Access to your email',\n        'profile': 'Access to your profile info',\n    }\n}\n\n\n\nüß© 4. Add URLs to urls.py\nfrom oauth2_provider import views as oauth2_views\n\nurlpatterns += [\n    path('o/', include('oauth2_provider.urls', namespace='oauth2_provider')),\n]\n\n/o/token/: Access token endpoint\n/o/revoke_token/: Token revocation\n/o/authorize/: Authorization code flow (if used)\n/o/introspect/: Validate tokens (optional)\n\n\n\n\nüß™ 5. Create an Application\nUse the Django admin panel:\n/admin/oauth2_provider/application/add/\n\n\n\n\n\n\n\nField\nExample\n\n\n\n\nName\nMy API Client\n\n\nClient type\nConfidential\n\n\nAuthorization grant type\nClient Credentials / Authorization Code / Password\n\n\nUser\nYour internal user\n\n\n\n\n\n\nüì° 6. Use from Postman or curl\nRequest token (Client Credentials grant):\nPOST /o/token/\nContent-Type: application/x-www-form-urlencoded\n\ngrant_type=client_credentials&\nclient_id=...&\nclient_secret=...\n‚úÖ Response:\n{\n  \"access_token\": \"abc123\",\n  \"token_type\": \"Bearer\",\n  \"expires_in\": 3600,\n  \"scope\": \"read write\"\n}\n\n\n\nüîê 7. Protect your views\nfrom rest_framework import viewsets, permissions\nfrom oauth2_provider.contrib.rest_framework import TokenHasScope\n\nclass ChatViewSet(viewsets.ModelViewSet):\n    permission_classes = [permissions.IsAuthenticated, TokenHasScope]\n    required_scopes = ['read', 'write']\n\n\n\nüîç 8. Token introspection\nValidate token from external services:\nPOST /o/introspect/\nAuthorization: Basic base64(client_id:client_secret)\n\ntoken=abc123\n‚úÖ Response:\n{\n  \"active\": true,\n  \"scope\": \"read write\",\n  \"client_id\": \"xyz\"\n}\n\n\n\nüìò Flow Options\n\n\n\nGrant Type\nUse Case\n\n\n\n\nAuthorization Code\nBrowser-based user login (3rd-party apps)\n\n\nClient Credentials\nServer-to-server (no user)\n\n\nResource Owner Password\nTrusted apps (legacy/mobile)\n\n\nImplicit (deprecated)\nFrontend-only apps (not recommended)\n\n\n\n\n\n\nüß™ Example: Use in curl\ncurl -X POST http://localhost:8000/o/token/ \\\n  -d \"grant_type=client_credentials\" \\\n  -d \"client_id=...\" \\\n  -d \"client_secret=...\"\ncurl http://localhost:8000/api/protected/ \\\n  -H \"Authorization: Bearer &lt;access_token&gt;\"",
    "crumbs": [
      "Blog",
      "Django",
      "Authentication"
    ]
  },
  {
    "objectID": "Django/0_authentication.html#custom-authentication",
    "href": "Django/0_authentication.html#custom-authentication",
    "title": "Authentication",
    "section": "üß† Custom Authentication",
    "text": "üß† Custom Authentication\nMake a custom class if you want to: - Use X-API-Key headers - Authenticate based on certificate (mTLS) - Add throttling per user type\nExample:\nfrom rest_framework.authentication import BaseAuthentication\n\nclass CustomTokenAuth(BaseAuthentication):\n    def authenticate(self, request):\n        token = request.headers.get('X-Api-Key')\n        if token == \"expected_token\":\n            return (MyUserObject, None)\n        return None",
    "crumbs": [
      "Blog",
      "Django",
      "Authentication"
    ]
  },
  {
    "objectID": "Django/0_authentication.html#login-via-session-csrf-for-browsers",
    "href": "Django/0_authentication.html#login-via-session-csrf-for-browsers",
    "title": "Authentication",
    "section": "üîê Login via Session + CSRF (For Browsers)",
    "text": "üîê Login via Session + CSRF (For Browsers)\n\nRequires logging in via Django LoginView or Admin\nAutomatically sends sessionid cookie\nMust include CSRF token in all modifying requests\n\nGood for: - Internal admin views - API browsable interface (/api/ with DRF)",
    "crumbs": [
      "Blog",
      "Django",
      "Authentication"
    ]
  },
  {
    "objectID": "Django/0_authentication.html#permissions-authz-not-authn",
    "href": "Django/0_authentication.html#permissions-authz-not-authn",
    "title": "Authentication",
    "section": "üîí Permissions (AuthZ, not AuthN)",
    "text": "üîí Permissions (AuthZ, not AuthN)\nOnce the user is authenticated, permissions check whether they can do something:\n\n\n\nClass\nDescription\n\n\n\n\nAllowAny\nOpen to everyone\n\n\nIsAuthenticated\nOnly logged-in users\n\n\nIsAdminUser\nOnly superusers\n\n\nIsAuthenticatedOrReadOnly\nAnyone can read, only authed can write\n\n\nCustom\nhas_permission(self, request, view) logic\n\n\n\nUsed in your views like:\nclass MyViewSet(viewsets.ModelViewSet):\n    permission_classes = [IsAuthenticated]",
    "crumbs": [
      "Blog",
      "Django",
      "Authentication"
    ]
  },
  {
    "objectID": "Django/0_authentication.html#session-vs-token-vs-jwt-comparison",
    "href": "Django/0_authentication.html#session-vs-token-vs-jwt-comparison",
    "title": "Authentication",
    "section": "üîÅ Session vs Token vs JWT (Comparison)",
    "text": "üîÅ Session vs Token vs JWT (Comparison)\n\n\n\nFeature\nSessionAuth\nTokenAuth\nJWT\n\n\n\n\nCookie-based?\n‚úÖ Yes\n‚ùå No\n‚ùå No\n\n\nHeader-based?\n‚ùå No\n‚úÖ Yes\n‚úÖ Yes\n\n\nExpiry Support\nManual\nManual\n‚úÖ Built-in\n\n\nStateless?\n‚ùå No\n‚úÖ Yes\n‚úÖ Yes\n\n\nBest For\nWeb apps\nSimple API clients\nProduction-grade APIs",
    "crumbs": [
      "Blog",
      "Django",
      "Authentication"
    ]
  },
  {
    "objectID": "Django/0_authentication.html#example-login-with-jwt-and-use-api",
    "href": "Django/0_authentication.html#example-login-with-jwt-and-use-api",
    "title": "Authentication",
    "section": "üîê Example: Login with JWT and Use API",
    "text": "üîê Example: Login with JWT and Use API\n# Login\ncurl -X POST /api/token/ \\\n  -H \"Content-Type: application/json\" \\\n  -d '{\"email\": \"you@example.com\", \"password\": \"pass\"}'\n\n# Response:\n{\n  \"access\": \"ey...\",\n  \"refresh\": \"ey...\"\n}\n\n# Use it\ncurl -H \"Authorization: Bearer ey...\" /api/clients/",
    "crumbs": [
      "Blog",
      "Django",
      "Authentication"
    ]
  },
  {
    "objectID": "Django/0_authentication.html#refresh-tokens-jwt",
    "href": "Django/0_authentication.html#refresh-tokens-jwt",
    "title": "Authentication",
    "section": "üîÑ Refresh Tokens (JWT)",
    "text": "üîÑ Refresh Tokens (JWT)\nWhen access token expires, use refresh:\nPOST /api/token/refresh/\n{\n  \"refresh\": \"ey...\"\n}\nGet a new access token without re-logging in.",
    "crumbs": [
      "Blog",
      "Django",
      "Authentication"
    ]
  },
  {
    "objectID": "Django/0_authentication.html#advanced-use-cases",
    "href": "Django/0_authentication.html#advanced-use-cases",
    "title": "Authentication",
    "section": "üîê Advanced Use Cases",
    "text": "üîê Advanced Use Cases\n\n\n\nFeature\nUse\n\n\n\n\nAPI key for 3rd parties\nCustom auth class, or use drf-api-key\n\n\nService accounts\nCreate special users, assign static tokens\n\n\nmTLS authentication\nTerminate TLS at Nginx/LB, forward identity headers\n\n\nOAuth2\nUse django-allauth, django-oauth-toolkit",
    "crumbs": [
      "Blog",
      "Django",
      "Authentication"
    ]
  },
  {
    "objectID": "Django/0_authentication.html#diagram-drf-auth-flow-jwt",
    "href": "Django/0_authentication.html#diagram-drf-auth-flow-jwt",
    "title": "Authentication",
    "section": "üß† Diagram: DRF Auth Flow (JWT)",
    "text": "üß† Diagram: DRF Auth Flow (JWT)\n[Client]\n  |\n  | -- POST /api/token/  --&gt;  [DRF Login View]\n  | &lt;-- {access, refresh}\n  |\n  | -- GET /api/data/  (Authorization: Bearer &lt;access&gt;)\n  | --&gt; DRF checks JWT -&gt; decodes -&gt; authenticates user",
    "crumbs": [
      "Blog",
      "Django",
      "Authentication"
    ]
  },
  {
    "objectID": "Django/0_authentication.html#summary-cheat-sheet",
    "href": "Django/0_authentication.html#summary-cheat-sheet",
    "title": "Authentication",
    "section": "‚úÖ Summary Cheat Sheet",
    "text": "‚úÖ Summary Cheat Sheet\n\n\n\n\n\n\n\nConcept\nYou Should Know\n\n\n\n\nDRF supports multiple auth systems\n‚úÖ Use DEFAULT_AUTHENTICATION_CLASSES\n\n\nToken vs JWT\nJWT is stateless + has expiry\n\n\nSessionAuth\nGreat for browser use, requires CSRF\n\n\nJWTAuth\nBest for API use (SPAs, mobile)\n\n\nPermissions are separate from auth\nUse permission_classes",
    "crumbs": [
      "Blog",
      "Django",
      "Authentication"
    ]
  },
  {
    "objectID": "Django/1_crispy_forms.html",
    "href": "Django/1_crispy_forms.html",
    "title": "Crispy Forms",
    "section": "",
    "text": "poetry add django-crispy-forms crispy-bootstrap5",
    "crumbs": [
      "Blog",
      "Django",
      "Crispy Forms"
    ]
  },
  {
    "objectID": "Django/1_crispy_forms.html#installation-of-crisply-and-bootstrap",
    "href": "Django/1_crispy_forms.html#installation-of-crisply-and-bootstrap",
    "title": "Crispy Forms",
    "section": "",
    "text": "poetry add django-crispy-forms crispy-bootstrap5",
    "crumbs": [
      "Blog",
      "Django",
      "Crispy Forms"
    ]
  },
  {
    "objectID": "Django/1_crispy_forms.html#update-settings.py",
    "href": "Django/1_crispy_forms.html#update-settings.py",
    "title": "Crispy Forms",
    "section": "Update settings.py",
    "text": "Update settings.py\nINSTALLED_APPS = [\n    # Other installed apps\n    'crispy_forms',\n    'crispy_bootstrap5',\n]\n\n# Set the Crispy Forms template pack to Bootstrap 5\nCRISPY_ALLOWED_TEMPLATE_PACKS = \"bootstrap5\"\nCRISPY_TEMPLATE_PACK = \"bootstrap5\"",
    "crumbs": [
      "Blog",
      "Django",
      "Crispy Forms"
    ]
  },
  {
    "objectID": "Django/1_crispy_forms.html#form-layouts",
    "href": "Django/1_crispy_forms.html#form-layouts",
    "title": "Crispy Forms",
    "section": "Form Layouts",
    "text": "Form Layouts\n\nDjango Crispy Forms provides a powerful layout system that allows you to control the form layout directly in your form class.\n\n\nExample\n\nfrom django import forms\nfrom crispy_forms.helper import FormHelper\nfrom crispy_forms.layout import Layout, Field, Row, Column, Submit\n\nclass ExampleForm(forms.Form):\n    first_name = forms.CharField()\n    last_name = forms.CharField()\n    email = forms.EmailField()\n    message = forms.CharField(widget=forms.Textarea)\n\n    def __init__(self, *args, **kwargs):\n        super().__init__(*args, **kwargs)\n        self.helper = FormHelper()\n        self.helper.form_method = 'post'\n        self.helper.layout = Layout(\n            Row(\n                Column('first_name', css_class='form-group col-md-6 mb-0'),\n                Column('last_name', css_class='form-group col-md-6 mb-0'),\n                css_class='form-row'\n            ),\n            'email',\n            'message',\n            Submit('submit', 'Send Message', css_class='btn btn-primary')\n        )\n\nLayout Elements:\n\nField: Wraps a form field. You can customize its attributes (e.g., CSS classes, placeholders).\nRow and Column: Define grid layouts for your form fields (e.g., using Bootstrap‚Äôs grid system).\nSubmit: Adds a submit button to the form.",
    "crumbs": [
      "Blog",
      "Django",
      "Crispy Forms"
    ]
  },
  {
    "objectID": "Django/1_crispy_forms.html#helper-class",
    "href": "Django/1_crispy_forms.html#helper-class",
    "title": "Crispy Forms",
    "section": "Helper Class",
    "text": "Helper Class\n\nThe FormHelper class in Django Crispy Forms is where most of the customization happens.\n\n\nCommon Attributes:\n\nform_method: Specifies the form submission method (‚Äòpost‚Äô or ‚Äòget‚Äô).\nform_action: The URL where the form should be submitted.\nform_class: CSS classes for the form.\nlayout: Defines the form layout using Layout, Field, Row, Column, etc.\n\n\n\nExample\n\nfrom crispy_forms.helper import FormHelper\n\nclass ExampleForm(forms.Form):\n    ...\n\n    def __init__(self, *args, **kwargs):\n        super().__init__(*args, **kwargs)\n        self.helper = FormHelper()\n        self.helper.form_id = 'example-form-id'\n        self.helper.form_class = 'form-horizontal'\n        self.helper.form_method = 'post'\n        self.helper.form_action = 'submit_form'",
    "crumbs": [
      "Blog",
      "Django",
      "Crispy Forms"
    ]
  },
  {
    "objectID": "Django/1_crispy_forms.html#update-your-forms",
    "href": "Django/1_crispy_forms.html#update-your-forms",
    "title": "Crispy Forms",
    "section": "Update Your Forms",
    "text": "Update Your Forms\nfrom django import forms\nfrom .models import ToDo\nfrom crispy_forms.helper import FormHelper\nfrom crispy_forms.layout import Submit\n\nclass ToDoForm(forms.ModelForm):\n    def __init__(self, *args, **kwargs):\n        super().__init__(*args, **kwargs)\n        self.helper = FormHelper()\n        self.helper.add_input(Submit('Add todo', 'Add todo'))\n        \n    class Meta:\n        model = ToDo\n        fields = ['title', 'description', 'completed']\n        widgets = {\n            'description': forms.Textarea(attrs={'rows': 4}),\n        }",
    "crumbs": [
      "Blog",
      "Django",
      "Crispy Forms"
    ]
  },
  {
    "objectID": "Django/1_crispy_forms.html#update-views",
    "href": "Django/1_crispy_forms.html#update-views",
    "title": "Crispy Forms",
    "section": "Update Views",
    "text": "Update Views\n@login_required\ndef add_todo(request):\n    if request.method == 'POST':\n        form = ToDoForm(request.POST)\n        if form.is_valid():\n            todo = form.save(commit=False)\n            todo.user = request.user\n            todo.save()\n            return redirect('list_todo')  # Redirect to your todo list view\n        else:\n            # Add this to check for form validation errors\n            print(form.errors)\n    else:\n        form = ToDoForm()\n\n    return render(request, 'todos/add_todo.html', {'form': form})",
    "crumbs": [
      "Blog",
      "Django",
      "Crispy Forms"
    ]
  },
  {
    "objectID": "Django/1_crispy_forms.html#update-html",
    "href": "Django/1_crispy_forms.html#update-html",
    "title": "Crispy Forms",
    "section": "Update html",
    "text": "Update html\n{% extends 'base.html' %}\n\n{% block title %}Add New ToDo{% endblock %}\n\n{% block content %}\n    &lt;h1&gt;Add a New ToDo&lt;/h1&gt;\n    &lt;form method=\"post\"&gt;\n        {% csrf_token %}\n        {% load crispy_forms_tags %}\n        {% crispy form %}\n        \n    &lt;/form&gt;\n{% endblock %}",
    "crumbs": [
      "Blog",
      "Django",
      "Crispy Forms"
    ]
  },
  {
    "objectID": "Django/1_crispy_forms.html#template",
    "href": "Django/1_crispy_forms.html#template",
    "title": "Crispy Forms",
    "section": "Template",
    "text": "Template\n\nbase.html\nnav.html\napp\n\napp_specific.html\n\napp2\n\napp2_specific.html",
    "crumbs": [
      "Blog",
      "Django",
      "Crispy Forms"
    ]
  },
  {
    "objectID": "Django/secrets.html",
    "href": "Django/secrets.html",
    "title": "Secrets",
    "section": "",
    "text": "# .env file\nDJANGO_SECRET_KEY='your-secret-key'\nDB_NAME='your-database-name'\nDB_USER='your-database-user'\nDB_PASSWORD='your-database-password'\nDB_HOST='your-database-host'\nDB_PORT='your-database-port'\n\n\n\npoetry add django-environ\n\n\n\n\nModify settings.py file\n\nimport environ\nimport os\n\nenv = environ.Env()\nenviron.Env.read_env(os.path.join(BASE_DIR, '.env'))\n\nSECRET_KEY = env('DJANGO_SECRET_KEY')\nDEBUG = env.bool('DEBUG', default=False)\nALLOWED_HOSTS = env.list('ALLOWED_HOSTS', default=[])\n\nDATABASES = {\n    'default': {\n        'ENGINE': 'django.db.backends.postgresql',\n        'NAME': env('DB_NAME'),\n        'USER': env('DB_USER'),\n        'PASSWORD': env('DB_PASSWORD'),\n        'HOST': env('DB_HOST', default='localhost'),\n        'PORT': env('DB_PORT', default='5432'),\n    }\n}",
    "crumbs": [
      "Blog",
      "Django",
      "Secrets"
    ]
  },
  {
    "objectID": "Django/secrets.html#use-environment-variables",
    "href": "Django/secrets.html#use-environment-variables",
    "title": "Secrets",
    "section": "",
    "text": "# .env file\nDJANGO_SECRET_KEY='your-secret-key'\nDB_NAME='your-database-name'\nDB_USER='your-database-user'\nDB_PASSWORD='your-database-password'\nDB_HOST='your-database-host'\nDB_PORT='your-database-port'\n\n\n\npoetry add django-environ\n\n\n\n\nModify settings.py file\n\nimport environ\nimport os\n\nenv = environ.Env()\nenviron.Env.read_env(os.path.join(BASE_DIR, '.env'))\n\nSECRET_KEY = env('DJANGO_SECRET_KEY')\nDEBUG = env.bool('DEBUG', default=False)\nALLOWED_HOSTS = env.list('ALLOWED_HOSTS', default=[])\n\nDATABASES = {\n    'default': {\n        'ENGINE': 'django.db.backends.postgresql',\n        'NAME': env('DB_NAME'),\n        'USER': env('DB_USER'),\n        'PASSWORD': env('DB_PASSWORD'),\n        'HOST': env('DB_HOST', default='localhost'),\n        'PORT': env('DB_PORT', default='5432'),\n    }\n}",
    "crumbs": [
      "Blog",
      "Django",
      "Secrets"
    ]
  },
  {
    "objectID": "Django/secrets.html#use-github-secrets-for-cicd",
    "href": "Django/secrets.html#use-github-secrets-for-cicd",
    "title": "Secrets",
    "section": "Use GitHub Secrets for CI/CD",
    "text": "Use GitHub Secrets for CI/CD\n\nAdd Secrets to GitHub\n\nNavigate to your repository on GitHub.\nGo to Settings &gt; Secrets and variables &gt; Actions.\nAdd your secrets (e.g., DJANGO_SECRET_KEY, DB_NAME).\n\n\n\nAccess Secrets in GitHub Actions\n\nExample workflow file\n\nname: Django CI/CD\n\non: [push]\n\njobs:\n  build:\n    runs-on: ubuntu-latest\n\n    steps:\n    - name: Checkout code\n      uses: actions/checkout@v2\n\n    - name: Set up Python\n      uses: actions/setup-python@v2\n      with:\n        python-version: '3.9'\n\n    - name: Install dependencies\n      run: |\n        python -m pip install --upgrade pip\n        pip install -r requirements.txt\n\n    - name: Set environment variables\n      run: echo \"DJANGO_SECRET_KEY=${{ secrets.DJANGO_SECRET_KEY }}\" &gt;&gt; $GITHUB_ENV\n\n    - name: Run migrations\n      env:\n        DJANGO_SECRET_KEY: ${{ secrets.DJANGO_SECRET_KEY }}\n        DB_NAME: ${{ secrets.DB_NAME }}\n        DB_USER: ${{ secrets.DB_USER }}\n        DB_PASSWORD: ${{ secrets.DB_PASSWORD }}\n        DB_HOST: ${{ secrets.DB_HOST }}\n        DB_PORT: ${{ secrets.DB_PORT }}\n      run: |\n        python manage.py migrate\n\n    - name: Run tests\n      env:\n        DJANGO_SECRET_KEY: ${{ secrets.DJANGO_SECRET_KEY }}\n        DB_NAME: ${{ secrets.DB_NAME }}\n        DB_USER: ${{ secrets.DB_USER }}\n        DB_PASSWORD: ${{ secrets.DB_PASSWORD }}\n        DB_HOST: ${{ secrets.DB_HOST }}\n        DB_PORT: ${{ secrets.DB_PORT }}\n      run: |\n        python manage.py test",
    "crumbs": [
      "Blog",
      "Django",
      "Secrets"
    ]
  },
  {
    "objectID": "Django/secrets.html#use-a-secret-management-service",
    "href": "Django/secrets.html#use-a-secret-management-service",
    "title": "Secrets",
    "section": "Use a Secret Management Service",
    "text": "Use a Secret Management Service\nFor large projects, consider using secret management services like: - AWS Secrets Manager - Azure Key Vault - HashiCorp Vault.",
    "crumbs": [
      "Blog",
      "Django",
      "Secrets"
    ]
  },
  {
    "objectID": "Django/secrets.html#use-config.settings-structure",
    "href": "Django/secrets.html#use-config.settings-structure",
    "title": "Secrets",
    "section": "Use config.settings Structure",
    "text": "Use config.settings Structure\n\nFor more advanced setups, you can structure your settings using the config.settings module approach to separate settings for different environments (development, production, etc.).\n\n\nBase Settings (config/settings/base.py)\nimport environ\nimport os\n\nenv = environ.Env()\nenviron.Env.read_env(os.path.join(BASE_DIR, '.env'))\n\nBASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))\n\nSECRET_KEY = env('DJANGO_SECRET_KEY')\nDEBUG = env.bool('DEBUG', default=False)\nALLOWED_HOSTS = env.list('ALLOWED_HOSTS', default=[])\n\nDATABASES = {\n    'default': {\n        'ENGINE': 'django.db.backends.postgresql',\n        'NAME': env('DB_NAME'),\n        'USER': env('DB_USER'),\n        'PASSWORD': env('DB_PASSWORD'),\n        'HOST': env('DB_HOST', default='localhost'),\n        'PORT': env('DB_PORT', default='5432'),\n    }\n}\n\n\nDevelopment Settings (config/settings/development.py)\nfrom .base import *\n\nDEBUG = True\nALLOWED_HOSTS = ['localhost', '127.0.0.1']\n\n\nProduction Settings (config/settings/production.py)\nfrom .base import *\n\nDEBUG = False\nALLOWED_HOSTS = ['yourdomain.com']\n\n\nSpecify Settings Module:\n\nSet the DJANGO_SETTINGS_MODULE environment variable to specify the settings module to use.\nFor development: export DJANGO_SETTINGS_MODULE=config.settings.development\nFor production: export DJANGO_SETTINGS_MODULE=config.settings.production",
    "crumbs": [
      "Blog",
      "Django",
      "Secrets"
    ]
  },
  {
    "objectID": "Django/2_permission _types.html",
    "href": "Django/2_permission _types.html",
    "title": "Permission Types",
    "section": "",
    "text": "A permission and access control system determines who can access what in a SaaS application. It defines user roles, permissions, and restrictions to ensure data security and compliance.\nüîπ Key Components:\n- Authentication (AuthN): Verifies identity (e.g., email, password, MFA).\n- Authorization (AuthZ): Determines what a user can do.\n- Roles & Permissions: Assign different access levels to users.",
    "crumbs": [
      "Blog",
      "Django",
      "Permission Types"
    ]
  },
  {
    "objectID": "Django/2_permission _types.html#what-is-an-access-control-system",
    "href": "Django/2_permission _types.html#what-is-an-access-control-system",
    "title": "Permission Types",
    "section": "",
    "text": "A permission and access control system determines who can access what in a SaaS application. It defines user roles, permissions, and restrictions to ensure data security and compliance.\nüîπ Key Components:\n- Authentication (AuthN): Verifies identity (e.g., email, password, MFA).\n- Authorization (AuthZ): Determines what a user can do.\n- Roles & Permissions: Assign different access levels to users.",
    "crumbs": [
      "Blog",
      "Django",
      "Permission Types"
    ]
  },
  {
    "objectID": "Django/2_permission _types.html#types-of-access-control-models",
    "href": "Django/2_permission _types.html#types-of-access-control-models",
    "title": "Permission Types",
    "section": "2Ô∏è‚É£ Types of Access Control Models",
    "text": "2Ô∏è‚É£ Types of Access Control Models\n\n1. Role-Based Access Control (RBAC) üîë\n\nUsers are assigned roles (e.g., Admin, Manager, User).\n\nRoles have predefined permissions (e.g., ‚ÄúAdmin can delete users‚Äù).\n\nEasy to manage but not flexible for fine-grained control.\n\n‚úÖ Best for: SaaS apps with structured user roles (e.g., CRM, ERP, HR software).\nExample:\n| Role | Can Read? | Can Write? | Can Delete? |\n|‚Äî‚Äî‚Äî-|‚Äî‚Äî‚Äî-|‚Äî‚Äî‚Äî‚Äî|‚Äî‚Äî‚Äî‚Äî-|\n| Admin | ‚úÖ | ‚úÖ | ‚úÖ |\n| Manager | ‚úÖ | ‚úÖ | ‚ùå |\n| User | ‚úÖ | ‚ùå | ‚ùå |\n\n\n\n2. Attribute-Based Access Control (ABAC) üè∑Ô∏è\n\nAccess is granted based on user attributes (e.g., location, department, subscription level).\n\nDynamic rules define access (e.g., ‚ÄúOnly users from the Finance department can access invoices‚Äù).\n\nMore flexible but complex to manage.\n\n‚úÖ Best for: Large enterprises or multi-tenant SaaS platforms.\nExample Rule:\nif user.department == \"Finance\" and user.location == \"USA\":\n    allow_access(\"Invoices\")\n\n\n\n3. Policy-Based Access Control (PBAC) üìú\n\nUses policies to define access dynamically.\n\nBased on RBAC + ABAC with conditions (e.g., ‚ÄúManagers can edit reports if they belong to the same region‚Äù).\n\nOften implemented using JSON-based policies (e.g., AWS IAM).\n\n‚úÖ Best for: Scalable SaaS apps with complex business rules.\nExample Policy (JSON Format - AWS IAM Style):\n{\n    \"Effect\": \"Allow\",\n    \"Action\": \"reports:edit\",\n    \"Condition\": {\n        \"StringEquals\": {\n            \"user.role\": \"Manager\",\n            \"user.region\": \"report.region\"\n        }\n    }\n}\n\n\n\n4. Discretionary Access Control (DAC) üîê\n\nEach resource owner decides who can access their resources.\n\nUsers can share files, documents, or projects with specific people.\n\n‚úÖ Best for: Collaboration tools (e.g., Google Drive, Notion, Dropbox).\nExample:\nA user shares a document with another user who wasn‚Äôt originally assigned a role.\n\n\n\n5. Mandatory Access Control (MAC) üîí\n\nStrict, military-grade security where users cannot modify permissions.\n\nUsed in government, banking, and highly regulated industries.\n\n‚úÖ Best for: High-security SaaS apps needing strict data protection.",
    "crumbs": [
      "Blog",
      "Django",
      "Permission Types"
    ]
  },
  {
    "objectID": "Django/2_permission _types.html#key-features-of-a-permission-system",
    "href": "Django/2_permission _types.html#key-features-of-a-permission-system",
    "title": "Permission Types",
    "section": "3Ô∏è‚É£ Key Features of a Permission System",
    "text": "3Ô∏è‚É£ Key Features of a Permission System\nüîπ Granular Permissions: Fine-tuned control over actions like read, write, update, delete.\nüîπ Hierarchical Roles: Admins &gt; Managers &gt; Users.\nüîπ Multi-Tenancy Support: Separate permissions for different organizations (e.g., SaaS B2B).\nüîπ Audit Logs & Monitoring: Track access and changes for compliance.\nüîπ Delegated Access & Sharing: Users can grant temporary access to others.\nüîπ Least Privilege Principle: Users get only the access they need.",
    "crumbs": [
      "Blog",
      "Django",
      "Permission Types"
    ]
  },
  {
    "objectID": "Django/2_permission _types.html#best-practices-for-saas-access-control",
    "href": "Django/2_permission _types.html#best-practices-for-saas-access-control",
    "title": "Permission Types",
    "section": "4Ô∏è‚É£ Best Practices for SaaS Access Control",
    "text": "4Ô∏è‚É£ Best Practices for SaaS Access Control\n‚úÖ Use a Centralized Identity Provider (IdP)\nüîπ Implement OAuth 2.0, OpenID Connect (OIDC), or SAML for authentication.\nüîπ Use services like Okta, Auth0, AWS Cognito, Azure AD.\n‚úÖ Implement Multi-Factor Authentication (MFA)\nüîπ Enforce MFA for sensitive operations like billing changes or admin actions.\n‚úÖ Use Role-Based Defaults & Custom Roles\nüîπ Offer predefined roles (Admin, User, Guest) but allow custom permissions.\n‚úÖ Design for Scalability\nüîπ Support thousands of users with hierarchical roles and group-based policies.\n‚úÖ Audit & Log Everything\nüîπ Log failed login attempts, permission changes, API access for security audits.\n‚úÖ Follow the Principle of Least Privilege (PoLP)\nüîπ Default users to minimal access and require explicit elevation.\n‚úÖ Use Token-Based Authorization (JWT, OAuth 2.0)\nüîπ Secure API requests with JWT or OAuth Bearer tokens.",
    "crumbs": [
      "Blog",
      "Django",
      "Permission Types"
    ]
  },
  {
    "objectID": "Django/2_permission _types.html#saas-access-control-implementation-example-in-django",
    "href": "Django/2_permission _types.html#saas-access-control-implementation-example-in-django",
    "title": "Permission Types",
    "section": "5Ô∏è‚É£ SaaS Access Control Implementation (Example in Django)",
    "text": "5Ô∏è‚É£ SaaS Access Control Implementation (Example in Django)\nHere‚Äôs a Django example of RBAC with Django‚Äôs built-in permissions system:\nfrom django.contrib.auth.models import User, Group, Permission\nfrom django.contrib.contenttypes.models import ContentType\nfrom myapp.models import Document\n\n# Create a new role (Group)\nmanager_group = Group.objects.create(name=\"Manager\")\n\n# Define permissions\ncontent_type = ContentType.objects.get_for_model(Document)\nperm = Permission.objects.create(\n    codename='can_edit_documents',\n    name='Can Edit Documents',\n    content_type=content_type,\n)\n\n# Assign permission to the role (group)\nmanager_group.permissions.add(perm)\n\n# Assign role to a user\nuser = User.objects.get(username=\"john_doe\")\nuser.groups.add(manager_group)\n\n# Check if user has permission\nif user.has_perm(\"myapp.can_edit_documents\"):\n    print(\"User can edit documents!\")\n‚úÖ Django, Flask, and Node.js all support built-in role-based authentication.\n‚úÖ For larger applications, consider AWS IAM, Okta, or Auth0.",
    "crumbs": [
      "Blog",
      "Django",
      "Permission Types"
    ]
  },
  {
    "objectID": "Django/2_permission _types.html#popular-saas-access-control-services",
    "href": "Django/2_permission _types.html#popular-saas-access-control-services",
    "title": "Permission Types",
    "section": "6Ô∏è‚É£ Popular SaaS Access Control Services",
    "text": "6Ô∏è‚É£ Popular SaaS Access Control Services\nüîπ Auth0 (OAuth 2.0, RBAC, ABAC)\nüîπ AWS IAM (Policy-based, used in AWS SaaS apps)\nüîπ Okta (Enterprise-grade SSO & access control)\nüîπ Firebase Authentication (For Google-based SaaS apps)\nüîπ Keycloak (Open-source access management)",
    "crumbs": [
      "Blog",
      "Django",
      "Permission Types"
    ]
  },
  {
    "objectID": "Django/2_permission _types.html#access-control-for-multi-tenant-saas",
    "href": "Django/2_permission _types.html#access-control-for-multi-tenant-saas",
    "title": "Permission Types",
    "section": "7Ô∏è‚É£ Access Control for Multi-Tenant SaaS",
    "text": "7Ô∏è‚É£ Access Control for Multi-Tenant SaaS\nIf your SaaS serves multiple organizations, consider: 1. Row-Level Security (RLS)\n- Restrict database access per tenant ID. 2. Per-Organization Roles\n- Each organization has its own admin and users. 3. Tenant-Based API Authorization\n- APIs enforce access based on tenant ownership.\nüîπ Example:\nSELECT * FROM documents WHERE tenant_id = CURRENT_TENANT_ID;",
    "crumbs": [
      "Blog",
      "Django",
      "Permission Types"
    ]
  },
  {
    "objectID": "Django/2_permission _types.html#summary-table-saas-access-control-models",
    "href": "Django/2_permission _types.html#summary-table-saas-access-control-models",
    "title": "Permission Types",
    "section": "üîπ Summary Table: SaaS Access Control Models",
    "text": "üîπ Summary Table: SaaS Access Control Models\n\n\n\nModel\nFlexibility\nSecurity\nBest For\n\n\n\n\nRBAC\nMedium\nHigh\nSaaS with predefined roles\n\n\nABAC\nHigh\nHigh\nDynamic access control\n\n\nPBAC\nVery High\nVery High\nComplex SaaS policies\n\n\nDAC\nMedium\nLow\nUser-driven access (collaboration tools)\n\n\nMAC\nLow\nVery High\nGovernment & banking",
    "crumbs": [
      "Blog",
      "Django",
      "Permission Types"
    ]
  },
  {
    "objectID": "Django/2_permission _types.html#final-thoughts",
    "href": "Django/2_permission _types.html#final-thoughts",
    "title": "Permission Types",
    "section": "üöÄ Final Thoughts",
    "text": "üöÄ Final Thoughts\nüîπ For simple SaaS apps ‚Üí Use RBAC (with predefined roles).\nüîπ For dynamic, scalable access ‚Üí Use ABAC or PBAC.\nüîπ For multi-tenant SaaS ‚Üí Implement row-level security & per-tenant roles.\nüîπ For enterprise security ‚Üí Use OAuth, SAML, and centralized IdPs.",
    "crumbs": [
      "Blog",
      "Django",
      "Permission Types"
    ]
  },
  {
    "objectID": "Django/views.html",
    "href": "Django/views.html",
    "title": "Views",
    "section": "",
    "text": "Simple functions that take a request and return a response.\nUse decorators like @api_view to specify allowed methods (GET, POST, etc.).\n\nfrom rest_framework.decorators import api_view\nfrom rest_framework.response import Response\n\n@api_view(['GET', 'POST'])\ndef my_view(request):\n    if request.method == 'GET':\n        data = {\"message\": \"Hello, world!\"}\n        return Response(data)\n    elif request.method == 'POST':\n        data = request.data\n        return Response(data)\n\n\n\n\nInherit from Django‚Äôs View or DRF‚Äôs APIView.\nProvide more structure and functionality.\n\nfrom rest_framework.views import APIView\nfrom rest_framework.response import Response\n\nclass MyView(APIView):\n    def get(self, request):\n        data = {\"message\": \"Hello, world!\"}\n        return Response(data)\n\n    def post(self, request):\n        data = request.data\n        return Response(data)",
    "crumbs": [
      "Blog",
      "Django",
      "Views"
    ]
  },
  {
    "objectID": "Django/views.html#types-of-views-in-django",
    "href": "Django/views.html#types-of-views-in-django",
    "title": "Views",
    "section": "",
    "text": "Simple functions that take a request and return a response.\nUse decorators like @api_view to specify allowed methods (GET, POST, etc.).\n\nfrom rest_framework.decorators import api_view\nfrom rest_framework.response import Response\n\n@api_view(['GET', 'POST'])\ndef my_view(request):\n    if request.method == 'GET':\n        data = {\"message\": \"Hello, world!\"}\n        return Response(data)\n    elif request.method == 'POST':\n        data = request.data\n        return Response(data)\n\n\n\n\nInherit from Django‚Äôs View or DRF‚Äôs APIView.\nProvide more structure and functionality.\n\nfrom rest_framework.views import APIView\nfrom rest_framework.response import Response\n\nclass MyView(APIView):\n    def get(self, request):\n        data = {\"message\": \"Hello, world!\"}\n        return Response(data)\n\n    def post(self, request):\n        data = request.data\n        return Response(data)",
    "crumbs": [
      "Blog",
      "Django",
      "Views"
    ]
  },
  {
    "objectID": "Django/views.html#built-in-generic-views",
    "href": "Django/views.html#built-in-generic-views",
    "title": "Views",
    "section": "Built-in Generic Views",
    "text": "Built-in Generic Views\nDjango provides a set of built-in generic views that handle common patterns. Examples include: - ListView: Display a list of objects. - DetailView: Display a single object. - CreateView: Display a form for creating a new object. - UpdateView: Display a form for updating an existing object. - DeleteView: Display a confirmation page for deleting an object.\n\nGeneric Views\n\nSimplify common patterns (CRUD operations) by providing pre-built classes.\nExample: ListAPIView, CreateAPIView, RetrieveAPIView, UpdateAPIView, DestroyAPIView\n\nfrom rest_framework.generics import ListCreateAPIView\nfrom .models import MyModel\nfrom .serializers import MyModelSerializer\n\nclass MyModelListCreateView(ListCreateAPIView):\n    queryset = MyModel.objects.all()\n    serializer_class = MyModelSerializer",
    "crumbs": [
      "Blog",
      "Django",
      "Views"
    ]
  },
  {
    "objectID": "Django/views.html#viewsets",
    "href": "Django/views.html#viewsets",
    "title": "Views",
    "section": "ViewSets",
    "text": "ViewSets\n\nCombine logic for multiple views in a single class.\nAutomatically create URLs for CRUD operations using a Router.\n\nfrom rest_framework import viewsets\nfrom .models import MyModel\nfrom .serializers import MyModelSerializer\n\nclass MyModelViewSet(viewsets.ModelViewSet):\n    queryset = MyModel.objects.all()\n    serializer_class = MyModelSerializer\n\nCommon Actions in Viewsets\nViewsets provide a variety of standard actions:\n\nlist: Retrieves a collection of objects.\nGET /products/\nretrieve: Retrieves a single object based on its primary key.\nGET /products/{id}/\ncreate: Creates a new object.\nPOST /products/\nupdate: Updates an existing object (entire object).\nPUT /products/{id}/\npartial_update: Partially updates an object (only changes specific fields).\nPATCH /products/{id}/\ndestroy: Deletes an object.\nDELETE /products/{id}/\n\n\n\nRouting for Viewsets\nInstead of manually defining URLs, DRF provides routers that automatically map viewsets to URL patterns.\n\nStep 1: Use DefaultRouter to Automate URL Routing\nfrom rest_framework.routers import DefaultRouter\nfrom .views import ProductViewSet\n\nrouter = DefaultRouter()\nrouter.register(r'products', ProductViewSet, basename='product')\n\nurlpatterns = router.urls\n\n\nResulting Routes:\n\nGET /products/ ‚Üí list\nGET /products/{id}/ ‚Üí retrieve\nPOST /products/ ‚Üí create\nPUT /products/{id}/ ‚Üí update\nPATCH /products/{id}/ ‚Üí partial_update\nDELETE /products/{id}/ ‚Üí destroy\n\nCustomizing URL Paths: If you need to override or customize the URLs, you can use SimpleRouter or register with custom prefixes or basenames.\n\n\n\n\nCustom Actions in Viewsets\nViewsets allow you to define custom actions that aren‚Äôt covered by the default CRUD operations using the @action decorator.\n\nExample of Custom Action:\nfrom rest_framework.decorators import action\nfrom rest_framework.response import Response\nfrom rest_framework import viewsets\n\nclass ProductViewSet(viewsets.ModelViewSet):\n    queryset = Product.objects.all()\n    serializer_class = ProductSerializer\n\n    # Custom action that returns products on sale\n    @action(detail=False, methods=['get'])\n    def on_sale(self, request):\n        products_on_sale = self.queryset.filter(on_sale=True)\n        serializer = self.get_serializer(products_on_sale, many=True)\n        return Response(serializer.data)\nKey Features of @action: - detail=False: Means this is a collection-level action (works on the entire queryset, e.g., GET /products/on_sale/). - detail=True: For object-level actions (works on a single object, e.g., GET /products/{id}/related/).\nYou can also specify the HTTP methods allowed for the action (e.g., methods=['post'] for a POST request).\n\n\n\n\nMixins in Viewsets\n\nMixins provide reusable behavior for viewsets, allowing you to include only the actions you need.\n\n\nCommon Mixins:\n\nListModelMixin: Adds the list() action (returns a collection of objects).\nCreateModelMixin: Adds the create() action.\nRetrieveModelMixin: Adds the retrieve() action (retrieves a single object).\nUpdateModelMixin: Adds the update() action (updates a single object).\nDestroyModelMixin: Adds the destroy() action (deletes a single object).\n\n\n\nExample Using Mixins:\nfrom rest_framework import viewsets, mixins\nfrom .models import Product\nfrom .serializers import ProductSerializer\n\nclass ProductViewSet(mixins.ListModelMixin,\n                     mixins.RetrieveModelMixin,\n                     viewsets.GenericViewSet):\n    queryset = Product.objects.all()\n    serializer_class = ProductSerializer\nIn this example: - Only list and retrieve actions are available. - You can mix and match to implement only the behaviors needed for your viewset.\n\n\nYou can combine mixins with GenericAPIView for custom behavior:\n\nfrom rest_framework import mixins, generics\nfrom .models import MyModel\nfrom .serializers import MyModelSerializer\n\nclass MyModelView(mixins.ListModelMixin, mixins.CreateModelMixin, generics.GenericAPIView):\n    queryset = MyModel.objects.all()\n    serializer_class = MyModelSerializer\n\n    def get(self, request, *args, **kwargs):\n        return self.list(request, *args, **kwargs)\n\n    def post(self, request, *args, **kwargs):\n        return self.create(request, *args, **kwargs)",
    "crumbs": [
      "Blog",
      "Django",
      "Views"
    ]
  },
  {
    "objectID": "Django/views.html#url-routing",
    "href": "Django/views.html#url-routing",
    "title": "Views",
    "section": "URL Routing",
    "text": "URL Routing\nDRF‚Äôs routers automatically generate URL patterns for ViewSets. Common routers include:\n\nSimpleRouter: Basic router for CRUD operations.\nDefaultRouter: Extends SimpleRouter with additional functionality like a default API root view.\n\nfrom rest_framework.routers import DefaultRouter\nfrom .views import MyModelViewSet\n\nrouter = DefaultRouter()\nrouter.register(r'mymodel', MyModelViewSet)\n\nurlpatterns = [\n    path('', include(router.urls)),\n]",
    "crumbs": [
      "Blog",
      "Django",
      "Views"
    ]
  },
  {
    "objectID": "Django/views.html#customizing-views",
    "href": "Django/views.html#customizing-views",
    "title": "Views",
    "section": "Customizing Views",
    "text": "Customizing Views\n\nPermissions\n\nControl access to views.\nUse permission_classes attribute or override get_permissions method.\n\nfrom rest_framework.permissions import IsAuthenticated\n\nclass MyView(APIView):\n    permission_classes = [IsAuthenticated]\n\n    def get(self, request):\n        data = {\"message\": \"Hello, authenticated user!\"}\n        return Response(data)\n\n\nThrottling\n\nLimit the rate of requests.\nUse throttle_classes attribute or override get_throttles method.\n\nfrom rest_framework.throttling import UserRateThrottle\n\nclass MyView(APIView):\n    throttle_classes = [UserRateThrottle]\n\n    def get(self, request):\n        data = {\"message\": \"Hello, throttled user!\"}\n        return Response(data)\n\n\nFiltering, Searching, and Ordering\n\nUse DjangoFilterBackend, SearchFilter, and OrderingFilter for filtering, searching, and ordering querysets.\n\nfrom rest_framework import filters\nfrom django_filters.rest_framework import DjangoFilterBackend\n\nclass MyModelListCreateView(ListCreateAPIView):\n    queryset = MyModel.objects.all()\n    serializer_class = MyModelSerializer\n    filter_backends = [DjangoFilterBackend, filters.SearchFilter, filters.OrderingFilter]\n    filterset_fields = ['field1', 'field2']\n    search_fields = ['field1', 'field2']\n    ordering_fields = ['field1', 'field2']",
    "crumbs": [
      "Blog",
      "Django",
      "Views"
    ]
  },
  {
    "objectID": "Django/pdf.html",
    "href": "Django/pdf.html",
    "title": "PDF Generation",
    "section": "",
    "text": "Before using WeasyPrint, install it using pip:\npip install weasyprint\nWeasyPrint has some system dependencies. If you face installation issues, install the required system packages:\nFor Ubuntu/Debian:\nsudo apt install libpango-1.0-0 libpangocairo-1.0-0 libcairo2 libffi-dev\nFor MacOS:\nbrew install pango cairo gdk-pixbuf\nFor Windows: - Install GTK+ from WeasyPrint‚Äôs documentation.\n\n\n\n\nWe will create a class-based view (WeasyTemplateResponseMixin) to render a Django template into a PDF.\n\n\n# views.py\nfrom django.http import HttpResponse\nfrom django.template.loader import get_template\nfrom weasyprint import HTML\nimport tempfile\n\ndef generate_pdf(request):\n    \"\"\"\n    Generate a simple PDF from an HTML template.\n    \"\"\"\n    template = get_template(\"pdf_template.html\")\n    context = {\"title\": \"My PDF Report\", \"content\": \"This is a dynamically generated PDF.\"}\n    html_content = template.render(context)\n\n    # Create a temporary file\n    with tempfile.NamedTemporaryFile(delete=True) as temp_file:\n        HTML(string=html_content).write_pdf(temp_file.name)\n        temp_file.seek(0)\n        pdf_data = temp_file.read()\n\n    response = HttpResponse(pdf_data, content_type=\"application/pdf\")\n    response[\"Content-Disposition\"] = 'inline; filename=\"report.pdf\"'\n    return response\n\n\n\n\n\nWeasyPrint renders HTML and CSS, so we need to define a well-structured HTML template.\n\n\n&lt;!DOCTYPE html&gt;\n&lt;html lang=\"en\"&gt;\n&lt;head&gt;\n    &lt;meta charset=\"UTF-8\"&gt;\n    &lt;title&gt;{{ title }}&lt;/title&gt;\n    &lt;style&gt;\n        body {\n            font-family: Arial, sans-serif;\n            margin: 20px;\n        }\n        h1 {\n            color: #333;\n        }\n        .content {\n            margin-top: 20px;\n        }\n    &lt;/style&gt;\n&lt;/head&gt;\n&lt;body&gt;\n    &lt;h1&gt;{{ title }}&lt;/h1&gt;\n    &lt;div class=\"content\"&gt;\n        &lt;p&gt;{{ content }}&lt;/p&gt;\n    &lt;/div&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n\n\n\n\n\nMap the PDF generation view in urls.py:\n# urls.py\nfrom django.urls import path\nfrom .views import generate_pdf\n\nurlpatterns = [\n    path(\"generate-pdf/\", generate_pdf, name=\"generate_pdf\"),\n]\nNow, visiting /generate-pdf/ will return a dynamically generated PDF.",
    "crumbs": [
      "Blog",
      "Django",
      "PDF Generation"
    ]
  },
  {
    "objectID": "Django/pdf.html#step-by-step-guide-to-using-weasyprint-in-django",
    "href": "Django/pdf.html#step-by-step-guide-to-using-weasyprint-in-django",
    "title": "PDF Generation",
    "section": "",
    "text": "Before using WeasyPrint, install it using pip:\npip install weasyprint\nWeasyPrint has some system dependencies. If you face installation issues, install the required system packages:\nFor Ubuntu/Debian:\nsudo apt install libpango-1.0-0 libpangocairo-1.0-0 libcairo2 libffi-dev\nFor MacOS:\nbrew install pango cairo gdk-pixbuf\nFor Windows: - Install GTK+ from WeasyPrint‚Äôs documentation.\n\n\n\n\nWe will create a class-based view (WeasyTemplateResponseMixin) to render a Django template into a PDF.\n\n\n# views.py\nfrom django.http import HttpResponse\nfrom django.template.loader import get_template\nfrom weasyprint import HTML\nimport tempfile\n\ndef generate_pdf(request):\n    \"\"\"\n    Generate a simple PDF from an HTML template.\n    \"\"\"\n    template = get_template(\"pdf_template.html\")\n    context = {\"title\": \"My PDF Report\", \"content\": \"This is a dynamically generated PDF.\"}\n    html_content = template.render(context)\n\n    # Create a temporary file\n    with tempfile.NamedTemporaryFile(delete=True) as temp_file:\n        HTML(string=html_content).write_pdf(temp_file.name)\n        temp_file.seek(0)\n        pdf_data = temp_file.read()\n\n    response = HttpResponse(pdf_data, content_type=\"application/pdf\")\n    response[\"Content-Disposition\"] = 'inline; filename=\"report.pdf\"'\n    return response\n\n\n\n\n\nWeasyPrint renders HTML and CSS, so we need to define a well-structured HTML template.\n\n\n&lt;!DOCTYPE html&gt;\n&lt;html lang=\"en\"&gt;\n&lt;head&gt;\n    &lt;meta charset=\"UTF-8\"&gt;\n    &lt;title&gt;{{ title }}&lt;/title&gt;\n    &lt;style&gt;\n        body {\n            font-family: Arial, sans-serif;\n            margin: 20px;\n        }\n        h1 {\n            color: #333;\n        }\n        .content {\n            margin-top: 20px;\n        }\n    &lt;/style&gt;\n&lt;/head&gt;\n&lt;body&gt;\n    &lt;h1&gt;{{ title }}&lt;/h1&gt;\n    &lt;div class=\"content\"&gt;\n        &lt;p&gt;{{ content }}&lt;/p&gt;\n    &lt;/div&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n\n\n\n\n\nMap the PDF generation view in urls.py:\n# urls.py\nfrom django.urls import path\nfrom .views import generate_pdf\n\nurlpatterns = [\n    path(\"generate-pdf/\", generate_pdf, name=\"generate_pdf\"),\n]\nNow, visiting /generate-pdf/ will return a dynamically generated PDF.",
    "crumbs": [
      "Blog",
      "Django",
      "PDF Generation"
    ]
  },
  {
    "objectID": "Django/pdf.html#advanced-weasyprint-usage",
    "href": "Django/pdf.html#advanced-weasyprint-usage",
    "title": "PDF Generation",
    "section": "üñãÔ∏è Advanced WeasyPrint Usage",
    "text": "üñãÔ∏è Advanced WeasyPrint Usage\n\n1Ô∏è‚É£ Generating PDFs with Django Querysets\nYou can pass database query results into the PDF template.\n\nüìå Example: Generating a PDF Invoice\n# views.py\nfrom django.http import HttpResponse\nfrom django.template.loader import render_to_string\nfrom weasyprint import HTML\nfrom .models import Order\n\ndef generate_invoice(request, order_id):\n    \"\"\"\n    Generate an invoice PDF for a specific order.\n    \"\"\"\n    order = Order.objects.get(id=order_id)\n    context = {\"order\": order}\n    html_string = render_to_string(\"invoice_template.html\", context)\n\n    pdf_file = HTML(string=html_string).write_pdf()\n    response = HttpResponse(pdf_file, content_type=\"application/pdf\")\n    response[\"Content-Disposition\"] = f'filename=\"invoice_{order.id}.pdf\"'\n    return response\n\n\nüìå Example: invoice_template.html\n&lt;!DOCTYPE html&gt;\n&lt;html lang=\"en\"&gt;\n&lt;head&gt;\n    &lt;meta charset=\"UTF-8\"&gt;\n    &lt;title&gt;Invoice&lt;/title&gt;\n    &lt;style&gt;\n        body {\n            font-family: Arial, sans-serif;\n            padding: 20px;\n        }\n        h1 {\n            color: #333;\n            border-bottom: 2px solid #000;\n            padding-bottom: 10px;\n        }\n        table {\n            width: 100%;\n            border-collapse: collapse;\n            margin-top: 20px;\n        }\n        th, td {\n            border: 1px solid #ddd;\n            padding: 10px;\n            text-align: left;\n        }\n        .total {\n            font-weight: bold;\n            font-size: 1.2em;\n        }\n    &lt;/style&gt;\n&lt;/head&gt;\n&lt;body&gt;\n    &lt;h1&gt;Invoice for Order #{{ order.id }}&lt;/h1&gt;\n    &lt;p&gt;Customer: {{ order.customer_name }}&lt;/p&gt;\n    &lt;p&gt;Date: {{ order.date }}&lt;/p&gt;\n\n    &lt;table&gt;\n        &lt;thead&gt;\n            &lt;tr&gt;\n                &lt;th&gt;Product&lt;/th&gt;\n                &lt;th&gt;Quantity&lt;/th&gt;\n                &lt;th&gt;Price&lt;/th&gt;\n            &lt;/tr&gt;\n        &lt;/thead&gt;\n        &lt;tbody&gt;\n            {% for item in order.items.all %}\n            &lt;tr&gt;\n                &lt;td&gt;{{ item.product_name }}&lt;/td&gt;\n                &lt;td&gt;{{ item.quantity }}&lt;/td&gt;\n                &lt;td&gt;${{ item.price }}&lt;/td&gt;\n            &lt;/tr&gt;\n            {% endfor %}\n        &lt;/tbody&gt;\n    &lt;/table&gt;\n\n    &lt;p class=\"total\"&gt;Total Amount: ${{ order.total_price }}&lt;/p&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n\n\n\n\n2Ô∏è‚É£ Saving PDFs to Django Models\nYou can store generated PDFs as files inside a Django model.\n\nüìå Example: Save Invoice as a File\nfrom django.core.files.base import ContentFile\nfrom weasyprint import HTML\nfrom .models import Order\n\ndef save_invoice_pdf(order_id):\n    \"\"\"\n    Generate and save a PDF invoice to a model field.\n    \"\"\"\n    order = Order.objects.get(id=order_id)\n    html_string = render_to_string(\"invoice_template.html\", {\"order\": order})\n    \n    pdf_file = HTML(string=html_string).write_pdf()\n    \n    # Save to model\n    order.invoice.save(f\"invoice_{order.id}.pdf\", ContentFile(pdf_file), save=True)\n\n\nüìå Update Order Model\nfrom django.db import models\n\nclass Order(models.Model):\n    customer_name = models.CharField(max_length=100)\n    date = models.DateField(auto_now_add=True)\n    total_price = models.DecimalField(max_digits=10, decimal_places=2)\n    invoice = models.FileField(upload_to=\"invoices/\", blank=True, null=True)  # Store PDF",
    "crumbs": [
      "Blog",
      "Django",
      "PDF Generation"
    ]
  },
  {
    "objectID": "Django/pdf.html#styling-pdfs-with-css",
    "href": "Django/pdf.html#styling-pdfs-with-css",
    "title": "PDF Generation",
    "section": "üé® Styling PDFs with CSS",
    "text": "üé® Styling PDFs with CSS\nWeasyPrint fully supports CSS, including: ‚úÖ Fonts\n‚úÖ Page Breaks\n‚úÖ Headers & Footers\n‚úÖ Images\n\nüìå Example: Adding Page Breaks\n@page {\n    size: A4;\n    margin: 20mm;\n}\n.page-break {\n    page-break-before: always;\n}\n\n\nüìå Usage in HTML\n&lt;p&gt;Page 1 content&lt;/p&gt;\n&lt;div class=\"page-break\"&gt;&lt;/div&gt;\n&lt;p&gt;Page 2 content&lt;/p&gt;",
    "crumbs": [
      "Blog",
      "Django",
      "PDF Generation"
    ]
  },
  {
    "objectID": "Django/pdf.html#common-weasyprint-issues-fixes",
    "href": "Django/pdf.html#common-weasyprint-issues-fixes",
    "title": "PDF Generation",
    "section": "üìå Common WeasyPrint Issues & Fixes",
    "text": "üìå Common WeasyPrint Issues & Fixes\n\n\n\n\n\n\n\nIssue\nSolution\n\n\n\n\nno such file or directory: cairo\nInstall dependencies: sudo apt install libcairo2\n\n\nNo module named weasyprint\nRun pip install weasyprint\n\n\nFonts not loading\nUse absolute file paths for fonts (file:// URLs)",
    "crumbs": [
      "Blog",
      "Django",
      "PDF Generation"
    ]
  },
  {
    "objectID": "Django/pdf.html#summary-key-takeaways",
    "href": "Django/pdf.html#summary-key-takeaways",
    "title": "PDF Generation",
    "section": "‚úÖ Summary: Key Takeaways",
    "text": "‚úÖ Summary: Key Takeaways\n\n\n\nFeature\nDjango Implementation\n\n\n\n\n‚úÖ Generate PDFs\nHTML(string).write_pdf()\n\n\n‚úÖ Use Templates\nrender_to_string(\"template.html\", context)\n\n\n‚úÖ Save PDFs to Models\norder.invoice.save(...)\n\n\n‚úÖ Style with CSS\nFull CSS support, including @page\n\n\n\nüöÄ Now you can generate beautifully styled PDFs in Django using WeasyPrint! üöÄ",
    "crumbs": [
      "Blog",
      "Django",
      "PDF Generation"
    ]
  },
  {
    "objectID": "Django/django_templates.html",
    "href": "Django/django_templates.html",
    "title": "Django Templates",
    "section": "",
    "text": "The most popular full-stack starter.\n\nRepo: cookiecutter/cookiecutter-django\nFeatures:\n\nDocker-ready\nASGI/WSGI support\nDjango Channels\nCelery + Redis\nPostgreSQL\nWhitenoise\nGunicorn/Uvicorn\nCaddy/Nginx optional\nProduction scripts + Terraform support\n\n\n‚öôÔ∏è Use:\npip install cookiecutter\ncookiecutter https://github.com/cookiecutter/cookiecutter-django",
    "crumbs": [
      "Blog",
      "Django",
      "Django Templates"
    ]
  },
  {
    "objectID": "Django/django_templates.html#django-cookiecutter",
    "href": "Django/django_templates.html#django-cookiecutter",
    "title": "Django Templates",
    "section": "",
    "text": "The most popular full-stack starter.\n\nRepo: cookiecutter/cookiecutter-django\nFeatures:\n\nDocker-ready\nASGI/WSGI support\nDjango Channels\nCelery + Redis\nPostgreSQL\nWhitenoise\nGunicorn/Uvicorn\nCaddy/Nginx optional\nProduction scripts + Terraform support\n\n\n‚öôÔ∏è Use:\npip install cookiecutter\ncookiecutter https://github.com/cookiecutter/cookiecutter-django",
    "crumbs": [
      "Blog",
      "Django",
      "Django Templates"
    ]
  },
  {
    "objectID": "Django/django_templates.html#django-reactvue-starter-kits",
    "href": "Django/django_templates.html#django-reactvue-starter-kits",
    "title": "Django Templates",
    "section": "‚ö° 3. Django React/Vue Starter Kits",
    "text": "‚ö° 3. Django React/Vue Starter Kits\n\nüß© Django + React\n\nRepo: justdjango/django-react-boilerplate\nFeatures:\n\nWebpack + React frontend\nJWT Auth\nDRF backend\n\n\n\n\nüîß Django + Vue\n\nRepo: gtalarico/django-vue-template\nFeatures:\n\nWebpack + Vue\nDRF backend\nHot-reloading\nSPA friendly",
    "crumbs": [
      "Blog",
      "Django",
      "Django Templates"
    ]
  },
  {
    "objectID": "Django/django_templates.html#django-saas-boilerplates",
    "href": "Django/django_templates.html#django-saas-boilerplates",
    "title": "Django Templates",
    "section": "üöÄ 4. Django SaaS Boilerplates",
    "text": "üöÄ 4. Django SaaS Boilerplates\n\nüß† saasitive/django-saas-boilerplate\n\nStripe subscriptions\nTeams\nInvitations\nDocker\nTailwind + HTMX\n\n\n\nüíº vintasoftware/django-react-boilerplate\n\nCelery\nStripe\ni18n\nFull test coverage",
    "crumbs": [
      "Blog",
      "Django",
      "Django Templates"
    ]
  },
  {
    "objectID": "Django/django_templates.html#for-testing-or-teaching",
    "href": "Django/django_templates.html#for-testing-or-teaching",
    "title": "Django Templates",
    "section": "üß™ 5. For Testing or Teaching",
    "text": "üß™ 5. For Testing or Teaching\n\ndjango-startproject\nDjangoX by W.S. Vincent: for educational purposes, includes login/logout/register templates.",
    "crumbs": [
      "Blog",
      "Django",
      "Django Templates"
    ]
  },
  {
    "objectID": "Django/django_templates.html#comparison-table",
    "href": "Django/django_templates.html#comparison-table",
    "title": "Django Templates",
    "section": "‚úÖ Comparison Table",
    "text": "‚úÖ Comparison Table\n\n\n\n\n\n\n\n\n\n\n\n\nTemplate\nFrontend\nDocker\nAsync\nCelery\nDB\nIdeal For\n\n\n\n\ncookiecutter-django\nOptional\n‚úÖ\n‚úÖ\n‚úÖ\nPostgres\nFull Production Apps\n\n\ndjango-starter (Vincent)\n‚ùå\n‚ùå\n‚ùå\n‚ùå\nSQLite\nMinimal Setup\n\n\ndjango-react-boilerplate\nReact\n‚úÖ\n‚úÖ\n‚úÖ\nPostgres\nSPAs\n\n\nsaasitive django boilerplate\nHTMX\n‚úÖ\n‚úÖ\n‚úÖ\nPostgres\nSaaS Projects\n\n\ndjango-vue-template\nVue\n‚úÖ\n‚úÖ\n‚ùå\nSQLite\nSPAs",
    "crumbs": [
      "Blog",
      "Django",
      "Django Templates"
    ]
  },
  {
    "objectID": "Django/import_export.html",
    "href": "Django/import_export.html",
    "title": "Import Export",
    "section": "",
    "text": "Supports Multiple Formats:\n\nFile formats: CSV, Excel (XLSX), JSON, YAML, etc.\nCustom formats can also be implemented.\n\nSeamless Integration with Django Admin:\n\nImport and export directly from the Django admin interface.\nButtons are added to the change list page for importing and exporting data.\n\nCustomizable Import/Export Logic:\n\nAllows you to customize how data is imported/exported by overriding specific methods.\nSupports pre-processing and post-processing of data.\n\nError Handling:\n\nDetailed error reports are provided for failed imports, allowing you to identify problematic rows.\n\nQueryset Exports:\n\nExport only specific rows or data subsets using querysets.",
    "crumbs": [
      "Blog",
      "Django",
      "Import Export"
    ]
  },
  {
    "objectID": "Django/import_export.html#key-features",
    "href": "Django/import_export.html#key-features",
    "title": "Import Export",
    "section": "",
    "text": "Supports Multiple Formats:\n\nFile formats: CSV, Excel (XLSX), JSON, YAML, etc.\nCustom formats can also be implemented.\n\nSeamless Integration with Django Admin:\n\nImport and export directly from the Django admin interface.\nButtons are added to the change list page for importing and exporting data.\n\nCustomizable Import/Export Logic:\n\nAllows you to customize how data is imported/exported by overriding specific methods.\nSupports pre-processing and post-processing of data.\n\nError Handling:\n\nDetailed error reports are provided for failed imports, allowing you to identify problematic rows.\n\nQueryset Exports:\n\nExport only specific rows or data subsets using querysets.",
    "crumbs": [
      "Blog",
      "Django",
      "Import Export"
    ]
  },
  {
    "objectID": "Django/import_export.html#installation",
    "href": "Django/import_export.html#installation",
    "title": "Import Export",
    "section": "Installation",
    "text": "Installation\n\nInstall the package:\npip install django-import-export\nAdd it to your INSTALLED_APPS in settings.py:\nINSTALLED_APPS = [\n    ...,\n    'import_export',\n]\nAdd the ImportExportModelAdmin to your admin classes.",
    "crumbs": [
      "Blog",
      "Django",
      "Import Export"
    ]
  },
  {
    "objectID": "Django/import_export.html#basic-usage",
    "href": "Django/import_export.html#basic-usage",
    "title": "Import Export",
    "section": "Basic Usage",
    "text": "Basic Usage\n\n1. Add to Django Admin\nImport ImportExportModelAdmin and apply it to your model admin:\nfrom import_export.admin import ImportExportModelAdmin\nfrom django.contrib import admin\nfrom .models import MyModel\n\n@admin.register(MyModel)\nclass MyModelAdmin(ImportExportModelAdmin):\n    pass\nThis will automatically add Import and Export buttons in the Django admin.\n\n\n\n2. Use Resources for Custom Import/Export Behavior\nA Resource class lets you define the fields and logic for import/export. For example:\n\nCreate a resources.py file:\nfrom import_export import resources\nfrom .models import MyModel\n\nclass MyModelResource(resources.ModelResource):\n    class Meta:\n        model = MyModel\n        fields = ('id', 'name', 'email')  # Specify fields to include\n        export_order = ('id', 'name', 'email')  # Order of fields\n\n\nAttach the Resource to the Admin:\nfrom import_export.admin import ImportExportModelAdmin\nfrom .models import MyModel\nfrom .resources import MyModelResource\n\n@admin.register(MyModel)\nclass MyModelAdmin(ImportExportModelAdmin):\n    resource_class = MyModelResource\n\n\n\n\n3. Import and Export in Django Admin\n\nImport: Upload a file (CSV, XLSX, etc.) to create or update records.\nExport: Download the data from the database in the selected format.",
    "crumbs": [
      "Blog",
      "Django",
      "Import Export"
    ]
  },
  {
    "objectID": "Django/import_export.html#file-format-support",
    "href": "Django/import_export.html#file-format-support",
    "title": "Import Export",
    "section": "File Format Support",
    "text": "File Format Support\nBy default, Django Import-Export supports: - CSV - JSON - Excel (XLSX) (requires openpyxl or xlwt) - YAML - Others (depending on installed libraries).\nInstall additional libraries for specific formats:\n\nExcel Support: bash  pip install openpyxl",
    "crumbs": [
      "Blog",
      "Django",
      "Import Export"
    ]
  },
  {
    "objectID": "Django/import_export.html#customizing-importexport",
    "href": "Django/import_export.html#customizing-importexport",
    "title": "Import Export",
    "section": "Customizing Import/Export",
    "text": "Customizing Import/Export\n\nCustomizing Fields\nExclude or include specific fields using the fields or exclude options in the Resource class:\nclass MyModelResource(resources.ModelResource):\n    class Meta:\n        model = MyModel\n        exclude = ('password', 'last_login')  # Exclude sensitive fields\n\n\nCustom Import Logic\nYou can override the before_import, after_import, or import_row methods for custom behavior.\n\nExample: Validate Data Before Import\nclass MyModelResource(resources.ModelResource):\n    def before_import_row(self, row, **kwargs):\n        if not row['email']:\n            raise ValueError(\"Email is required.\")\n\n\n\n\nCustom Export Logic\nYou can override the export_queryset method to export specific subsets of data.\n\nExample: Export Only Active Users\nclass MyModelResource(resources.ModelResource):\n    def export_queryset(self, queryset, *args, **kwargs):\n        return queryset.filter(is_active=True)",
    "crumbs": [
      "Blog",
      "Django",
      "Import Export"
    ]
  },
  {
    "objectID": "Django/import_export.html#advanced-features",
    "href": "Django/import_export.html#advanced-features",
    "title": "Import Export",
    "section": "Advanced Features",
    "text": "Advanced Features\n\n1. Import/Export Specific Columns\nCustomize the order of fields or include derived fields:\nclass MyModelResource(resources.ModelResource):\n    full_name = fields.Field()\n\n    def dehydrate_full_name(self, obj):\n        return f\"{obj.first_name} {obj.last_name}\"\n\n    class Meta:\n        model = MyModel\n        fields = ('id', 'email', 'full_name')  # Include custom fields\n\n\n2. Skip Rows with Errors\nHandle errors gracefully without stopping the import:\nclass MyModelResource(resources.ModelResource):\n    def import_row(self, row, instance_loader, **kwargs):\n        try:\n            return super().import_row(row, instance_loader, **kwargs)\n        except Exception as e:\n            print(f\"Error importing row {row}: {e}\")\n            return None\n\n\n\n3. Handling Relationships\nImport/export related fields (e.g., ForeignKey, ManyToMany) by using custom logic.\n\nExample: Import Foreign Keys\nclass MyModelResource(resources.ModelResource):\n    related_field = fields.Field(attribute='related_field', column_name='Related Field')\n\n    def before_import_row(self, row, **kwargs):\n        # Ensure the related object exists\n        row['related_field'] = RelatedModel.objects.get_or_create(name=row['related_field'])[0].id\n\n    class Meta:\n        model = MyModel\n\n\n\n\n4. Export Querysets in Views\nUse Django Import-Export to export querysets in views programmatically:\nfrom django.http import HttpResponse\nfrom .resources import MyModelResource\n\ndef export_data(request):\n    resource = MyModelResource()\n    dataset = resource.export()\n    response = HttpResponse(dataset.csv, content_type=\"text/csv\")\n    response['Content-Disposition'] = 'attachment; filename=\"export.csv\"'\n    return response",
    "crumbs": [
      "Blog",
      "Django",
      "Import Export"
    ]
  },
  {
    "objectID": "Django/import_export.html#error-reporting",
    "href": "Django/import_export.html#error-reporting",
    "title": "Import Export",
    "section": "Error Reporting",
    "text": "Error Reporting\n\nCommon Errors\n\nField Does Not Exist: Ensure the fields listed in fields or export_order match the model fields.\nInvalid File Format: Make sure the file format matches the library used for import/export.\nForeign Key Issues: Ensure related objects exist before importing data.",
    "crumbs": [
      "Blog",
      "Django",
      "Import Export"
    ]
  },
  {
    "objectID": "Django/import_export.html#best-practices",
    "href": "Django/import_export.html#best-practices",
    "title": "Import Export",
    "section": "Best Practices",
    "text": "Best Practices\n\nValidate Data Before Import: Use the before_import_row or clean method in the model to ensure valid data.\nRestrict Admin Access: Only allow staff or superusers to use the import/export functionality.\nBack Up Data: Always back up the database before performing bulk imports or updates.\nTest in Development: Test your import/export process on a development environment before applying to production.\n\n\n\nUse Cases\n\nImporting large datasets (e.g., user data, product catalogs).\nExporting data for analysis or backup.\nProgrammatically updating related models.\nMigrating data between environments or projects.",
    "crumbs": [
      "Blog",
      "Django",
      "Import Export"
    ]
  },
  {
    "objectID": "Django/1_permission_rules.html",
    "href": "Django/1_permission_rules.html",
    "title": "Permission Rules",
    "section": "",
    "text": "1. Installation\nInstall Django Rules via pip:\npip install rules\nAdd rules to your INSTALLED_APPS in settings.py:\nINSTALLED_APPS = [\n    # Other apps...\n    \"rules\",\n]\n\n\n2. Key Concepts\n\nRules: Simple Python functions that return True or False based on whether a condition is met.\nPermissions: Rules tied to specific actions (e.g., add_user, change_post).\nObject-Level Checks: Rules are ideal for checking permissions at the object level (e.g., ‚ÄúCan this user edit this specific object?‚Äù).\n\n\n\n3. Defining Rules\nRules are defined using the rules.add_rule function. You can then reuse these rules across your application.\n\nExample: Define a Rule\nimport rules\n\n# Define a rule to check if the user is the owner of an object\n@rules.predicate\ndef is_owner(user, obj):\n    return obj.owner == user\n\n# Add the rule to the rules registry\nrules.add_rule(\"is_owner\", is_owner)\nYou can also define rules using lambda functions:\nrules.add_rule(\"is_admin\", lambda user: user.is_staff)\n\n\n\n4. Combining Rules\nYou can combine rules using logical operators (|, &, ~).\n# Check if the user is the owner or an admin\nrules.add_rule(\"is_owner_or_admin\", is_owner | rules.is_staff)\n\n# Check if the user is the owner and is active\nrules.add_rule(\"is_owner_and_active\", is_owner & rules.is_active)\n\n# Negate a rule\nrules.add_rule(\"is_not_owner\", ~is_owner)\n\n\n5. Applying Rules\n\nObject-Level Permission Checks\nYou can apply rules directly in your views or methods:\nfrom rules.contrib.views import permission_required\n\n# Example usage in a class-based view\n@permission_required(\"is_owner\", fn=lambda obj: obj)\ndef edit_view(request, obj):\n    # Your view logic here\n    pass\n\n\nView-Level Permission Checks\nApply permissions to views using decorators:\nfrom rules.contrib.views import permission_required\n\n@permission_required(\"is_owner_or_admin\", fn=lambda obj: obj)\ndef edit_post(request, post_id):\n    post = get_object_or_404(Post, id=post_id)\n    return render(request, \"edit_post.html\", {\"post\": post})\n\n\n\n6. Integration with Django‚Äôs Permissions System\nDjango Rules integrates seamlessly with Django‚Äôs built-in permissions system. You can replace or augment the default behavior.\n\nRegistering Custom Permissions\nDefine your custom rules and tie them to permissions:\nrules.add_perm(\"app.change_post\", is_owner | rules.is_staff)\nIn this example: - A user can change a post if they are the owner or a staff member.\n\n\n\n7. Rules in Models\nYou can use rules to enforce permissions at the model level.\n\nExample: Use rules.has_perm in a Model Method\nfrom django.db import models\nimport rules\n\nclass Post(models.Model):\n    title = models.CharField(max_length=100)\n    content = models.TextField()\n    owner = models.ForeignKey('auth.User', on_delete=models.CASCADE)\n\n    def can_edit(self, user):\n        return rules.has_perm('app.change_post', user, self)\n\n\n\n8. Testing Rules\nSince rules are just Python functions, they are straightforward to test.\n\nExample: Testing a Rule\nfrom django.test import TestCase\nfrom myapp.models import Post\nfrom django.contrib.auth.models import User\n\nclass RulesTestCase(TestCase):\n    def setUp(self):\n        self.user = User.objects.create_user(username=\"user1\")\n        self.other_user = User.objects.create_user(username=\"user2\")\n        self.post = Post.objects.create(title=\"Test\", content=\"Content\", owner=self.user)\n\n    def test_is_owner_rule(self):\n        self.assertTrue(is_owner(self.user, self.post))\n        self.assertFalse(is_owner(self.other_user, self.post))\n\n\n\n9. Debugging Rules\nYou can debug rules using Django‚Äôs logging system:\nimport logging\n\nlogger = logging.getLogger(\"django.rules\")\n\nlogger.setLevel(logging.DEBUG)\nThis can help you track when and how rules are evaluated.\n\n\n10. Best Practices\n\nKeep Rules Simple: Rules should be lightweight and focused on specific conditions.\nUse Predicates: Decorate rules with @rules.predicate to make them composable.\nCombine Logically: Use |, &, and ~ to create complex permission rules without redundancy.\nDocument Rules: Clearly define the purpose of each rule for maintainability.\nTest Rules: Test rules independently to ensure they behave as expected.\n\n\n\n11. Comparison with Django‚Äôs Default Permissions\n\n\n\n\n\n\n\n\nFeature\nDjango Permissions\nDjango Rules\n\n\n\n\nPredefined Permissions\nYes\nNo\n\n\nCustom Business Logic\nLimited\nFully Customizable\n\n\nObject-Level Permissions\nRequires third-party libs\nBuilt-in\n\n\nEase of Use\nStraightforward\nLightweight, Flexible\n\n\nCombines Multiple Permissions\nRequires manual logic\nSupported using operators\n\n\n\n\n\n12. Limitations\n\nManual Registration: Rules need to be explicitly registered.\nPerformance: Overuse of complex rules can slow down large-scale applications. Optimize when necessary.\n\n\n\n\n\n Back to top",
    "crumbs": [
      "Blog",
      "Django",
      "Permission Rules"
    ]
  },
  {
    "objectID": "Django/npm_in_django.html",
    "href": "Django/npm_in_django.html",
    "title": "npm in Django",
    "section": "",
    "text": "Dependency Management: Easily install, update, or remove Bootstrap and its dependencies.\nCustom Builds: Customize Bootstrap (e.g., overriding SCSS variables).\nModern Workflow: Use tools like Webpack, Vite, or Gulp for advanced front-end development.\nConsistent Versioning: Lock versions to avoid breaking changes during updates.",
    "crumbs": [
      "Blog",
      "Django",
      "npm in Django"
    ]
  },
  {
    "objectID": "Django/npm_in_django.html#why-use-npm-for-bootstrap-in-django",
    "href": "Django/npm_in_django.html#why-use-npm-for-bootstrap-in-django",
    "title": "npm in Django",
    "section": "",
    "text": "Dependency Management: Easily install, update, or remove Bootstrap and its dependencies.\nCustom Builds: Customize Bootstrap (e.g., overriding SCSS variables).\nModern Workflow: Use tools like Webpack, Vite, or Gulp for advanced front-end development.\nConsistent Versioning: Lock versions to avoid breaking changes during updates.",
    "crumbs": [
      "Blog",
      "Django",
      "npm in Django"
    ]
  },
  {
    "objectID": "Django/npm_in_django.html#prerequisites",
    "href": "Django/npm_in_django.html#prerequisites",
    "title": "npm in Django",
    "section": "2. Prerequisites",
    "text": "2. Prerequisites\n\nDjango Installed: Ensure your Django project is set up.\nNode.js and npm Installed: Verify installation:\nnode -v\nnpm -v\n\nIf not installed:\nsudo apt install npm",
    "crumbs": [
      "Blog",
      "Django",
      "npm in Django"
    ]
  },
  {
    "objectID": "Django/npm_in_django.html#initialize-npm-in-your-django-project",
    "href": "Django/npm_in_django.html#initialize-npm-in-your-django-project",
    "title": "npm in Django",
    "section": "3. Initialize npm in Your Django Project",
    "text": "3. Initialize npm in Your Django Project\nNavigate to your Django project directory (where manage.py is located) and initialize npm:\ncd your-django-project\nnpm init -y\nThis creates a package.json file to manage your project dependencies.",
    "crumbs": [
      "Blog",
      "Django",
      "npm in Django"
    ]
  },
  {
    "objectID": "Django/npm_in_django.html#install-bootstrap-with-npm",
    "href": "Django/npm_in_django.html#install-bootstrap-with-npm",
    "title": "npm in Django",
    "section": "4. Install Bootstrap with npm",
    "text": "4. Install Bootstrap with npm\nInstall Bootstrap and its peer dependencies (like Popper.js for tooltips):\nnpm install bootstrap\nThis adds Bootstrap to your node_modules directory and updates package.json with the Bootstrap dependency.",
    "crumbs": [
      "Blog",
      "Django",
      "npm in Django"
    ]
  },
  {
    "objectID": "Django/npm_in_django.html#add-a-static-directory-in-your-django-project",
    "href": "Django/npm_in_django.html#add-a-static-directory-in-your-django-project",
    "title": "npm in Django",
    "section": "5. Add a static Directory in Your Django Project",
    "text": "5. Add a static Directory in Your Django Project\nSet up a directory for static files if it doesn‚Äôt already exist:\n\nExample Structure:\nyour_project/\n‚îú‚îÄ‚îÄ static/\n‚îÇ   ‚îú‚îÄ‚îÄ js/\n‚îÇ   ‚îú‚îÄ‚îÄ css/\n‚îÇ   ‚îú‚îÄ‚îÄ scss/",
    "crumbs": [
      "Blog",
      "Django",
      "npm in Django"
    ]
  },
  {
    "objectID": "Django/npm_in_django.html#using-bootstrap-files",
    "href": "Django/npm_in_django.html#using-bootstrap-files",
    "title": "npm in Django",
    "section": "6. Using Bootstrap Files",
    "text": "6. Using Bootstrap Files\nBootstrap provides SCSS files for customization.\n\nCopy Bootstrap SCSS files to your static directory:\n\nmkdir -p static/scss\ncp -r node_modules/bootstrap/scss/* static/scss/\n\nInstall a Sass compiler:\n\nnpm install sass\n\nCreate a custom SCSS file (static/scss/custom.scss) to override Bootstrap variables:\n\n\n\n@use \"bootstrap/scss/bootstrap\" with (\n  $primary:       #44b878,\n  $secondary:     #ff4136,\n  $success:       #28a745,\n  $warning:       #ffc107,\n  $danger:        #dc3545,\n  $light:         #f8f9fa,\n  $dark:          #343a40,\n  $font-family-sans-serif: 'Arial', // Customize font\n  $body-bg: #f8f9fa,                // Change body background color\n);\n\n\nCompile the SCSS file into CSS:\n\nnpx sass static/scss/custom.scss static/css/custom.css\n\nInclude the compiled CSS in your template:\n\n{% load static %}\n&lt;link rel=\"stylesheet\" href=\"{% static 'css/custom.css' %}\"&gt;",
    "crumbs": [
      "Blog",
      "Django",
      "npm in Django"
    ]
  },
  {
    "objectID": "Django/npm_in_django.html#automating-with-npm-scripts",
    "href": "Django/npm_in_django.html#automating-with-npm-scripts",
    "title": "npm in Django",
    "section": "7. Automating with npm Scripts",
    "text": "7. Automating with npm Scripts\nTo streamline the SCSS compilation process, add a script to package.json:\n  \"scripts\": {\n    \"build-css\": \"npx sass --load-path=node_modules --quiet-deps frontend/scss/custom.scss frontend/css/custom.css\",\n    \"watch-css\": \"npx sass --watch --load-path=node_modules --quiet-deps frontend/scss/custom.scss:frontend/css/custom.css\"\n  },\nNow, compile SCSS with:\nnpm run build-css",
    "crumbs": [
      "Blog",
      "Django",
      "npm in Django"
    ]
  },
  {
    "objectID": "Django/npm_in_django.html#serving-static-files-in-django",
    "href": "Django/npm_in_django.html#serving-static-files-in-django",
    "title": "npm in Django",
    "section": "8. Serving Static Files in Django",
    "text": "8. Serving Static Files in Django\nEnsure Django is configured to serve static files: 1. Add STATIC_URL and STATICFILES_DIRS to settings.py: python    STATIC_URL = '/static/'    STATICFILES_DIRS = [BASE_DIR / 'static']\n\nDuring development, Django will automatically serve static files. For production, use collectstatic to gather all static files in one directory:\npython manage.py collectstatic",
    "crumbs": [
      "Blog",
      "Django",
      "npm in Django"
    ]
  },
  {
    "objectID": "Django/npm_in_django.html#real-world-example",
    "href": "Django/npm_in_django.html#real-world-example",
    "title": "npm in Django",
    "section": "10. Real-World Example",
    "text": "10. Real-World Example\n\nSCSS Customization:\n\nCreate static/scss/custom.scss:\n$primary: #007bff;\n$secondary: #6c757d;\n@import \"bootstrap\";\nCompile the SCSS:\nnpx sass static/scss/custom.scss static/css/custom.css\nInclude in your Django template:\n{% load static %}\n&lt;link rel=\"stylesheet\" href=\"{% static 'css/custom.css' %}\"&gt;",
    "crumbs": [
      "Blog",
      "Django",
      "npm in Django"
    ]
  },
  {
    "objectID": "Django/npm_in_django.html#debugging-and-maintenance",
    "href": "Django/npm_in_django.html#debugging-and-maintenance",
    "title": "npm in Django",
    "section": "11. Debugging and Maintenance",
    "text": "11. Debugging and Maintenance\n\nUpgrade Dependencies: To update Bootstrap or other dependencies:\nnpm update\nClear npm Cache: If you face issues with npm:\nnpm cache clean --force\nHandle Production Builds: For optimized builds, use:\nnpx sass static/scss/custom.scss static/css/custom.css --style=compressed",
    "crumbs": [
      "Blog",
      "Django",
      "npm in Django"
    ]
  },
  {
    "objectID": "Django/npm_in_django.html#tools-and-alternatives",
    "href": "Django/npm_in_django.html#tools-and-alternatives",
    "title": "npm in Django",
    "section": "12. Tools and Alternatives",
    "text": "12. Tools and Alternatives\n\nParcel or Vite: Alternative to Webpack for bundling.\nDjango-tailwind: For integrating Tailwind CSS with Django.",
    "crumbs": [
      "Blog",
      "Django",
      "npm in Django"
    ]
  },
  {
    "objectID": "Django/django_basics.html",
    "href": "Django/django_basics.html",
    "title": "Django Basics",
    "section": "",
    "text": "Admin site\nObject-relational mapper\nAuthentication\nCaching\n\nHTTP : Hypertext Transfer Protocol",
    "crumbs": [
      "Blog",
      "Django",
      "Django Basics"
    ]
  },
  {
    "objectID": "Django/django_basics.html#features",
    "href": "Django/django_basics.html#features",
    "title": "Django Basics",
    "section": "",
    "text": "Admin site\nObject-relational mapper\nAuthentication\nCaching\n\nHTTP : Hypertext Transfer Protocol",
    "crumbs": [
      "Blog",
      "Django",
      "Django Basics"
    ]
  },
  {
    "objectID": "Django/django_basics.html#installation",
    "href": "Django/django_basics.html#installation",
    "title": "Django Basics",
    "section": "Installation",
    "text": "Installation\npip install django\n\n!pip list | grep django\n\n\nHelp\ndjango-admin\n\n\nCode\n!django-admin\n\n\n\nType 'django-admin help &lt;subcommand&gt;' for help on a specific subcommand.\n\nAvailable subcommands:\n\n[django]\n    check\n    compilemessages\n    createcachetable\n    dbshell\n    diffsettings\n    dumpdata\n    flush\n    inspectdb\n    loaddata\n    makemessages\n    makemigrations\n    migrate\n    optimizemigration\n    runserver\n    sendtestemail\n    shell\n    showmigrations\n    sqlflush\n    sqlmigrate\n    sqlsequencereset\n    squashmigrations\n    startapp\n    startproject\n    test\n    testserver\nNote that only Django core commands are listed as settings are not properly configured (error: Requested setting INSTALLED_APPS, but settings are not configured. You must either define the environment variable DJANGO_SETTINGS_MODULE or call settings.configure() before accessing settings.).",
    "crumbs": [
      "Blog",
      "Django",
      "Django Basics"
    ]
  },
  {
    "objectID": "Django/django_basics.html#create-a-new-project",
    "href": "Django/django_basics.html#create-a-new-project",
    "title": "Django Basics",
    "section": "Create a new project",
    "text": "Create a new project\ndjango-admin startproject &lt;name&gt; &lt;location&gt;\nExample\ndjango-admin startproject test_django\n\n1. Project Structure\nmyproject/\n‚îú‚îÄ‚îÄ manage.py\n‚îî‚îÄ‚îÄ myproject/\n    ‚îú‚îÄ‚îÄ __init__.py\n    ‚îú‚îÄ‚îÄ settings.py\n    ‚îú‚îÄ‚îÄ urls.py\n    ‚îî‚îÄ‚îÄ wsgi.py\n\nmanage.py: This small but mighty script serves as the gateway to various Django management commands.\nmy_project/settings.py: As the name suggests, this file houses the settings that configure your Django project.\nmy_project/urls.py: The URL dispatcher ‚Äî encoded within urls.py‚Äîmaps URLs to views. This file determines which view is displayed when a specific URL is accessed.\nmy_project/wsgi.py: Short for Web Server Gateway Interface, wsgi.py serves as the entry point for your application when deployed on a production server. It‚Äôs the bridge connecting your application to the web server, enabling it to handle incoming requests.\nmy_project/asgi.py: Similar to wsgi.py, asgi.py is the entry point for asynchronous web servers. It stands for Asynchronous Server Gateway Interface and facilitates the handling of asynchronous HTTP requests.\nmy_project/__init__.py: This seemingly unassuming file holds the magic that transforms a directory into a Python package. It‚Äôs essential for organizing and importing modules across your project\n\n\n\n2. Start the Development Server\n\n!cd ../../test_django/ && python manage.py -h\n\n\nType 'manage.py help &lt;subcommand&gt;' for help on a specific subcommand.\n\nAvailable subcommands:\n\n[auth]\n    changepassword\n    createsuperuser\n\n[contenttypes]\n    remove_stale_contenttypes\n\n[django]\n    check\n    compilemessages\n    createcachetable\n    dbshell\n    diffsettings\n    dumpdata\n    flush\n    inspectdb\n    loaddata\n    makemessages\n    makemigrations\n    migrate\n    optimizemigration\n    sendtestemail\n    shell\n    showmigrations\n    sqlflush\n    sqlmigrate\n    sqlsequencereset\n    squashmigrations\n    startapp\n    startproject\n    test\n    testserver\n\n[sessions]\n    clearsessions\n\n[staticfiles]\n    collectstatic\n    findstatic\n    runserver\n\n\npython manage.py runserver\non http://127.0.0.1:8000/",
    "crumbs": [
      "Blog",
      "Django",
      "Django Basics"
    ]
  },
  {
    "objectID": "Django/django_basics.html#creating-new-app",
    "href": "Django/django_basics.html#creating-new-app",
    "title": "Django Basics",
    "section": "Creating new app",
    "text": "Creating new app\npython manage.py startapp &lt;appname&gt;\nExample\npython manage.py startapp myapp\nmy_project/\n‚îú‚îÄ‚îÄ manage.py\n‚îú‚îÄ‚îÄ my_project/\n‚îÇ   ‚îú‚îÄ‚îÄ __init__.py\n‚îÇ   ‚îú‚îÄ‚îÄ asgi.py\n‚îÇ   ‚îú‚îÄ settings.py\n‚îÇ   ‚îú‚îÄ urls.py\n‚îÇ   ‚îú‚îÄ‚îÄ wsgi.py\n‚îú‚îÄ‚îÄ my_app/\n    ‚îú‚îÄ‚îÄ migrations/\n    ‚îÇ   ‚îî‚îÄ‚îÄ __init__.py\n    ‚îú‚îÄ‚îÄ __init__.py\n    ‚îú‚îÄ‚îÄ admin.py\n    ‚îú‚îÄ‚îÄ apps.py\n    ‚îú‚îÄ‚îÄ models.py\n    ‚îú‚îÄ‚îÄ tests.py\n    ‚îú‚îÄ‚îÄ urls.py\n    ‚îî‚îÄ‚îÄ views.py\n\nmodels.py: At the heart of every application lies the models.py file. This is where you define the data structures using Django‚Äôs ORM (Object-Relational Mapping). Each model class represents a table in the database. This file forms the foundation of your application‚Äôs data management.\nviews.py: The views.py file encapsulates the logic that defines how your application interacts with users‚Äô requests. Views handle data processing, rendering templates, and responding to actions. This file transforms user interactions into tangible responses.\ntests.py: Test-driven development gains momentum through the tests.py file. Here, you write unit tests to ensure your application‚Äôs components function as expected. These tests bolster the reliability and stability of your codebase.\nadmin.py: The admin.py file isn‚Äôt just for administrators‚Äîit configures how your application‚Äôs models are presented in Django‚Äôs admin interface. This file allows administrators to manage data seamlessly.\nmigrations: This directory is a blueprint of all changes in your application models.\nOther Files: Additional files might surface based on your application‚Äôs needs. For instance, forms.py houses form classes for data input, urls.py maps URLs to views, and apps.py manages application-specific configurations.\n\n\n1. Define Model\n\nEdit the models.py file in your app directory (myapp/models.py) to define your database models. For example:\n\nmyapp/models.py\nfrom django.db import models\n\nclass MyModel(models.Model):\n    name = models.CharField(max_length=100)\n    description = models.TextField()\n    created_at = models.DateTimeField(auto_now_add=True)\n\n    def __str__(self):\n        return self.name\n\n\n2. Create Database Tables\npython manage.py makemigrations\npython manage.py migrate\n\n\n3. Create Views\n\nCreate views to handle HTTP requests. Edit the views.py file in your app directory (myapp/views.py). For example:\n\nmyapp/views.py\nfrom django.shortcuts import render\nfrom django.http import HttpResponse\n\ndef index(request):\n    return HttpResponse(\"Hello, world!\")\n\n\n4. Map URLs to Views\n\nEdit the urls.py file in your app directory (myapp/urls.py) to map URLs to your views. For example:\n\nmyapp/urls.py\nfrom django.urls import path\nfrom . import views\n\nurlpatterns = [\n    path('', views.index, name='index'),\n]\n\n\n5. Include App URLs in Project URLs\ntest_django/urls.py\nfrom django.contrib import admin\nfrom django.urls import include, path\n\nurlpatterns = [\n    path('admin/', admin.site.urls),\n    path('myapp/', include('myapp.urls')),\n]\nRun the Development Server",
    "crumbs": [
      "Blog",
      "Django",
      "Django Basics"
    ]
  },
  {
    "objectID": "Django/django_basics.html#directory-hierarchy",
    "href": "Django/django_basics.html#directory-hierarchy",
    "title": "Django Basics",
    "section": "Directory Hierarchy",
    "text": "Directory Hierarchy\n\nA well-organized project structure typically follows this hierarchy:\n\nproject_name/\n‚îú‚îÄ‚îÄ manage.py\n‚îú‚îÄ‚îÄ project_name/\n‚îÇ   ‚îú‚îÄ‚îÄ __init__.py\n‚îÇ   ‚îú‚îÄ‚îÄ asgi.py\n‚îÇ   ‚îú‚îÄ settings.py\n‚îÇ   ‚îú‚îÄ urls.py\n‚îÇ   ‚îú‚îÄ‚îÄ wsgi.py\n‚îú‚îÄ‚îÄ app1/\n‚îú‚îÄ‚îÄ app2/\n  ...\n‚îú‚îÄ‚îÄ static/\n‚îú‚îÄ‚îÄ media/\n‚îú‚îÄ‚îÄ templates/\n\nproject_name: The root directory of your project.\nproject_name/project_name: This inner directory holds core project settings and configuration.\napp1, app2: These are the individual apps you create within the project.\nstatic: Houses static files like CSS, JavaScript, and images.\nmedia: Stores user-uploaded files.\ntemplates: Contains HTML templates.",
    "crumbs": [
      "Blog",
      "Django",
      "Django Basics"
    ]
  },
  {
    "objectID": "Django/django_basics.html#url-dispatcher",
    "href": "Django/django_basics.html#url-dispatcher",
    "title": "Django Basics",
    "section": "URL dispatcher",
    "text": "URL dispatcher\nThe path() function is passed four arguments, two required: route and view, and two optional: kwargs, and name. At this point, it‚Äôs worth reviewing what these arguments are for.\n\npath() argument: route\nroute is a string that contains a URL pattern. When processing a request, Django starts at the first pattern in urlpatterns and makes its way down the list, comparing the requested URL against each pattern until it finds one that matches.\nPatterns don‚Äôt search GET and POST parameters, or the domain name. For example, in a request to https://www.example.com/myapp/, the URLconf will look for myapp/. In a request to https://www.example.com/myapp/?page=3, the URLconf will also look for myapp/.\n\n\npath() argument: view\nWhen Django finds a matching pattern, it calls the specified view function with an HttpRequest object as the first argument and any ‚Äúcaptured‚Äù values from the route as keyword arguments. We‚Äôll give an example of this in a bit.\n\n\npath() argument: kwargs\nArbitrary keyword arguments can be passed in a dictionary to the target view. We aren‚Äôt going to use this feature of Django in the tutorial\n\n\npath() argument: name\nNaming your URL lets you refer to it unambiguously from elsewhere in Django, especially from within templates. This powerful feature allows you to make global changes to the URL patterns of your project while only touching a single file.\nWhen you‚Äôre comfortable with the basic request and response flow, read part 2 of this tutorial to start working with the database.",
    "crumbs": [
      "Blog",
      "Django",
      "Django Basics"
    ]
  },
  {
    "objectID": "Django/django_basics.html#database-settings",
    "href": "Django/django_basics.html#database-settings",
    "title": "Django Basics",
    "section": "Database settings",
    "text": "Database settings\nNow, open up mysite/settings.py. It‚Äôs a normal Python module with module-level variables representing Django settings.\nBy default, the configuration uses SQLite. If you‚Äôre new to databases, or you‚Äôre just interested in trying Django, this is the easiest choice. SQLite is included in Python, so you won‚Äôt need to install anything else to support your database. When starting your first real project, however, you may want to use a more scalable database like PostgreSQL, to avoid database-switching headaches down the road.\nIf you wish to use another database, install the appropriate database bindings and change the following keys in the DATABASES ‚Äòdefault‚Äô item to match your database connection settings:\n\nENGINE ‚Äì Either ‚Äòdjango.db.backends.sqlite3‚Äô, ‚Äòdjango.db.backends.postgresql‚Äô, ‚Äòdjango.db.backends.mysql‚Äô, or ‚Äòdjango.db.backends.oracle‚Äô. Other backends are also available.\nNAME ‚Äì The name of your database. If you‚Äôre using SQLite, the database will be a file on your computer; in that case, NAME should be the full absolute path, including filename, of that file. The default value, BASE_DIR / ‚Äòdb.sqlite3‚Äô, will store the file in your project directory.\n\nWhile you‚Äôre editing mysite/settings.py, set TIME_ZONE to your time zone.\nAlso, note the INSTALLED_APPS setting at the top of the file. That holds the names of all Django applications that are activated in this Django instance. Apps can be used in multiple projects, and you can package and distribute them for use by others in their projects.\nBy default, INSTALLED_APPS contains the following apps, all of which come with Django:\ndjango.contrib.admin ‚Äì The admin site. You‚Äôll use it shortly.\ndjango.contrib.auth ‚Äì An authentication system.\ndjango.contrib.contenttypes ‚Äì A framework for content types.\ndjango.contrib.sessions ‚Äì A session framework.\ndjango.contrib.messages ‚Äì A messaging framework.\ndjango.contrib.staticfiles ‚Äì A framework for managing static files.\nThese applications are included by default as a convenience for the common case.\nSome of these applications make use of at least one database table, though, so we need to create the tables in the database before we can use them. To do that, run the following command:\npython manage.py migrate\nThe migrate command looks at the INSTALLED_APPS setting and creates any necessary database tables according to the database settings in your mysite/settings.py file and the database migrations shipped with the app (we‚Äôll cover those later). You‚Äôll see a message for each migration it applies. If you‚Äôre interested, run the command-line client for your database and type (PostgreSQL), SHOW TABLES; (MariaDB, MySQL), .tables (SQLite), or SELECT TABLE_NAME FROM USER_TABLES; (Oracle) to display the tables Django created.",
    "crumbs": [
      "Blog",
      "Django",
      "Django Basics"
    ]
  },
  {
    "objectID": "Django/django_basics.html#creating-models",
    "href": "Django/django_basics.html#creating-models",
    "title": "Django Basics",
    "section": "Creating models",
    "text": "Creating models\n\nNow we‚Äôll define your models ‚Äì essentially, your database layout, with additional metadata.\n\nIn our poll app, we‚Äôll create two models: Question and Choice. A Question has a question and a publication date. A Choice has two fields: the text of the choice and a vote tally. Each Choice is associated with a Question.\nThese concepts are represented by Python classes. Edit the polls/models.py file so it looks like this:\npolls/models.py\nfrom django.db import models\n\n\nclass Question(models.Model):\n    question_text = models.CharField(max_length=200)\n    pub_date = models.DateTimeField(\"date published\")\n\n\nclass Choice(models.Model):\n    question = models.ForeignKey(Question, on_delete=models.CASCADE)\n    choice_text = models.CharField(max_length=200)\n    votes = models.IntegerField(default=0)\nHere, each model is represented by a class that subclasses django.db.models.Model. Each model has a number of class variables, each of which represents a database field in the model.\nEach field is represented by an instance of a Field class ‚Äì e.g., CharField for character fields and DateTimeField for datetimes. This tells Django what type of data each field holds.\nThe name of each Field instance (e.g.¬†question_text or pub_date) is the field‚Äôs name, in machine-friendly format. You‚Äôll use this value in your Python code, and your database will use it as the column name.\nYou can use an optional first positional argument to a Field to designate a human-readable name. That‚Äôs used in a couple of introspective parts of Django, and it doubles as documentation. If this field isn‚Äôt provided, Django will use the machine-readable name. In this example, we‚Äôve only defined a human-readable name for Question.pub_date. For all other fields in this model, the field‚Äôs machine-readable name will suffice as its human-readable name.\nSome Field classes have required arguments. CharField, for example, requires that you give it a max_length. That‚Äôs used not only in the database schema, but in validation, as we‚Äôll soon see.\nA Field can also have various optional arguments; in this case, we‚Äôve set the default value of votes to 0.\nFinally, note a relationship is defined, using ForeignKey. That tells Django each Choice is related to a single Question. Django supports all the common database relationships: many-to-one, many-to-many, and one-to-one.",
    "crumbs": [
      "Blog",
      "Django",
      "Django Basics"
    ]
  },
  {
    "objectID": "Django/django_basics.html#relationships-between-entities",
    "href": "Django/django_basics.html#relationships-between-entities",
    "title": "Django Basics",
    "section": "Relationships between entities",
    "text": "Relationships between entities\nDealing with relationships between entities is one of the more challenging aspects of Web API design. There are a number of different ways that we might choose to represent a relationship:\nUsing primary keys.\nUsing hyperlinking between entities.\nUsing a unique identifying slug field on the related entity.\nUsing the default string representation of the related entity.\nNesting the related entity inside the parent representation.\nSome other custom representation.\nREST framework supports all of these styles, and can apply them across forward or reverse relationships, or apply them across custom managers such as generic foreign keys.\nIn this case we‚Äôd like to use a hyperlinked style between entities. In order to do so, we‚Äôll modify our serializers to extend HyperlinkedModelSerializer instead of the existing ModelSerializer.\nThe HyperlinkedModelSerializer has the following differences from ModelSerializer:\nIt does not include the id field by default.\nIt includes a url field, using HyperlinkedIdentityField.\nRelationships use HyperlinkedRelatedField, instead of PrimaryKeyRelatedField.",
    "crumbs": [
      "Blog",
      "Django",
      "Django Basics"
    ]
  },
  {
    "objectID": "Django/django_basics.html#activating-models",
    "href": "Django/django_basics.html#activating-models",
    "title": "Django Basics",
    "section": "Activating models",
    "text": "Activating models\nThat small bit of model code gives Django a lot of information. With it, Django is able to:\n\nCreate a database schema (CREATE TABLE statements) for this app.\nCreate a Python database-access API for accessing Question and Choice objects.\n\nBut first we need to tell our project that the polls app is installed.\nTo include the app in our project, we need to add a reference to its configuration class in the INSTALLED_APPS setting. The PollsConfig class is in the polls/apps.py file, so its dotted path is ‚Äòpolls.apps.PollsConfig‚Äô. Edit the mysite/settings.py file and add that dotted path to the INSTALLED_APPS setting. It‚Äôll look like this:\ntest_django/settings.py\nINSTALLED_APPS = [\n    \"myapp.aps.MyappConfig\"\n    \"polls.apps.PollsConfig\",\n    \"django.contrib.admin\",\n    \"django.contrib.auth\",\n    \"django.contrib.contenttypes\",\n    \"django.contrib.sessions\",\n    \"django.contrib.messages\",\n    \"django.contrib.staticfiles\",\n]\nNow Django knows to include the polls app. Let‚Äôs run another command:\npython manage.py makemigrations polls\nBy running makemigrations, you‚Äôre telling Django that you‚Äôve made some changes to your models (in this case, you‚Äôve made new ones) and that you‚Äôd like the changes to be stored as a migration.\nMigrations are how Django stores changes to your models (and thus your database schema) - they‚Äôre files on disk. You can read the migration for your new model if you like; it‚Äôs the file polls/migrations/0001_initial.py. Don‚Äôt worry, you‚Äôre not expected to read them every time Django makes one, but they‚Äôre designed to be human-editable in case you want to manually tweak how Django changes things.\n\nSQL\nThere‚Äôs a command that will run the migrations for you and manage your database schema automatically - that‚Äôs called migrate, and we‚Äôll come to it in a moment - but first, let‚Äôs see what SQL that migration would run. The sqlmigrate command takes migration names and returns their SQL:\npython manage.py sqlmigrate polls 0001\nBEGIN;\n--\n-- Create model Question\n--\nCREATE TABLE \"polls_question\" (\n    \"id\" bigint NOT NULL PRIMARY KEY GENERATED BY DEFAULT AS IDENTITY,\n    \"question_text\" varchar(200) NOT NULL,\n    \"pub_date\" timestamp with time zone NOT NULL\n);\n--\n-- Create model Choice\n--\nCREATE TABLE \"polls_choice\" (\n    \"id\" bigint NOT NULL PRIMARY KEY GENERATED BY DEFAULT AS IDENTITY,\n    \"choice_text\" varchar(200) NOT NULL,\n    \"votes\" integer NOT NULL,\n    \"question_id\" bigint NOT NULL\n);\nALTER TABLE \"polls_choice\"\n  ADD CONSTRAINT \"polls_choice_question_id_c5b4b260_fk_polls_question_id\"\n    FOREIGN KEY (\"question_id\")\n    REFERENCES \"polls_question\" (\"id\")\n    DEFERRABLE INITIALLY DEFERRED;\nCREATE INDEX \"polls_choice_question_id_c5b4b260\" ON \"polls_choice\" (\"question_id\");\n\nCOMMIT;\nNote the following:\n\nThe exact output will vary depending on the database you are using. The example above is generated for PostgreSQL.\nTable names are automatically generated by combining the name of the app (polls) and the lowercase name of the model ‚Äì question and choice. (You can override this behavior.)\nPrimary keys (IDs) are added automatically. (You can override this, too.)\nBy convention, Django appends ‚Äú_id‚Äù to the foreign key field name. (Yes, you can override this, as well.)\nThe foreign key relationship is made explicit by a FOREIGN KEY constraint. Don‚Äôt worry about the DEFERRABLE parts; it‚Äôs telling PostgreSQL to not enforce the foreign key until the end of the transaction.\nIt‚Äôs tailored to the database you‚Äôre using, so database-specific field types such as auto_increment (MySQL), bigint PRIMARY KEY GENERATED BY DEFAULT AS IDENTITY (PostgreSQL), or integer primary key autoincrement (SQLite) are handled for you automatically. Same goes for the quoting of field names ‚Äì e.g., using double quotes or single quotes.\nThe sqlmigrate command doesn‚Äôt actually run the migration on your database - instead, it prints it to the screen so that you can see what SQL Django thinks is required. It‚Äôs useful for checking what Django is going to do or if you have database administrators who require SQL scripts for changes.\n\nIf you‚Äôre interested, you can also run python manage.py check; this checks for any problems in your project without making migrations or touching the database.",
    "crumbs": [
      "Blog",
      "Django",
      "Django Basics"
    ]
  },
  {
    "objectID": "Django/django_basics.html#migrate",
    "href": "Django/django_basics.html#migrate",
    "title": "Django Basics",
    "section": "Migrate",
    "text": "Migrate\nNow, run migrate again to create those model tables in your database:\npython manage.py migrate\nThe migrate command takes all the migrations that haven‚Äôt been applied (Django tracks which ones are applied using a special table in your database called django_migrations) and runs them against your database - essentially, synchronizing the changes you made to your models with the schema in the database.\nMigrations are very powerful and let you change your models over time, as you develop your project, without the need to delete your database or tables and make new ones - it specializes in upgrading your database live, without losing data. We‚Äôll cover them in more depth in a later part of the tutorial, but for now, remember the three-step guide to making model changes:\n\nChange your models (in models.py).\nRun python manage.py makemigrations to create migrations for those changes\nRun python manage.py migrate to apply those changes to the database.\n\nThe reason that there are separate commands to make and apply migrations is because you‚Äôll commit migrations to your version control system and ship them with your app; they not only make your development easier, they‚Äôre also usable by other developers and in production.",
    "crumbs": [
      "Blog",
      "Django",
      "Django Basics"
    ]
  },
  {
    "objectID": "Django/django_basics.html#playing-with-the-api",
    "href": "Django/django_basics.html#playing-with-the-api",
    "title": "Django Basics",
    "section": "Playing with the API",
    "text": "Playing with the API\npython manage.py shell\n&gt;&gt;&gt; from polls.models import Choice, Question  # Import the model classes we just wrote.\n\n# No questions are in the system yet.\n&gt;&gt;&gt; Question.objects.all()\n&lt;QuerySet []&gt;\n\n# Create a new Question.\n# Support for time zones is enabled in the default settings file, so\n# Django expects a datetime with tzinfo for pub_date. Use timezone.now()\n# instead of datetime.datetime.now() and it will do the right thing.\n&gt;&gt;&gt; from django.utils import timezone\n&gt;&gt;&gt; q = Question(question_text=\"What's new?\", pub_date=timezone.now())\n\n# Save the object into the database. You have to call save() explicitly.\n&gt;&gt;&gt; q.save()\n\n# Now it has an ID.\n&gt;&gt;&gt; q.id\n1\n\n# Access model field values via Python attributes.\n&gt;&gt;&gt; q.question_text\n\"What's new?\"\n&gt;&gt;&gt; q.pub_date\ndatetime.datetime(2012, 2, 26, 13, 0, 0, 775217, tzinfo=datetime.timezone.utc)\n\n# Change values by changing the attributes, then calling save().\n&gt;&gt;&gt; q.question_text = \"What's up?\"\n&gt;&gt;&gt; q.save()\n\n# objects.all() displays all the questions in the database.\n&gt;&gt;&gt; Question.objects.all()\n&lt;QuerySet [&lt;Question: Question object (1)&gt;]&gt;\nWait a minute. &lt;Question: Question object (1)&gt; isn‚Äôt a helpful representation of this object. Let‚Äôs fix that by editing the Question model (in the polls/models.py file) and adding a str() method to both Question and Choice:\n\npolls/models.py\n\nfrom django.db import models\n\n\nclass Question(models.Model):\n    # ...\n    def __str__(self):\n        return self.question_text\n\n\nclass Choice(models.Model):\n    # ...\n    def __str__(self):\n        return self.choice_text\nIt‚Äôs important to add str() methods to your models, not only for your own convenience when dealing with the interactive prompt, but also because objects‚Äô representations are used throughout Django‚Äôs automatically-generated admin.\nLet‚Äôs also add a custom method to this model:\n\npolls/models.py\n\nimport datetime\n\nfrom django.db import models\nfrom django.utils import timezone\n\n\nclass Question(models.Model):\n    # ...\n    def was_published_recently(self):\n        return self.pub_date &gt;= timezone.now() - datetime.timedelta(days=1)\nNote the addition of import datetime and from django.utils import timezone, to reference Python‚Äôs standard datetime module and Django‚Äôs time-zone-related utilities in django.utils.timezone, respectively. If you aren‚Äôt familiar with time zone handling in Python, you can learn more in the time zone support docs.",
    "crumbs": [
      "Blog",
      "Django",
      "Django Basics"
    ]
  },
  {
    "objectID": "Django/django_basics.html#introducing-the-django-admin",
    "href": "Django/django_basics.html#introducing-the-django-admin",
    "title": "Django Basics",
    "section": "Introducing the Django Admin",
    "text": "Introducing the Django Admin\nPhilosophy\nGenerating admin sites for your staff or clients to add, change, and delete content is tedious work that doesn‚Äôt require much creativity. For that reason, Django entirely automates creation of admin interfaces for models.\nDjango was written in a newsroom environment, with a very clear separation between ‚Äúcontent publishers‚Äù and the ‚Äúpublic‚Äù site. Site managers use the system to add news stories, events, sports scores, etc., and that content is displayed on the public site. Django solves the problem of creating a unified interface for site administrators to edit content.\nThe admin isn‚Äôt intended to be used by site visitors. It‚Äôs for site managers.\n\nCreate a superuser\npython manage.py createsuperuser\nEnter username and password\nUsername: &lt;name&gt;\nEmail address: &lt;email&gt;\nPassword: **********\nPassword (again): *********\nSuperuser created successfully.\n\n\nMake the poll app modifiable in the admin\n\npolls/admin.py\n\nfrom django.contrib import admin\n\nfrom .models import Question\n\nadmin.site.register(Question)\n\nmyapp/admin.py\n\nfrom django.contrib import admin\n\nfrom .models import MyModel\n\nadmin.site.register(MyModel)",
    "crumbs": [
      "Blog",
      "Django",
      "Django Basics"
    ]
  },
  {
    "objectID": "Django/django_basics.html#writing-more-views",
    "href": "Django/django_basics.html#writing-more-views",
    "title": "Django Basics",
    "section": "Writing more views",
    "text": "Writing more views\n\nNow let‚Äôs add a few more views to polls/views.py. These views are slightly different, because they take an argument:\n\n\npolls/views.py\n\ndef detail(request, question_id):\n    return HttpResponse(\"You're looking at question %s.\" % question_id)\n\n\ndef results(request, question_id):\n    response = \"You're looking at the results of question %s.\"\n    return HttpResponse(response % question_id)\n\n\ndef vote(request, question_id):\n    return HttpResponse(\"You're voting on question %s.\" % question_id)\n\npolls/urls.py\n\n\nfrom django.urls import path\n\nfrom . import views\n\nurlpatterns = [\n    # ex: /polls/\n    path(\"\", views.index, name=\"index\"),\n    # ex: /polls/5/\n    path(\"&lt;int:question_id&gt;/\", views.detail, name=\"detail\"),\n    # ex: /polls/5/results/\n    path(\"&lt;int:question_id&gt;/results/\", views.results, name=\"results\"),\n    # ex: /polls/5/vote/\n    path(\"&lt;int:question_id&gt;/vote/\", views.vote, name=\"vote\"),\n]\nEach view is responsible for doing one of two things: returning an HttpResponse object containing the content for the requested page, or raising an exception such as Http404. The rest is up to you.\n\npolls/views.py¬∂\n\nfrom django.http import HttpResponse\n\nfrom .models import Question\n\n\ndef index(request):\n    latest_question_list = Question.objects.order_by(\"-pub_date\")[:5]\n    output = \", \".join([q.question_text for q in latest_question_list])\n    return HttpResponse(output)",
    "crumbs": [
      "Blog",
      "Django",
      "Django Basics"
    ]
  },
  {
    "objectID": "Django/django_basics.html#template-folder",
    "href": "Django/django_basics.html#template-folder",
    "title": "Django Basics",
    "section": "Template Folder",
    "text": "Template Folder\nThere‚Äôs a problem here, though: the page‚Äôs design is hard-coded in the view. If you want to change the way the page looks, you‚Äôll have to edit this Python code. So let‚Äôs use Django‚Äôs template system to separate the design from Python by creating a template that the view can use.\nFirst, create a directory called templates in your polls directory. Django will look for templates in there.\nYour project‚Äôs TEMPLATES setting describes how Django will load and render templates. The default settings file configures a DjangoTemplates backend whose APP_DIRS option is set to True. By convention DjangoTemplates looks for a ‚Äútemplates‚Äù subdirectory in each of the INSTALLED_APPS.\nWithin the templates directory you have just created, create another directory called polls, and within that create a file called index.html. In other words, your template should be at polls/templates/polls/index.html. Because of how the app_directories template loader works as described above, you can refer to this template within Django as polls/index.html.\n\npolls/templates/polls/index.html¬∂\n\n{% if latest_question_list %}\n    &lt;ul&gt;\n    {% for question in latest_question_list %}\n        &lt;li&gt;&lt;a href=\"/polls/{{ question.id }}/\"&gt;{{ question.question_text }}&lt;/a&gt;&lt;/li&gt;\n    {% endfor %}\n    &lt;/ul&gt;\n{% else %}\n    &lt;p&gt;No polls are available.&lt;/p&gt;\n{% endif %}\n\npolls/views.py\n\nfrom django.http import HttpResponse\nfrom django.template import loader\n\nfrom .models import Question\n\n\ndef index(request):\n    latest_question_list = Question.objects.order_by(\"-pub_date\")[:5]\n    template = loader.get_template(\"polls/index.html\")\n    context = {\n        \"latest_question_list\": latest_question_list,\n    }\n    return HttpResponse(template.render(context, request))\n\nA shortcut: render()\nIt‚Äôs a very common idiom to load a template, fill a context and return an HttpResponse object with the result of the rendered template. Django provides a shortcut. Here‚Äôs the full index() view, rewritten:\n\npolls/views.py\n\nfrom django.shortcuts import render\n\nfrom .models import Question\n\n\ndef index(request):\n    latest_question_list = Question.objects.order_by(\"-pub_date\")[:5]\n    context = {\"latest_question_list\": latest_question_list}\n    return render(request, \"polls/index.html\", context)\n\n\nRaising a 404 error\n\nNow, let‚Äôs tackle the question detail view ‚Äì the page that displays the question text for a given poll. Here‚Äôs the view:\n\n\npolls/views.py¬∂\n\nfrom django.http import Http404\nfrom django.shortcuts import render\n\nfrom .models import Question\n\n\n# ...\ndef detail(request, question_id):\n    try:\n        question = Question.objects.get(pk=question_id)\n    except Question.DoesNotExist:\n        raise Http404(\"Question does not exist\")\n    return render(request, \"polls/detail.html\", {\"question\": question})\n\n\nA shortcut: get_object_or_404()\n\npolls/views.py\n\nfrom django.shortcuts import get_object_or_404, render\n\nfrom .models import Question\n\n\n# ...\ndef detail(request, question_id):\n    question = get_object_or_404(Question, pk=question_id)\n    return render(request, \"polls/detail.html\", {\"question\": question})\nThe get_object_or_404() function takes a Django model as its first argument and an arbitrary number of keyword arguments, which it passes to the get() function of the model‚Äôs manager. It raises Http404 if the object doesn‚Äôt exist.\nPhilosophy\nWhy do we use a helper function get_object_or_404() instead of automatically catching the ObjectDoesNotExist exceptions at a higher level, or having the model API raise Http404 instead of ObjectDoesNotExist?\nBecause that would couple the model layer to the view layer. One of the foremost design goals of Django is to maintain loose coupling. Some controlled coupling is introduced in the django.shortcuts module.\n\npolls/templates/polls/detail.html¬∂\n\n&lt;h1&gt;{{ question.question_text }}&lt;/h1&gt;\n&lt;ul&gt;\n{% for choice in question.choice_set.all %}\n    &lt;li&gt;{{ choice.choice_text }}&lt;/li&gt;\n{% endfor %}\n&lt;/ul&gt;\n\n\n\nRemoving hardcoded URLs in templates\nRemember, when we wrote the link to a question in the polls/index.html template, the link was partially hardcoded like this:\n&lt;li&gt;&lt;a href=\"/polls/{{ question.id }}/\"&gt;{{ question.question_text }}&lt;/a&gt;&lt;/li&gt;\nThe problem with this hardcoded, tightly-coupled approach is that it becomes challenging to change URLs on projects with a lot of templates. However, since you defined the name argument in the path() functions in the polls.urls module, you can remove a reliance on specific URL paths defined in your url configurations by using the {% url %} template tag:\n&lt;li&gt;&lt;a href=\"{% url 'detail' question.id %}\"&gt;{{ question.question_text }}&lt;/a&gt;&lt;/li&gt;\nThe way this works is by looking up the URL definition as specified in the polls.urls module. You can see exactly where the URL name of ‚Äòdetail‚Äô is defined below:\n...\n# the 'name' value as called by the {% url %} template tag\npath(\"&lt;int:question_id&gt;/\", views.detail, name=\"detail\"),\n...",
    "crumbs": [
      "Blog",
      "Django",
      "Django Basics"
    ]
  },
  {
    "objectID": "Django/django_basics.html#namespacing-url-names",
    "href": "Django/django_basics.html#namespacing-url-names",
    "title": "Django Basics",
    "section": "Namespacing URL names",
    "text": "Namespacing URL names\nThe tutorial project has just one app, polls. In real Django projects, there might be five, ten, twenty apps or more. How does Django differentiate the URL names between them? For example, the polls app has a detail view, and so might an app on the same project that is for a blog. How does one make it so that Django knows which app view to create for a url when using the {% url %} template tag?\nThe answer is to add namespaces to your URLconf. In the polls/urls.py file, go ahead and add an app_name to set the application namespace:\n\npolls/urls.py\n\nfrom django.urls import path\n\nfrom . import views\n\napp_name = \"polls\"\nurlpatterns = [\n    path(\"\", views.index, name=\"index\"),\n    path(\"&lt;int:question_id&gt;/\", views.detail, name=\"detail\"),\n    path(\"&lt;int:question_id&gt;/results/\", views.results, name=\"results\"),\n    path(\"&lt;int:question_id&gt;/vote/\", views.vote, name=\"vote\"),\n]",
    "crumbs": [
      "Blog",
      "Django",
      "Django Basics"
    ]
  },
  {
    "objectID": "Django/django_basics.html#write-a-minimal-form",
    "href": "Django/django_basics.html#write-a-minimal-form",
    "title": "Django Basics",
    "section": "Write a minimal form",
    "text": "Write a minimal form\n\npolls/templates/polls/detail.html¬∂\n\n&lt;form action=\"{% url 'polls:vote' question.id %}\" method=\"post\"&gt;\n{% csrf_token %}\n&lt;fieldset&gt;\n    &lt;legend&gt;&lt;h1&gt;{{ question.question_text }}&lt;/h1&gt;&lt;/legend&gt;\n    {% if error_message %}&lt;p&gt;&lt;strong&gt;{{ error_message }}&lt;/strong&gt;&lt;/p&gt;{% endif %}\n    {% for choice in question.choice_set.all %}\n        &lt;input type=\"radio\" name=\"choice\" id=\"choice{{ forloop.counter }}\" value=\"{{ choice.id }}\"&gt;\n        &lt;label for=\"choice{{ forloop.counter }}\"&gt;{{ choice.choice_text }}&lt;/label&gt;&lt;br&gt;\n    {% endfor %}\n&lt;/fieldset&gt;\n&lt;input type=\"submit\" value=\"Vote\"&gt;\n&lt;/form&gt;\nA quick rundown:\n\nThe above template displays a radio button for each question choice. The value of each radio button is the associated question choice‚Äôs ID. The name of each radio button is ‚Äúchoice‚Äù. That means, when somebody selects one of the radio buttons and submits the form, it‚Äôll send the POST data choice=# where # is the ID of the selected choice. This is the basic concept of HTML forms.\nWe set the form‚Äôs action to {% url ‚Äòpolls:vote‚Äô question.id %}, and we set method=‚Äúpost‚Äù. Using method=‚Äúpost‚Äù (as opposed to method=‚Äúget‚Äù) is very important, because the act of submitting this form will alter data server-side. Whenever you create a form that alters data server-side, use method=‚Äúpost‚Äù. This tip isn‚Äôt specific to Django; it‚Äôs good web development practice in general.\nforloop.counter indicates how many times the for tag has gone through its loop\nSince we‚Äôre creating a POST form (which can have the effect of modifying data), we need to worry about Cross Site Request Forgeries. Thankfully, you don‚Äôt have to worry too hard, because Django comes with a helpful system for protecting against it. In short, all POST forms that are targeted at internal URLs should use the {% csrf_token %} template tag.\n\nWe also created a dummy implementation of the vote() function. Let‚Äôs create a real version. Add the following to polls/views.py:\n\npolls/views.py\n\nfrom django.db.models import F\nfrom django.http import HttpResponse, HttpResponseRedirect\nfrom django.shortcuts import get_object_or_404, render\nfrom django.urls import reverse\n\nfrom .models import Choice, Question\n\n\n# ...\ndef vote(request, question_id):\n    question = get_object_or_404(Question, pk=question_id)\n    try:\n        selected_choice = question.choice_set.get(pk=request.POST[\"choice\"])\n    except (KeyError, Choice.DoesNotExist):\n        # Redisplay the question voting form.\n        return render(\n            request,\n            \"polls/detail.html\",\n            {\n                \"question\": question,\n                \"error_message\": \"You didn't select a choice.\",\n            },\n        )\n    else:\n        selected_choice.votes = F(\"votes\") + 1\n        selected_choice.save()\n        # Always return an HttpResponseRedirect after successfully dealing\n        # with POST data. This prevents data from being posted twice if a\n        # user hits the Back button.\n        return HttpResponseRedirect(reverse(\"polls:results\", args=(question.id,)))\nThis code includes a few things we haven‚Äôt covered yet in this tutorial:\n\nrequest.POST is a dictionary-like object that lets you access submitted data by key name. In this case, request.POST[‚Äòchoice‚Äô] returns the ID of the selected choice, as a string. request.POST values are always strings.\nNote that Django also provides request.GET for accessing GET data in the same way ‚Äì but we‚Äôre explicitly using request.POST in our code, to ensure that data is only altered via a POST call.\nrequest.POST[‚Äòchoice‚Äô] will raise KeyError if choice wasn‚Äôt provided in POST data. The above code checks for KeyError and redisplays the question form with an error message if choice isn‚Äôt given.\nF(‚Äúvotes‚Äù) + 1 instructs the database to increase the vote count by 1.\nAfter incrementing the choice count, the code returns an HttpResponseRedirect rather than a normal HttpResponse. HttpResponseRedirect takes a single argument: the URL to which the user will be redirected (see the following point for how we construct the URL in this case).\nAs the Python comment above points out, you should always return an HttpResponseRedirect after successfully dealing with POST data. This tip isn‚Äôt specific to Django; it‚Äôs good web development practice in general.\nWe are using the reverse() function in the HttpResponseRedirect constructor in this example. This function helps avoid having to hardcode a URL in the view function. It is given the name of the view that we want to pass control to and the variable portion of the URL pattern that points to that view. In this case, using the URLconf we set up in Tutorial 3, this reverse() call will return a string like\n\n\npolls/views.py\n\nfrom django.shortcuts import get_object_or_404, render\n\n\ndef results(request, question_id):\n    question = get_object_or_404(Question, pk=question_id)\n    return render(request, \"polls/results.html\", {\"question\": question})\n\npolls/templates/polls/results.html¬∂\n\n&lt;h1&gt;{{ question.question_text }}&lt;/h1&gt;\n\n&lt;ul&gt;\n{% for choice in question.choice_set.all %}\n    &lt;li&gt;{{ choice.choice_text }} -- {{ choice.votes }} vote{{ choice.votes|pluralize }}&lt;/li&gt;\n{% endfor %}\n&lt;/ul&gt;\n\n&lt;a href=\"{% url 'polls:detail' question.id %}\"&gt;Vote again?&lt;/a&gt;",
    "crumbs": [
      "Blog",
      "Django",
      "Django Basics"
    ]
  },
  {
    "objectID": "Django/django_basics.html#use-generic-views-less-code-is-better",
    "href": "Django/django_basics.html#use-generic-views-less-code-is-better",
    "title": "Django Basics",
    "section": "Use generic views: Less code is better",
    "text": "Use generic views: Less code is better\n\nAmend URLconf\n\npolls/urls.py\n\nfrom django.urls import path\n\nfrom . import views\n\napp_name = \"polls\"\nurlpatterns = [\n    path(\"\", views.IndexView.as_view(), name=\"index\"),\n    path(\"&lt;int:pk&gt;/\", views.DetailView.as_view(), name=\"detail\"),\n    path(\"&lt;int:pk&gt;/results/\", views.ResultsView.as_view(), name=\"results\"),\n    path(\"&lt;int:question_id&gt;/vote/\", views.vote, name=\"vote\"),\n]\nNote that the name of the matched pattern in the path strings of the second and third patterns has changed from  to . This is necessary because we‚Äôll use the DetailView generic view to replace our detail() and results() views, and it expects the primary key value captured from the URL to be called ‚Äúpk‚Äù.\n\n\nAmend views\n\npolls/views.py\n\nfrom django.db.models import F\nfrom django.http import HttpResponseRedirect\nfrom django.shortcuts import get_object_or_404, render\nfrom django.urls import reverse\nfrom django.views import generic\n\nfrom .models import Choice, Question\n\n\nclass IndexView(generic.ListView):\n    template_name = \"polls/index.html\"\n    context_object_name = \"latest_question_list\"\n\n    def get_queryset(self):\n        \"\"\"Return the last five published questions.\"\"\"\n        return Question.objects.order_by(\"-pub_date\")[:5]\n\n\nclass DetailView(generic.DetailView):\n    model = Question\n    template_name = \"polls/detail.html\"\n\n\nclass ResultsView(generic.DetailView):\n    model = Question\n    template_name = \"polls/results.html\"\n\n\ndef vote(request, question_id):\n    # same as above, no changes needed.\n    ...\nEach generic view needs to know what model it will be acting upon. This is provided using either the model attribute (in this example, model = Question for DetailView and ResultsView) or by defining the get_queryset() method (as shown in IndexView).\nBy default, the DetailView generic view uses a template called /_detail.html. In our case, it would use the template ‚Äúpolls/question_detail.html‚Äù. The template_name attribute is used to tell Django to use a specific template name instead of the autogenerated default template name. We also specify the template_name for the results list view ‚Äì this ensures that the results view and the detail view have a different appearance when rendered, even though they‚Äôre both a DetailView behind the scenes.\nSimilarly, the ListView generic view uses a default template called /_list.html; we use template_name to tell ListView to use our existing ‚Äúpolls/index.html‚Äù template.\nIn previous parts of the tutorial, the templates have been provided with a context that contains the question and latest_question_list context variables. For DetailView the question variable is provided automatically ‚Äì since we‚Äôre using a Django model (Question), Django is able to determine an appropriate name for the context variable. However, for ListView, the automatically generated context variable is question_list. To override this we provide the context_object_name attribute, specifying that we want to use latest_question_list instead. As an alternative approach, you could change your templates to match the new default context variables ‚Äì but it‚Äôs a lot easier to tell Django to use the variable you want.\nRun the server, and use your new polling app based on generic views.\nFor full details on generic views, see the generic views documentation.\nWhen you‚Äôre comfortable with forms and generic views, read part 5 of this tutorial to learn about testing our polls app.",
    "crumbs": [
      "Blog",
      "Django",
      "Django Basics"
    ]
  },
  {
    "objectID": "Django/django_basics.html#writing-our-first-test",
    "href": "Django/django_basics.html#writing-our-first-test",
    "title": "Django Basics",
    "section": "Writing our first test",
    "text": "Writing our first test\n\nCreate a test to expose the bug\n\npolls/tests.py\n\nimport datetime\n\nfrom django.test import TestCase\nfrom django.utils import timezone\n\nfrom .models import Question\n\n\nclass QuestionModelTests(TestCase):\n    def test_was_published_recently_with_future_question(self):\n        \"\"\"\n        was_published_recently() returns False for questions whose pub_date\n        is in the future.\n        \"\"\"\n        time = timezone.now() + datetime.timedelta(days=30)\n        future_question = Question(pub_date=time)\n        self.assertIs(future_question.was_published_recently(), False)\nHere we have created a django.test.TestCase subclass with a method that creates a Question instance with a pub_date in the future. We then check the output of was_published_recently() - which ought to be False.\n\n\nRunning tests\nIn the terminal, we can run our test:\npython manage.py test polls\nand you‚Äôll see something like:\n\n\nFixing the bug\n\ndef was_published_recently(self):\n    now = timezone.now()\n    return now - datetime.timedelta(days=1) &lt;= self.pub_date &lt;= now\n\n\nMore comprehensive tests\n\npolls/tests.py\n\ndef test_was_published_recently_with_old_question(self):\n    \"\"\"\n    was_published_recently() returns False for questions whose pub_date\n    is older than 1 day.\n    \"\"\"\n    time = timezone.now() - datetime.timedelta(days=1, seconds=1)\n    old_question = Question(pub_date=time)\n    self.assertIs(old_question.was_published_recently(), False)\n\n\ndef test_was_published_recently_with_recent_question(self):\n    \"\"\"\n    was_published_recently() returns True for questions whose pub_date\n    is within the last day.\n    \"\"\"\n    time = timezone.now() - datetime.timedelta(hours=23, minutes=59, seconds=59)\n    recent_question = Question(pub_date=time)\n    self.assertIs(recent_question.was_published_recently(), True)\n\n\nImproving our view\n\npolls/views.py\n\nclass IndexView(generic.ListView):\n    template_name = \"polls/index.html\"\n    context_object_name = \"latest_question_list\"\n\n    def get_queryset(self):\n        \"\"\"Return the last five published questions.\"\"\"\n        return Question.objects.order_by(\"-pub_date\")[:5]",
    "crumbs": [
      "Blog",
      "Django",
      "Django Basics"
    ]
  },
  {
    "objectID": "Django/django_basics.html#static-folder",
    "href": "Django/django_basics.html#static-folder",
    "title": "Django Basics",
    "section": "Static folder",
    "text": "Static folder\nFirst, create a directory called static in your polls directory. Django will look for static files there, similarly to how Django finds templates inside polls/templates/.\nDjango‚Äôs STATICFILES_FINDERS setting contains a list of finders that know how to discover static files from various sources. One of the defaults is AppDirectoriesFinder which looks for a ‚Äústatic‚Äù subdirectory in each of the INSTALLED_APPS, like the one in polls we just created. The admin site uses the same directory structure for its static files.\nWithin the static directory you have just created, create another directory called polls and within that create a file called style.css. In other words, your stylesheet should be at polls/static/polls/style.css. Because of how the AppDirectoriesFinder staticfile finder works, you can refer to this static file in Django as polls/style.css, similar to how you reference the path for templates.\n\npolls/static/polls/style.css¬∂\n\nli a {\n    color: green;\n}\n\nAdding a background-image\nNext, we‚Äôll create a subdirectory for images. Create an images subdirectory in the polls/static/polls/ directory. Inside this directory, add any image file that you‚Äôd like to use as a background. For the purposes of this tutorial, we‚Äôre using a file named background.png, which will have the full path polls/static/polls/images/background.png.\nThen, add a reference to your image in your stylesheet (polls/static/polls/style.css):\nbody {\n    background: white url(\"images/background.png\") no-repeat;\n}\n\npolls/templates/polls/index.html¬∂\n\n{% load static %}\n\n&lt;link rel=\"stylesheet\" href=\"{% static 'polls/style.css' %}\"&gt;\nThe {% static %} template tag generates the absolute URL of static files.\nThat‚Äôs all you need to do for development.\nStart the server (or restart it if it‚Äôs already running):",
    "crumbs": [
      "Blog",
      "Django",
      "Django Basics"
    ]
  },
  {
    "objectID": "Django/django_basics.html#customize-the-admin-form",
    "href": "Django/django_basics.html#customize-the-admin-form",
    "title": "Django Basics",
    "section": "Customize the admin form",
    "text": "Customize the admin form\nBy registering the Question model with admin.site.register(Question), Django was able to construct a default form representation. Often, you‚Äôll want to customize how the admin form looks and works. You‚Äôll do this by telling Django the options you want when you register the object.\nLet‚Äôs see how this works by reordering the fields on the edit form. Replace the admin.site.register(Question) line with:\n\npolls/admin.py¬∂\n\nfrom django.contrib import admin\n\nfrom .models import Choice, Question\n\n\nclass ChoiceInline(admin.TabularInline):\n    model = Choice\n    extra = 3\n\n\nclass QuestionAdmin(admin.ModelAdmin):\n    fieldsets = [\n        (None, {\"fields\": [\"question_text\"]}),\n        (\"Date information\", {\"fields\": [\"pub_date\"], \"classes\": [\"collapse\"]}),\n    ]\n    inlines = [ChoiceInline]\n    list_display = [\"question_text\", \"pub_date\", \"was_published_recently\"]\n    list_filter = [\"pub_date\"]\n\n\nadmin.site.register(Question, QuestionAdmin)\nYou can click on the column headers to sort by those values ‚Äì except in the case of the was_published_recently header, because sorting by the output of an arbitrary method is not supported. Also note that the column header for was_published_recently is, by default, the name of the method (with underscores replaced with spaces), and that each line contains the string representation of the output.\nYou can improve that by using the display() decorator on that method (in polls/models.py), as follows:\n\npolls/models.py¬∂\n\nfrom django.contrib import admin\n\n\nclass Question(models.Model):\n    # ...\n    @admin.display(\n        boolean=True,\n        ordering=\"pub_date\",\n        description=\"Published recently?\",\n    )\n    def was_published_recently(self):\n        now = timezone.now()\n        return now - datetime.timedelta(days=1) &lt;= self.pub_date &lt;= now",
    "crumbs": [
      "Blog",
      "Django",
      "Django Basics"
    ]
  },
  {
    "objectID": "Django/django_basics.html#installing-django-debug-toolbar",
    "href": "Django/django_basics.html#installing-django-debug-toolbar",
    "title": "Django Basics",
    "section": "Installing Django Debug Toolbar",
    "text": "Installing Django Debug Toolbar\npython -m pip install django-debug-toolbar",
    "crumbs": [
      "Blog",
      "Django",
      "Django Basics"
    ]
  },
  {
    "objectID": "Django/2_query_maths.html",
    "href": "Django/2_query_maths.html",
    "title": "Query Math",
    "section": "",
    "text": "This guide will cover: 1. Basic Math in Queries (F-expressions, arithmetic) 2. Aggregations & Grouping (Sum, Avg, Count, etc.) 3. Annotations (Field-level Math) 4. Window Functions (Rank, DenseRank, etc.) 5. Subquery + OuterRef (Correlated Calculations) 6. Complex Conditions (Q objects, Case/When) 7. Performance Tips 8. Real-world Examples",
    "crumbs": [
      "Blog",
      "Django",
      "Query Math"
    ]
  },
  {
    "objectID": "Django/2_query_maths.html#everything-you-need-to-know-about-query-math-in-django-orm",
    "href": "Django/2_query_maths.html#everything-you-need-to-know-about-query-math-in-django-orm",
    "title": "Query Math",
    "section": "",
    "text": "This guide will cover: 1. Basic Math in Queries (F-expressions, arithmetic) 2. Aggregations & Grouping (Sum, Avg, Count, etc.) 3. Annotations (Field-level Math) 4. Window Functions (Rank, DenseRank, etc.) 5. Subquery + OuterRef (Correlated Calculations) 6. Complex Conditions (Q objects, Case/When) 7. Performance Tips 8. Real-world Examples",
    "crumbs": [
      "Blog",
      "Django",
      "Query Math"
    ]
  },
  {
    "objectID": "Django/2_query_maths.html#basic-math-with-f-expressions",
    "href": "Django/2_query_maths.html#basic-math-with-f-expressions",
    "title": "Query Math",
    "section": "üß† 1. Basic Math with F-expressions",
    "text": "üß† 1. Basic Math with F-expressions\nF() allows referring to other fields in a model without fetching objects into Python memory.\n\nMath Operations with F()\nfrom django.db.models import F\n\n# Give every product a 10% price increase\nProduct.objects.update(price=F('price') * 1.1)\n\n# Deduct stock after an order\nProduct.objects.update(stock=F('stock') - 1)\n\n# Compare two fields in a filter\nOrder.objects.filter(total__gt=F('discount'))\n‚úÖ F-expressions avoid extra queries, are database-side, and atomic.",
    "crumbs": [
      "Blog",
      "Django",
      "Query Math"
    ]
  },
  {
    "objectID": "Django/2_query_maths.html#aggregations-summing-counting-averaging",
    "href": "Django/2_query_maths.html#aggregations-summing-counting-averaging",
    "title": "Query Math",
    "section": "üìä 2. Aggregations (Summing, Counting, Averaging)",
    "text": "üìä 2. Aggregations (Summing, Counting, Averaging)\nYou can perform aggregate math across rows.\n\nCommon Aggregation Functions\nfrom django.db.models import Sum, Avg, Count, Min, Max\n\n# Get total sales\nOrder.objects.aggregate(total_sales=Sum('total'))\n\n# Get average order value\nOrder.objects.aggregate(avg_order=Avg('total'))\n\n# Count of orders\nOrder.objects.aggregate(order_count=Count('id'))\n\n\nFilter + Aggregate Example:\nhigh_value_orders = Order.objects.filter(total__gt=1000).aggregate(\n    total=Sum('total'),\n    count=Count('id')\n)",
    "crumbs": [
      "Blog",
      "Django",
      "Query Math"
    ]
  },
  {
    "objectID": "Django/2_query_maths.html#annotations-per-row-math",
    "href": "Django/2_query_maths.html#annotations-per-row-math",
    "title": "Query Math",
    "section": "‚ûï 3. Annotations (Per-Row Math)",
    "text": "‚ûï 3. Annotations (Per-Row Math)\nannotate() adds calculated fields to each row in a queryset.\n\nExample: Calculate Revenue per Product\nfrom django.db.models import Sum, F\n\nProduct.objects.annotate(\n    revenue=F('price') * F('units_sold')\n)\n\n# Fetch revenue with product\nfor p in Product.objects.annotate(\n    revenue=F('price') * F('units_sold')\n):\n    print(p.name, p.revenue)",
    "crumbs": [
      "Blog",
      "Django",
      "Query Math"
    ]
  },
  {
    "objectID": "Django/2_query_maths.html#casewhen-for-conditional-math",
    "href": "Django/2_query_maths.html#casewhen-for-conditional-math",
    "title": "Query Math",
    "section": "ü™ù 4. Case/When for Conditional Math",
    "text": "ü™ù 4. Case/When for Conditional Math\nCase and When enable conditional logic, like SQL‚Äôs CASE ... WHEN ... THEN ... END.\n\nExample: Apply Discount Conditionally\nfrom django.db.models import Case, When, Value, F\n\nProduct.objects.annotate(\n    discounted_price=Case(\n        When(is_on_sale=True, then=F('price') * 0.8),\n        default=F('price')\n    )\n)\n\n\nAnother Example: Calculate Employee Bonus\nfrom django.db.models import IntegerField\n\nEmployee.objects.annotate(\n    bonus=Case(\n        When(sales__gte=100, then=Value(1000)),\n        When(sales__gte=50, then=Value(500)),\n        default=Value(0),\n        output_field=IntegerField()\n    )\n)",
    "crumbs": [
      "Blog",
      "Django",
      "Query Math"
    ]
  },
  {
    "objectID": "Django/2_query_maths.html#window-functions-advanced-math-by-groups",
    "href": "Django/2_query_maths.html#window-functions-advanced-math-by-groups",
    "title": "Query Math",
    "section": "üîÑ 5. Window Functions (Advanced Math by Groups)",
    "text": "üîÑ 5. Window Functions (Advanced Math by Groups)\nWindow functions perform calculations across a set of rows related to the current row.\n\nExample: Ranking Orders by Amount\nfrom django.db.models import Window\nfrom django.db.models.functions import Rank\n\nOrder.objects.annotate(\n    rank=Window(\n        expression=Rank(),\n        order_by=F('total').desc()\n    )\n)\n\n\nExample: Running Totals\nfrom django.db.models.functions import Sum\n\nOrder.objects.annotate(\n    running_total=Window(\n        expression=Sum('total'),\n        order_by='order_date'\n    )\n)\n‚úÖ Great for leaderboards, cumulative sums, partitioned aggregates.",
    "crumbs": [
      "Blog",
      "Django",
      "Query Math"
    ]
  },
  {
    "objectID": "Django/2_query_maths.html#subquery-outerref-correlated-subqueries-for-math",
    "href": "Django/2_query_maths.html#subquery-outerref-correlated-subqueries-for-math",
    "title": "Query Math",
    "section": "üî¢ 6. Subquery + OuterRef (Correlated Subqueries for Math)",
    "text": "üî¢ 6. Subquery + OuterRef (Correlated Subqueries for Math)\nUse Subquery + OuterRef for row-by-row subquery math.\n\nExample: Latest Order Amount Per Customer\nfrom django.db.models import Subquery, OuterRef\n\nlatest_order = Order.objects.filter(\n    customer=OuterRef('pk')\n).order_by('-order_date')\n\nCustomer.objects.annotate(\n    latest_order_total=Subquery(latest_order.values('total')[:1])\n)\n‚úÖ Combine with F(), Case, and Window for complex formulas.",
    "crumbs": [
      "Blog",
      "Django",
      "Query Math"
    ]
  },
  {
    "objectID": "Django/2_query_maths.html#combining-aggregation-annotation-and-filtering",
    "href": "Django/2_query_maths.html#combining-aggregation-annotation-and-filtering",
    "title": "Query Math",
    "section": "üèéÔ∏è 7. Combining Aggregation, Annotation, and Filtering",
    "text": "üèéÔ∏è 7. Combining Aggregation, Annotation, and Filtering\nYou can chain these functions for multi-layered math.\n\nExample: Total Spent Per Customer and Filtering High Spenders\nCustomer.objects.annotate(\n    total_spent=Sum('order__total')\n).filter(total_spent__gte=1000)",
    "crumbs": [
      "Blog",
      "Django",
      "Query Math"
    ]
  },
  {
    "objectID": "Django/2_query_maths.html#complex-math-expressions-functions",
    "href": "Django/2_query_maths.html#complex-math-expressions-functions",
    "title": "Query Math",
    "section": "üî® 8. Complex Math: Expressions & Functions",
    "text": "üî® 8. Complex Math: Expressions & Functions\n\nDjango Built-in Math Functions:\n\n\n\nFunction\nPurpose\n\n\n\n\nAbs\nAbsolute value (Abs(F('field')))\n\n\nCeil / Floor\nRound up / down (Ceil(F('field')))\n\n\nPower\nExponents (Power(F('field'), 2))\n\n\nSqrt\nSquare root (Sqrt(F('field')))\n\n\nLog, Exp\nLogarithm, Exponentiation\n\n\n\n\nExample: Calculate Compound Interest\nfrom django.db.models.functions import Power\n\nAccount.objects.annotate(\n    future_value=F('balance') * Power(1.05, F('years'))\n)",
    "crumbs": [
      "Blog",
      "Django",
      "Query Math"
    ]
  },
  {
    "objectID": "Django/2_query_maths.html#q-objects-andornot-conditions",
    "href": "Django/2_query_maths.html#q-objects-andornot-conditions",
    "title": "Query Math",
    "section": "üïµÔ∏è 9. Q Objects (AND/OR/NOT Conditions)",
    "text": "üïµÔ∏è 9. Q Objects (AND/OR/NOT Conditions)\nQ() objects allow complex WHERE logic.\n\nExample: Math in Filters\nfrom django.db.models import Q\n\nProduct.objects.filter(\n    Q(price__gte=100) | Q(stock__lte=10)\n)\n\n\nExample: Sales Threshold\nEmployee.objects.filter(\n    Q(sales__gte=100) & Q(region='East')\n)",
    "crumbs": [
      "Blog",
      "Django",
      "Query Math"
    ]
  },
  {
    "objectID": "Django/2_query_maths.html#performance-tips-with-orm-math",
    "href": "Django/2_query_maths.html#performance-tips-with-orm-math",
    "title": "Query Math",
    "section": "üìà 10. Performance Tips with ORM Math",
    "text": "üìà 10. Performance Tips with ORM Math\n\n\n\nTip\nWhy\n\n\n\n\nUse F() expressions\nDatabase-side math is faster\n\n\nCombine annotate() + aggregate()\nReduce query round trips\n\n\nUse select_related() / prefetch_related()\nReduce N+1 queries\n\n\nAdd indexes\nSpeed up filtering and ordering\n\n\nProfile your queries\ndjango-debug-toolbar, EXPLAIN\n\n\nAvoid unnecessary fields\nUse only() or values()",
    "crumbs": [
      "Blog",
      "Django",
      "Query Math"
    ]
  },
  {
    "objectID": "Django/2_query_maths.html#summary-of-django-query-math-tools",
    "href": "Django/2_query_maths.html#summary-of-django-query-math-tools",
    "title": "Query Math",
    "section": "‚úÖ Summary of Django Query Math Tools",
    "text": "‚úÖ Summary of Django Query Math Tools\n\n\n\n\n\n\n\nTool\nUse\n\n\n\n\nF()\nRefer to other fields, arithmetic in DB\n\n\nannotate()\nAdd calculated fields to each row\n\n\naggregate()\nCalculate sums, averages, counts across all rows\n\n\nCase / When\nConditional math and logic\n\n\nWindow\nRankings, cumulative sums, per-group aggregates\n\n\nSubquery / OuterRef\nCorrelated subqueries for row-level math\n\n\nMath Functions\nAbs, Power, Ceil, Floor, Log, Exp\n\n\nQ()\nComplex query conditions (AND, OR, NOT)",
    "crumbs": [
      "Blog",
      "Django",
      "Query Math"
    ]
  },
  {
    "objectID": "Django/2_query_maths.html#real-world-scenarios",
    "href": "Django/2_query_maths.html#real-world-scenarios",
    "title": "Query Math",
    "section": "‚ö° Real-World Scenarios",
    "text": "‚ö° Real-World Scenarios\n\n\n\nTask\nSolution\n\n\n\n\nDiscount based on quantity\nCase + When + F()\n\n\nSales leaderboard\nWindow + Rank\n\n\nLatest related record field\nOuterRef + Subquery\n\n\nCustomer lifetime value\nannotate(Sum(...))\n\n\nRunning totals by date\nWindow(Sum(...))\n\n\nTiered commissions\nCase + When + annotate()",
    "crumbs": [
      "Blog",
      "Django",
      "Query Math"
    ]
  },
  {
    "objectID": "Django/filters.html",
    "href": "Django/filters.html",
    "title": "Filters",
    "section": "",
    "text": "1. Basic Setup: Install and Configure Django Filter\n\nInstallation:\nTo use django-filter, install it via pip:\npip install django-filter\nAdd 'django_filters' to your INSTALLED_APPS in the Django settings.py:\nINSTALLED_APPS = [\n    # Other apps...\n    'django_filters',\n]\n\n\n\n2. Defining a FilterSet Class\nA FilterSet is the core class of django-filter. It defines which model fields should be available for filtering.\n\nExample: A Book Model\nfrom django.db import models\n\nclass Book(models.Model):\n    title = models.CharField(max_length=255)\n    author = models.CharField(max_length=100)\n    published_date = models.DateField()\n    price = models.DecimalField(max_digits=5, decimal_places=2)\n\n\nDefining a FilterSet:\nimport django_filters\nfrom .models import Book\n\nclass BookFilter(django_filters.FilterSet):\n    class Meta:\n        model = Book\n        fields = ['author', 'published_date', 'price']\n\n\n\n3. Using Filters with Django‚Äôs Generic Views\nDjango‚Äôs ListView or TemplateView can easily be enhanced with filtering capabilities.\n\nExample: Using Filters in a View\nfrom django.shortcuts import render\nfrom django_filters.views import FilterView\nfrom .models import Book\nfrom .filters import BookFilter\n\nclass BookListView(FilterView):\n    model = Book\n    filterset_class = BookFilter\n    template_name = 'books/book_list.html'\n\n\nDisplaying the Filter in Templates:\n&lt;form method=\"get\"&gt;\n    {{ filter.form.as_p }}\n    &lt;button type=\"submit\"&gt;Filter&lt;/button&gt;\n&lt;/form&gt;\n\n&lt;ul&gt;\n  {% for book in filter.qs %}\n    &lt;li&gt;{{ book.title }} by {{ book.author }}&lt;/li&gt;\n  {% endfor %}\n&lt;/ul&gt;\n\n\n\n4. Using Filters with Django REST Framework (ModelViewSet)\nIn Django REST Framework (DRF), you can easily integrate filters with your API endpoints using ModelViewSet and the DjangoFilterBackend.\n\nSteps to Enable Filtering in DRF:\n\nAdd django_filters to DRF Configuration: In your settings.py file, add DjangoFilterBackend to DEFAULT_FILTER_BACKENDS:\n\nREST_FRAMEWORK = {\n    'DEFAULT_FILTER_BACKENDS': ['django_filters.rest_framework.DjangoFilterBackend']\n}\n\nCreate a FilterSet: Using the earlier BookFilter example:\n\nimport django_filters\nfrom .models import Book\n\nclass BookFilter(django_filters.FilterSet):\n    min_price = django_filters.NumberFilter(field_name=\"price\", lookup_expr='gte')\n    max_price = django_filters.NumberFilter(field_name=\"price\", lookup_expr='lte')\n\n    class Meta:\n        model = Book\n        fields = ['author', 'published_date', 'min_price', 'max_price']\n\nIntegrate FilterSet with ModelViewSet:\n\nfrom rest_framework import viewsets\nfrom django_filters.rest_framework import DjangoFilterBackend\nfrom .models import Book\nfrom .serializers import BookSerializer\nfrom .filters import BookFilter\n\nclass BookViewSet(viewsets.ModelViewSet):\n    queryset = Book.objects.all()\n    serializer_class = BookSerializer\n    filter_backends = [DjangoFilterBackend]\n    filterset_class = BookFilter\n\n\nExample Query Parameters in API:\nYou can now filter books by passing query parameters like:\n/api/books/?author=John&min_price=10&max_price=50\nThis URL filters books written by ‚ÄúJohn‚Äù with a price between 10 and 50.\n\n\n\n5. Advanced Filters\n\nCustom Filters:\nFor more advanced use cases, you can define custom filters. For example, to filter by a date range:\nclass BookFilter(django_filters.FilterSet):\n    date_range = django_filters.DateFromToRangeFilter(field_name=\"published_date\")\n\n    class Meta:\n        model = Book\n        fields = ['author', 'date_range']\n\n\nUsing Different Lookups:\nYou can apply different lookup expressions, such as: - exact: Matches an exact value. - iexact: Case-insensitive exact match. - contains: Checks if a field contains a substring. - gte: Greater than or equal. - lte: Less than or equal.\nclass BookFilter(django_filters.FilterSet):\n    title_contains = django_filters.CharFilter(field_name=\"title\", lookup_expr='icontains')\n\n\n\n6. Pagination with Filters\nDjango Filter works well with Django‚Äôs built-in pagination. You can paginate the filtered results in both class-based and function-based views.\n\nExample with Pagination in Function-Based View:\nfrom django.core.paginator import Paginator\n\ndef book_list(request):\n    books = Book.objects.all()\n    filter = BookFilter(request.GET, queryset=books)\n    paginator = Paginator(filter.qs, 10)  # Show 10 books per page\n    page = request.GET.get('page')\n    books = paginator.get_page(page)\n    return render(request, 'books/book_list.html', {'filter': filter, 'books': books})\n\n\n\n7. Performance Considerations\n\nLarge Querysets: Filtering large datasets can be computationally expensive. If you expect heavy use of filters on large datasets, you may want to optimize the queries by adding database indexes on fields being filtered.\nComplex Queries: If your filters are complex (e.g., involving joins across multiple tables), consider writing custom queryset methods or optimizing the queries to improve performance.\n\n\n\n8. Best Practices for Django Filters\n\nUse Filters Sparingly: Avoid overcomplicating views by adding too many filters. Provide users with the most relevant filter options.\nCache Filter Results: If filtering is used frequently, caching the filtered querysets can greatly improve performance.\nPaginate Large Querysets: Always paginate filtered querysets to avoid slow rendering times on large datasets.\nCombine Filters and Search: For a more flexible user experience, consider combining filters with a search functionality using Django‚Äôs Q objects or a full-text search tool.\n\n\n\n\n\n Back to top",
    "crumbs": [
      "Blog",
      "Django",
      "Filters"
    ]
  },
  {
    "objectID": "Django/0_users.html",
    "href": "Django/0_users.html",
    "title": "User Models",
    "section": "",
    "text": "Django comes with a built-in user model, User, which is located in the django.contrib.auth.models module. This model provides several fields and methods to manage users, such as:\n\nusername\nfirst_name\nlast_name\nemail\npassword\nis_staff\nis_active\nis_superuser\nlast_login\ndate_joined\n\n\n\nTo create an admin/superuser, use the createsuperuser management command: &gt; This command prompts you to enter a username, email, and password.\npython manage.py createsuperuser\n\n## Authenticating Users\n\n&gt; Django provides an `authenticate()` function in `django.contrib.auth` to verify user credentials:\n\n```python\nfrom django.contrib.auth import authenticate\n\nuser = authenticate(username='john', password='secret')\nif user is not None:\n    # A backend authenticated the credentials\nelse:\n    # No backend authenticated the credentials\n\n\n\n\nTo log in a user, use the login() function from django.contrib.auth\n\nfrom django.contrib.auth import login\n\nlogin(request, user)\n\n\n\n\nTo log out a user, use the logout() function\n\nfrom django.contrib.auth import logout\n\nlogout(request)",
    "crumbs": [
      "Blog",
      "Django",
      "User Models"
    ]
  },
  {
    "objectID": "Django/0_users.html#default-user-model",
    "href": "Django/0_users.html#default-user-model",
    "title": "User Models",
    "section": "",
    "text": "Django comes with a built-in user model, User, which is located in the django.contrib.auth.models module. This model provides several fields and methods to manage users, such as:\n\nusername\nfirst_name\nlast_name\nemail\npassword\nis_staff\nis_active\nis_superuser\nlast_login\ndate_joined\n\n\n\nTo create an admin/superuser, use the createsuperuser management command: &gt; This command prompts you to enter a username, email, and password.\npython manage.py createsuperuser\n\n## Authenticating Users\n\n&gt; Django provides an `authenticate()` function in `django.contrib.auth` to verify user credentials:\n\n```python\nfrom django.contrib.auth import authenticate\n\nuser = authenticate(username='john', password='secret')\nif user is not None:\n    # A backend authenticated the credentials\nelse:\n    # No backend authenticated the credentials\n\n\n\n\nTo log in a user, use the login() function from django.contrib.auth\n\nfrom django.contrib.auth import login\n\nlogin(request, user)\n\n\n\n\nTo log out a user, use the logout() function\n\nfrom django.contrib.auth import logout\n\nlogout(request)",
    "crumbs": [
      "Blog",
      "Django",
      "User Models"
    ]
  },
  {
    "objectID": "Django/0_users.html#custom-user-model",
    "href": "Django/0_users.html#custom-user-model",
    "title": "User Models",
    "section": "Custom User Model",
    "text": "Custom User Model\n\nDjango allows you to customize the user model by extending the base model or by creating a completely new one. This is especially useful if you need to add extra fields or change the behavior of the user model.\n\n\nExtending the Default User Model\n\nIf you only need to add a few extra fields to the existing user model, you can extend AbstractUser\n\nfrom django.contrib.auth.models import AbstractUser\n\nclass CustomUser(AbstractUser):\n    bio = models.TextField(max_length=500, blank=True)\n\n\nCreating a Custom User Model\n\nIf you need more control over the user model, you can create a custom user model by extending AbstractBaseUser and PermissionsMixin:\n\n\nUserManager: djangos default user manager\nBaseUserManager: custom\nAbstractUser: djangos default user model\nAbstractBaseUser: custom\nPermissionsMixin: all the methods for django permission model\n\nfrom django.contrib.auth.models import AbstractBaseUser, BaseUserManager, PermissionsMixin\nfrom django.db import models\n\nclass CustomUserManager(BaseUserManager):\n    def create_user(self, email, password=None, **extra_fields):\n        if not email:\n            raise ValueError('The Email field must be set')\n        if not password:\n            raise ValueError('The Password field must be set')\n        email = self.normalize_email(email)\n        user = self.model(email=email, **extra_fields)\n        user.set_password(password)\n        user.save(using=self._db)\n        return user\n\n    def create_superuser(self, email, password=None, **extra_fields):\n        extra_fields.setdefault('is_staff', True)\n        extra_fields.setdefault('is_superuser', True)\n\n        if extra_fields.get('is_staff') is not True:\n            raise ValueError('Superuser must have is_staff=True.')\n        if extra_fields.get('is_superuser') is not True:\n            raise ValueError('Superuser must have is_superuser=True.')\n\n        return self.create_user(email, password, **extra_fields)\n\nclass CustomUser(AbstractBaseUser, PermissionsMixin):\n    email = models.EmailField(unique=True)\n    first_name = models.CharField(max_length=30, blank=True)\n    last_name = models.CharField(max_length=30, blank=True)\n    date_joined = models.DateTimeField(auto_now_add=True)\n    is_active = models.BooleanField(default=True)\n    is_staff = models.BooleanField(default=False)\n\n    objects = CustomUserManager()\n\n    USERNAME_FIELD = 'email'\n    REQUIRED_FIELDS = ['first_name', 'last_name']\n\n    def __str__(self):\n        return self.email\n\n\nUsing the Custom User Model\n\nTo use the custom user model, update the AUTH_USER_MODEL setting in your settings.py\n\nAUTH_USER_MODEL = 'yourapp.CustomUser'\n\n\nMigrating to a Custom User Model\nSwitching to a custom user model after running migrate can be complex. It‚Äôs generally recommended to set up the custom user model at the start of your project. If you need to switch to a custom user model later, you may need to: - Create a new model. - Write custom migration scripts to handle the transition. - Update all references to the old user model.\n\n\nUser Managers\nCustom user models often require a custom manager. The manager is responsible for creating users and superusers.\n\ncreate_user(): Method to create a regular user.\ncreate_superuser(): Method to create a superuser.\n\nThe custom manager should inherit from BaseUserManager.\n\n\nExample of Custom User Manager\nclass CustomUserManager(BaseUserManager):\n    def create_user(self, email, password=None, **extra_fields):\n        # Implementation here...\n\n    def create_superuser(self, email, password=None, **extra_fields):\n        # Implementation here...",
    "crumbs": [
      "Blog",
      "Django",
      "User Models"
    ]
  },
  {
    "objectID": "Django/0_users.html#user-authentication-backends",
    "href": "Django/0_users.html#user-authentication-backends",
    "title": "User Models",
    "section": "User Authentication Backends",
    "text": "User Authentication Backends\nDjango uses authentication backends to verify credentials. The default backend is ModelBackend, which authenticates against username and password.\nYou can create custom authentication backends by subclassing BaseBackend\nfrom django.contrib.auth.backends import BaseBackend\n\nclass EmailBackend(BaseBackend):\n    def authenticate(self, request, username=None, password=None, **kwargs):\n        try:\n            user = CustomUser.objects.get(email=username)\n        except CustomUser.DoesNotExist:\n            return None\n\n        if user.check_password(password):\n            return user\n        return None\n\n    def get_user(self, user_id):\n        try:\n            return CustomUser.objects.get(pk=user_id)\n        except CustomUser.DoesNotExist:\n            return None\n\nTo use the custom backend, add it to AUTHENTICATION_BACKENDS in settings.py:\n\nAUTHENTICATION_BACKENDS = ['yourapp.backends.EmailBackend']",
    "crumbs": [
      "Blog",
      "Django",
      "User Models"
    ]
  },
  {
    "objectID": "Django/0_users.html#signals",
    "href": "Django/0_users.html#signals",
    "title": "User Models",
    "section": "Signals",
    "text": "Signals\n\nDjango signals can be used to perform actions based on user-related events, such as user creation, login, or logout.\n\n\nExample of Using Signals\nfrom django.contrib.auth.models import User\nfrom django.db.models.signals import post_save\nfrom django.dispatch import receiver\n\n@receiver(post_save, sender=User)\ndef create_user_profile(sender, instance, created, **kwargs):\n    if created:\n        Profile.objects.create(user=instance)",
    "crumbs": [
      "Blog",
      "Django",
      "User Models"
    ]
  },
  {
    "objectID": "Django/managers_and_querysets.html",
    "href": "Django/managers_and_querysets.html",
    "title": "Managers and QuerySets",
    "section": "",
    "text": "1. What are Managers in Django?\nA manager in Django is the interface through which database query operations are provided to Django models. Every model in Django has at least one manager, and by default, Django provides a Manager object called objects.\n\na. Default Manager\nBy default, every model has a manager named objects, which allows you to interact with the model‚Äôs database records.\n# Example model\nclass Book(models.Model):\n    title = models.CharField(max_length=100)\n    author = models.CharField(max_length=100)\n    published_date = models.DateField()\n\n# Using the default manager to query the database\nbooks = Book.objects.all()  # Retrieves all books\nbook = Book.objects.get(id=1)  # Retrieves a specific book by ID\n\n\nb. Custom Manager\nYou can create a custom manager to encapsulate logic specific to your model, allowing for more readable and reusable code.\n# Custom manager\nclass BookManager(models.Manager):\n    def published_last_year(self):\n        last_year = timezone.now().year - 1\n        return self.filter(published_date__year=last_year)\n\n# Using a custom manager\nclass Book(models.Model):\n    title = models.CharField(max_length=100)\n    author = models.CharField(max_length=100)\n    published_date = models.DateField()\n\n    objects = BookManager()  # Use the custom manager\n\n# Using the custom manager method\nlast_year_books = Book.objects.published_last_year()\n\n\n\n2. Creating Custom Managers\nDjango allows you to define custom managers to encapsulate common queries, making your code more modular and readable. A custom manager can be defined by subclassing models.Manager.\n\na. Basic Custom Manager\nclass PublishedBookManager(models.Manager):\n    def get_queryset(self):\n        # Override the default get_queryset method to return only published books\n        return super().get_queryset().filter(published_date__isnull=False)\n\n# Using the custom manager in a model\nclass Book(models.Model):\n    title = models.CharField(max_length=100)\n    author = models.CharField(max_length=100)\n    published_date = models.DateField()\n\n    # Define two managers: a default manager and a custom manager\n    objects = models.Manager()  # Default manager\n    published = PublishedBookManager()  # Custom manager for published books\nIn this example: - Book.objects.all() will return all books. - Book.published.all() will return only books that have a published_date.\n\n\nb. Multiple Managers\nYou can define multiple managers in a single model to access different sets of query logic.\nclass Book(models.Model):\n    title = models.CharField(max_length=100)\n    author = models.CharField(max_length=100)\n    published_date = models.DateField()\n\n    # Default and custom managers\n    objects = models.Manager()  # Default manager\n    published = PublishedBookManager()  # Custom manager\n\n\n\n3. Querying Methods\n\n1. Basic Retrieval and Querying Methods\n\nall(): Retrieves all records from the database for that model.\nfilter(**kwargs): Returns a new QuerySet containing objects that match the given lookup parameters.\nexclude(**kwargs): Returns a new QuerySet that excludes objects that match the given lookup parameters.\nget(**kwargs): Returns a single object matching the given lookup parameters. Raises DoesNotExist if no object is found and MultipleObjectsReturned if more than one object matches.\nfirst(): Returns the first object in the QuerySet, or None if the QuerySet is empty.\nlast(): Returns the last object in the QuerySet, or None if the QuerySet is empty.\n\n\n\n2. Aggregation and Counting\n\ncount(): Returns the number of objects in the QuerySet.\naggregate(**kwargs): Returns a dictionary with the results of aggregating over the QuerySet.\n\n\n\n3. Existence Check\n\nexists(): Returns True if the QuerySet contains any results, and False if it is empty.\n\n\n\n4. Creation and Deletion\n\ncreate(**kwargs): Creates and saves a new object, returning the created object.\nbulk_create(objs, batch_size=None, ignore_conflicts=False): Inserts multiple objects into the database in a single query.\nbulk_update(objs, fields, batch_size=None): Updates multiple objects in a single query.\nget_or_create(**kwargs): Retrieves an object matching the given lookup parameters. If no matching object is found, it creates a new one with the provided defaults.\nupdate_or_create(**kwargs): Updates an object matching the given lookup parameters, creating one if necessary.\ndelete(): Deletes all objects in the QuerySet (returns the number of objects deleted and a dictionary with details).\n\n\n\n5. Advanced Querying\n\nraw(raw_query, params=None, translations=None): Executes a raw SQL query and returns a RawQuerySet instance.\nextra(select=None, where=None, params=None, tables=None, order_by=None, select_params=None): Adds extra SQL fragments to the query (deprecated in Django 3.1+).\n\n\n\n6. Date and Time Methods\n\ndates(field_name, kind, order='ASC'): Returns a QuerySet of all available dates for the specified field.\ndatetimes(field_name, kind, order='ASC', tzinfo=None): Returns a QuerySet of all available datetimes for the specified field.\n\n\n\n7. Distinct and Ordering\n\ndistinct(): Returns a new QuerySet with distinct results.\norder_by(*field_names): Orders the QuerySet by the given fields.\nreverse(): Reverses the order of the QuerySet.\n\n\n\n8. Optimization and Caching\n\nselect_related(*fields): Creates an SQL join and includes related objects in the QuerySet.\nprefetch_related(*lookups): Performs a separate lookup for each relationship and joins them in Python, which is more efficient for many-to-many relationships.\nonly(*fields): Loads only the specified fields.\ndefer(*fields): Defers the loading of specified fields until they are accessed.\n\n\n\n9. Union, Intersection, and Difference\n\nunion(*other_qs, all=False): Combines QuerySet objects using SQL UNION.\nintersection(*other_qs): Combines QuerySet objects using SQL INTERSECT.\ndifference(*other_qs): Combines QuerySet objects using SQL EXCEPT.\n\n\n\n10. Boolean and None Operations\n\nnone(): Returns an empty QuerySet.\n\n\n\n11. Custom Managers\nYou can create your own custom manager by subclassing models.Manager and adding custom methods:\nclass CustomManager(models.Manager):\n    def active(self):\n        return self.filter(active=True)\n\nclass MyModel(models.Model):\n    name = models.CharField(max_length=100)\n    active = models.BooleanField(default=True)\n    \n    # Use the custom manager\n    objects = CustomManager()\n\n\n12. Using Managers\n# Using built-in manager methods\nall_objects = MyModel.objects.all()\nfiltered_objects = MyModel.objects.filter(name__icontains=\"example\")\n\n# Using a custom manager method\nactive_objects = MyModel.objects.active()\nThese methods make Django‚Äôs ORM powerful and flexible, allowing for easy and expressive database queries.\n\n\n\n4. Manager Methods vs QuerySet Methods\n\nManager Methods: Manager methods are useful when you want to return data that does not require chaining or modifying the base QuerySet.\nQuerySet Methods: QuerySet methods are ideal when you want to create reusable filtering logic that can be chained with other QuerySet methods.\n\n\nWhen to Use Each:\n\nUse manager methods when the method represents an action that doesn‚Äôt require chaining (e.g., creating objects or counting objects).\nUse custom QuerySet methods when you want to filter or manipulate a set of results and keep the option of chaining other QuerySet methods.\n\n\n\n\n5. Manager and QuerySet Best Practices\n\na. Keep Business Logic in Managers and QuerySets\nEncapsulate complex queries or business logic inside custom managers and QuerySets to make your views and templates cleaner.\n\n\nb. Use get_queryset() Wisely\nAlways return a QuerySet from the get_queryset() method, as it allows you to further modify the query (e.g., chaining filters, ordering).\n\n\nc.¬†Leverage Lazy Evaluation\nDjango QuerySets are lazily evaluated, so you can build complex queries without immediately hitting the database. However, ensure queries are evaluated efficiently by minimizing unnecessary evaluations.\n\n\nd.¬†Avoid Logic in Views\nInstead of placing filtering and querying logic in views, use custom managers or QuerySets to encapsulate and reuse this logic across your application.\n\n\ne. Chaining Queries\nWhen creating custom QuerySet methods, ensure they return a QuerySet so that you can continue to chain additional filters and operations.\n\n\n\n\n\n Back to top",
    "crumbs": [
      "Blog",
      "Django",
      "Managers and QuerySets"
    ]
  },
  {
    "objectID": "Django/1_drf_basic.html",
    "href": "Django/1_drf_basic.html",
    "title": "DRF Basic",
    "section": "",
    "text": "pip install djangorestframework\npip install markdown       # Markdown support for the browsable API.\npip install django-filter  # Filtering suppor\nAdd rest_framework to your INSTALLED_APPS setting.\nINSTALLED_APPS = [\n    ...\n    'rest_framework',\n]\nAdd the following to your root urls.py file.\n\nurlpatterns = [\n    ...\n    path('api-auth/', include('rest_framework.urls'))\n]",
    "crumbs": [
      "Blog",
      "Django",
      "DRF Basic"
    ]
  },
  {
    "objectID": "Django/1_drf_basic.html#installation",
    "href": "Django/1_drf_basic.html#installation",
    "title": "DRF Basic",
    "section": "",
    "text": "pip install djangorestframework\npip install markdown       # Markdown support for the browsable API.\npip install django-filter  # Filtering suppor\nAdd rest_framework to your INSTALLED_APPS setting.\nINSTALLED_APPS = [\n    ...\n    'rest_framework',\n]\nAdd the following to your root urls.py file.\n\nurlpatterns = [\n    ...\n    path('api-auth/', include('rest_framework.urls'))\n]",
    "crumbs": [
      "Blog",
      "Django",
      "DRF Basic"
    ]
  },
  {
    "objectID": "Django/1_drf_basic.html#example",
    "href": "Django/1_drf_basic.html#example",
    "title": "DRF Basic",
    "section": "Example",
    "text": "Example\nAny global settings for a REST framework API are kept in a single configuration dictionary named REST_FRAMEWORK. Start off by adding the following to your settings.py module:\nREST_FRAMEWORK = {\n    # Use Django's standard `django.contrib.auth` permissions,\n    # or allow read-only access for unauthenticated users.\n    'DEFAULT_PERMISSION_CLASSES': [\n        'rest_framework.permissions.DjangoModelPermissionsOrAnonReadOnly'\n    ]\n}\nHere‚Äôs our project‚Äôs root urls.py module:\nfrom django.urls import path, include\nfrom django.contrib.auth.models import User\nfrom rest_framework import routers, serializers, viewsets\n\n# Serializers define the API representation.\nclass UserSerializer(serializers.HyperlinkedModelSerializer):\n    class Meta:\n        model = User\n        fields = ['url', 'username', 'email', 'is_staff']\n\n# ViewSets define the view behavior.\nclass UserViewSet(viewsets.ModelViewSet):\n    queryset = User.objects.all()\n    serializer_class = UserSerializer\n\n# Routers provide an easy way of automatically determining the URL conf.\nrouter = routers.DefaultRouter()\nrouter.register(r'users', UserViewSet)\n\n# Wire up our API using automatic URL routing.\n# Additionally, we include login URLs for the browsable API.\nurlpatterns = [\n    path('', include(router.urls)),\n    path('api-auth/', include('rest_framework.urls', namespace='rest_framework'))\n]",
    "crumbs": [
      "Blog",
      "Django",
      "DRF Basic"
    ]
  },
  {
    "objectID": "Django/serialization.html",
    "href": "Django/serialization.html",
    "title": "Serialization",
    "section": "",
    "text": "Model -&gt; Serializer -&gt; View -&gt; URL -&gt; Project URL",
    "crumbs": [
      "Blog",
      "Django",
      "Serialization"
    ]
  },
  {
    "objectID": "Django/serialization.html#basic-config",
    "href": "Django/serialization.html#basic-config",
    "title": "Serialization",
    "section": "Basic config",
    "text": "Basic config\nclass ClientSerializer(serializers.ModelSerializer):\n    # practitioners = PractitionerSerializer(many=True, read_only=True)\n\n    class Meta:\n        model = Client\n        fields = '__all__'",
    "crumbs": [
      "Blog",
      "Django",
      "Serialization"
    ]
  },
  {
    "objectID": "Django/serialization.html#adding-custom-fields",
    "href": "Django/serialization.html#adding-custom-fields",
    "title": "Serialization",
    "section": "Adding Custom Fields",
    "text": "Adding Custom Fields\nclass PractitionerSerializer(serializers.ModelSerializer):\n    client_ids = serializers.PrimaryKeyRelatedField(many=True, read_only=True, source='clients')\n\n    class Meta:\n        model = Practitioner\n        fields = '__all__'",
    "crumbs": [
      "Blog",
      "Django",
      "Serialization"
    ]
  },
  {
    "objectID": "Django/serialization.html#adding-relations-fields",
    "href": "Django/serialization.html#adding-relations-fields",
    "title": "Serialization",
    "section": "Adding Relations Fields",
    "text": "Adding Relations Fields\nclass QuestionnaireSerializer(serializers.ModelSerializer):\n    questions = QuestionSerializer(many=True, read_only=True)\n\n    class Meta:\n        model = Questionnaire\n        fields = '__all__'",
    "crumbs": [
      "Blog",
      "Django",
      "Serialization"
    ]
  },
  {
    "objectID": "Django/3_drf_tutorial.html",
    "href": "Django/3_drf_tutorial.html",
    "title": "DRF Tutorial",
    "section": "",
    "text": "mkdir tut_drf2\npython3 -m venv env\nsource env/bin/activate\npip install django\npip install djangorestframework\npip install pygments  # We'll be using this for the code highlighting\ndjango-admin startproject tut2\ncd tut2\npython manage.py startapp snippets",
    "crumbs": [
      "Blog",
      "Django",
      "DRF Tutorial"
    ]
  },
  {
    "objectID": "Django/3_drf_tutorial.html#getting-started",
    "href": "Django/3_drf_tutorial.html#getting-started",
    "title": "DRF Tutorial",
    "section": "",
    "text": "mkdir tut_drf2\npython3 -m venv env\nsource env/bin/activate\npip install django\npip install djangorestframework\npip install pygments  # We'll be using this for the code highlighting\ndjango-admin startproject tut2\ncd tut2\npython manage.py startapp snippets",
    "crumbs": [
      "Blog",
      "Django",
      "DRF Tutorial"
    ]
  },
  {
    "objectID": "Django/3_drf_tutorial.html#tutorialsettings.py",
    "href": "Django/3_drf_tutorial.html#tutorialsettings.py",
    "title": "DRF Tutorial",
    "section": "tutorial/settings.py",
    "text": "tutorial/settings.py\n\nedit\n\nINSTALLED_APPS = [\n    ...\n    'rest_framework',\n    'snippets',\n]\n\nadd\n\nREST_FRAMEWORK = {\n    'DEFAULT_PAGINATION_CLASS': 'rest_framework.pagination.PageNumberPagination',\n    'PAGE_SIZE': 10\n}\n\npython manage.py makemigrations snippets\npython manage.py migrate snippets",
    "crumbs": [
      "Blog",
      "Django",
      "DRF Tutorial"
    ]
  },
  {
    "objectID": "Django/3_drf_tutorial.html#snippetsmodel.py",
    "href": "Django/3_drf_tutorial.html#snippetsmodel.py",
    "title": "DRF Tutorial",
    "section": "snippets/model.py",
    "text": "snippets/model.py\nfrom django.db import models\nfrom pygments.lexers import get_all_lexers\nfrom pygments.styles import get_all_styles\nfrom pygments.lexers import get_lexer_by_name\nfrom pygments.formatters.html import HtmlFormatter\nfrom pygments import highlight\n\nLEXERS = [item for item in get_all_lexers() if item[1]]\nLANGUAGE_CHOICES = sorted([(item[1][0], item[0]) for item in LEXERS])\nSTYLE_CHOICES = sorted([(item, item) for item in get_all_styles()])\n\n\nclass Snippet(models.Model):\n    created = models.DateTimeField(auto_now_add=True)\n    title = models.CharField(max_length=100, blank=True, default='')\n    code = models.TextField()\n    linenos = models.BooleanField(default=False)\n    language = models.CharField(choices=LANGUAGE_CHOICES, default='python', max_length=100)\n    style = models.CharField(choices=STYLE_CHOICES, default='friendly', max_length=100)\n    owner = models.ForeignKey('auth.User', related_name='snippets', on_delete=models.CASCADE)\n    highlighted = models.TextField()\n    class Meta:\n        ordering = ['created']\n        \n    def save(self, *args, **kwargs):\n        \"\"\"\n        Use the `pygments` library to create a highlighted HTML\n        representation of the code snippet.\n        \"\"\"\n        lexer = get_lexer_by_name(self.language)\n        linenos = 'table' if self.linenos else False\n        options = {'title': self.title} if self.title else {}\n        formatter = HtmlFormatter(style=self.style, linenos=linenos,\n                                full=True, **options)\n        self.highlighted = highlight(self.code, lexer, formatter)\n        super().save(*args, **kwargs)",
    "crumbs": [
      "Blog",
      "Django",
      "DRF Tutorial"
    ]
  },
  {
    "objectID": "Django/3_drf_tutorial.html#snippetsurls.py",
    "href": "Django/3_drf_tutorial.html#snippetsurls.py",
    "title": "DRF Tutorial",
    "section": "snippets/urls.py",
    "text": "snippets/urls.py\nfrom django.urls import path\nfrom rest_framework.urlpatterns import format_suffix_patterns\nfrom snippets import views\n\n# API endpoints\nurlpatterns = format_suffix_patterns([\n    path('', views.api_root),\n    path('snippets/',\n        views.SnippetList.as_view(),\n        name='snippet-list'),\n    path('snippets/&lt;int:pk&gt;/',\n        views.SnippetDetail.as_view(),\n        name='snippet-detail'),\n    path('snippets/&lt;int:pk&gt;/highlight/',\n        views.SnippetHighlight.as_view(),\n        name='snippet-highlight'),\n    path('users/',\n        views.UserList.as_view(),\n        name='user-list'),\n    path('users/&lt;int:pk&gt;/',\n        views.UserDetail.as_view(),\n        name='user-detail')\n])",
    "crumbs": [
      "Blog",
      "Django",
      "DRF Tutorial"
    ]
  },
  {
    "objectID": "Django/3_drf_tutorial.html#tut2urls.py",
    "href": "Django/3_drf_tutorial.html#tut2urls.py",
    "title": "DRF Tutorial",
    "section": "tut2/urls.py",
    "text": "tut2/urls.py\n\nfrom django.contrib import admin\nfrom django.urls import path, include\n\nurlpatterns = [\n    path('admin/', admin.site.urls),\n    path('', include('snippets.urls')),\n]\n\nurlpatterns += [\n    path('api-auth/', include('rest_framework.urls')),\n]",
    "crumbs": [
      "Blog",
      "Django",
      "DRF Tutorial"
    ]
  },
  {
    "objectID": "Django/3_drf_tutorial.html#snippetsviews.py",
    "href": "Django/3_drf_tutorial.html#snippetsviews.py",
    "title": "DRF Tutorial",
    "section": "snippets/views.py",
    "text": "snippets/views.py\nfrom snippets.models import Snippet\nfrom snippets.serializers import SnippetSerializer\nfrom rest_framework import generics\nfrom rest_framework import permissions\nfrom snippets.permissions import IsOwnerOrReadOnly\n\nclass SnippetList(generics.ListCreateAPIView):\n    permission_classes = [permissions.IsAuthenticatedOrReadOnly,\n                      IsOwnerOrReadOnly]\n    queryset = Snippet.objects.all()\n    serializer_class = SnippetSerializer\n    def perform_create(self, serializer):\n        serializer.save(owner=self.request.user)\n\nclass SnippetDetail(generics.RetrieveUpdateDestroyAPIView):\n    permission_classes = [permissions.IsAuthenticatedOrReadOnly,\n                      IsOwnerOrReadOnly]\n    queryset = Snippet.objects.all()\n    serializer_class = SnippetSerializer\n    \n    \nfrom django.contrib.auth.models import User\nfrom snippets.serializers import UserSerializer\n\nclass UserList(generics.ListAPIView):\n    queryset = User.objects.all()\n    serializer_class = UserSerializer\n\n\nclass UserDetail(generics.RetrieveAPIView):\n    queryset = User.objects.all()\n    serializer_class = UserSerializer\n    \n    \nfrom rest_framework.decorators import api_view\nfrom rest_framework.response import Response\nfrom rest_framework.reverse import reverse\n\n\n@api_view(['GET'])\ndef api_root(request, format=None):\n    return Response({\n        'users': reverse('user-list', request=request, format=format),\n        'snippets': reverse('snippet-list', request=request, format=format)\n    })\n    \nfrom rest_framework import renderers\n\nclass SnippetHighlight(generics.GenericAPIView):\n    queryset = Snippet.objects.all()\n    renderer_classes = [renderers.StaticHTMLRenderer]\n\n    def get(self, request, *args, **kwargs):\n        snippet = self.get_object()\n        return Response(snippet.highlighted)",
    "crumbs": [
      "Blog",
      "Django",
      "DRF Tutorial"
    ]
  },
  {
    "objectID": "Django/3_drf_tutorial.html#snippetsserializers.py",
    "href": "Django/3_drf_tutorial.html#snippetsserializers.py",
    "title": "DRF Tutorial",
    "section": "snippets/serializers.py",
    "text": "snippets/serializers.py\nfrom rest_framework import serializers\nfrom snippets.models import Snippet, LANGUAGE_CHOICES, STYLE_CHOICES\nfrom django.contrib.auth.models import User\n\n\nclass SnippetSerializer(serializers.HyperlinkedModelSerializer):\n    owner = serializers.ReadOnlyField(source='owner.username')\n    highlight = serializers.HyperlinkedIdentityField(view_name='snippet-highlight', format='html')\n\n    class Meta:\n        model = Snippet\n        fields = ['url', 'id', 'highlight', 'owner',\n                  'title', 'code', 'linenos', 'language', 'style']\n\n\nclass UserSerializer(serializers.HyperlinkedModelSerializer):\n    snippets = serializers.HyperlinkedRelatedField(many=True, view_name='snippet-detail', read_only=True)\n\n    class Meta:\n        model = User\n        fields = ['url', 'id', 'username', 'snippets']",
    "crumbs": [
      "Blog",
      "Django",
      "DRF Tutorial"
    ]
  },
  {
    "objectID": "Django/3_drf_tutorial.html#snippetspermissions.pyt",
    "href": "Django/3_drf_tutorial.html#snippetspermissions.pyt",
    "title": "DRF Tutorial",
    "section": "snippets/permissions.pyt",
    "text": "snippets/permissions.pyt\nfrom rest_framework import permissions\n\n\nclass IsOwnerOrReadOnly(permissions.BasePermission):\n    \"\"\"\n    Custom permission to only allow owners of an object to edit it.\n    \"\"\"\n\n    def has_object_permission(self, request, view, obj):\n        # Read permissions are allowed to any request,\n        # so we'll always allow GET, HEAD or OPTIONS requests.\n        if request.method in permissions.SAFE_METHODS:\n            return True\n\n        # Write permissions are only allowed to the owner of the snippet.\n        return obj.owner == request.user",
    "crumbs": [
      "Blog",
      "Django",
      "DRF Tutorial"
    ]
  },
  {
    "objectID": "Django/datatables.html",
    "href": "Django/datatables.html",
    "title": "Datatable Serverside Processing",
    "section": "",
    "text": "$('#clientTable').DataTable({\n  serverSide: true,\n  processing: true,\n  ajax: {\n    url: '/api/clients/',\n    type: 'GET',\n  },\n  columns: [\n    { data: 'first_name' },\n    { data: 'last_name' },\n    { data: 'treatment_name' },\n    { data: 'appointments_upcoming' },\n    // ...\n  ]\n});\n\nEnsure data matches the field names in your serializer.",
    "crumbs": [
      "Blog",
      "Django",
      "Datatable Serverside Processing"
    ]
  },
  {
    "objectID": "Django/datatables.html#datatables-frontend-setup",
    "href": "Django/datatables.html#datatables-frontend-setup",
    "title": "Datatable Serverside Processing",
    "section": "",
    "text": "$('#clientTable').DataTable({\n  serverSide: true,\n  processing: true,\n  ajax: {\n    url: '/api/clients/',\n    type: 'GET',\n  },\n  columns: [\n    { data: 'first_name' },\n    { data: 'last_name' },\n    { data: 'treatment_name' },\n    { data: 'appointments_upcoming' },\n    // ...\n  ]\n});\n\nEnsure data matches the field names in your serializer.",
    "crumbs": [
      "Blog",
      "Django",
      "Datatable Serverside Processing"
    ]
  },
  {
    "objectID": "Django/datatables.html#what-datatables-sends-to-the-backend",
    "href": "Django/datatables.html#what-datatables-sends-to-the-backend",
    "title": "Datatable Serverside Processing",
    "section": "üîÅ 2. What DataTables Sends to the Backend",
    "text": "üîÅ 2. What DataTables Sends to the Backend\nWhen serverSide mode is on, it sends:\n\n\n\n\n\n\n\n\nParam\nExample\nMeaning\n\n\n\n\ndraw\n1\nDraw counter\n\n\nstart\n0\nOffset for pagination\n\n\nlength\n10\nPage size\n\n\nsearch[value]\njohn\nGlobal search value\n\n\norder[0][column]\n2\nColumn index to sort on\n\n\norder[0][dir]\nasc or desc\nSorting direction\n\n\ncolumns[i][data]\ntreatment_name\nField name for column i\n\n\ncolumns[i][searchable]\ntrue\nCan this column be searched?",
    "crumbs": [
      "Blog",
      "Django",
      "Datatable Serverside Processing"
    ]
  },
  {
    "objectID": "Django/datatables.html#backend-parse-and-respond-to-datatables",
    "href": "Django/datatables.html#backend-parse-and-respond-to-datatables",
    "title": "Datatable Serverside Processing",
    "section": "‚öôÔ∏è 3. Backend: Parse and Respond to DataTables",
    "text": "‚öôÔ∏è 3. Backend: Parse and Respond to DataTables\n\nüì¶ Custom DRF Filter Backend\nfrom rest_framework.filters import BaseFilterBackend\nfrom django.db.models import Q\nimport operator\nfrom functools import reduce\n\nclass CustomDatatablesFilterBackend(BaseFilterBackend):\n    def filter_queryset(self, request, queryset, view):\n        draw = int(request.GET.get('draw', 1))\n        start = int(request.GET.get('start', 0))\n        length = int(request.GET.get('length', 10))\n\n        # Global search\n        search_value = request.GET.get('search[value]')\n        if search_value:\n            fields = [col['name'][0] for col in view.get_datatables_fields()]\n            q = reduce(operator.or_, [Q(**{f\"{field}__icontains\": search_value}) for field in fields], Q())\n            queryset = queryset.filter(q)\n\n        # Ordering\n        order_col_index = request.GET.get('order[0][column]')\n        order_dir = request.GET.get('order[0][dir]')\n        if order_col_index is not None:\n            col_name = request.GET.get(f'columns[{order_col_index}][data]')\n            if col_name:\n                order = f\"-{col_name}\" if order_dir == 'desc' else col_name\n                queryset = queryset.order_by(order)\n\n        # Pagination\n        return queryset[start:start+length]",
    "crumbs": [
      "Blog",
      "Django",
      "Datatable Serverside Processing"
    ]
  },
  {
    "objectID": "Django/datatables.html#serializer",
    "href": "Django/datatables.html#serializer",
    "title": "Datatable Serverside Processing",
    "section": "üß© 4. Serializer",
    "text": "üß© 4. Serializer\nSupport computed/annotated fields:\nclass ClientListSerializer(serializers.ModelSerializer):\n    appointments_upcoming = serializers.SerializerMethodField()\n    treatment_name = serializers.SerializerMethodField()\n\n    class Meta:\n        model = Client\n        fields = ['first_name', 'last_name', 'appointments_upcoming', 'treatment_name']\n\n    def get_appointments_upcoming(self, obj):\n        return getattr(obj, 'appointments_upcoming', 0)\n\n    def get_treatment_name(self, obj):\n        return getattr(obj, 'treatment_name', '')",
    "crumbs": [
      "Blog",
      "Django",
      "Datatable Serverside Processing"
    ]
  },
  {
    "objectID": "Django/datatables.html#viewset-with-annotated-queryset",
    "href": "Django/datatables.html#viewset-with-annotated-queryset",
    "title": "Datatable Serverside Processing",
    "section": "üßÆ 5. ViewSet with Annotated QuerySet",
    "text": "üßÆ 5. ViewSet with Annotated QuerySet\nclass ClientViewSet(viewsets.ReadOnlyModelViewSet):\n    serializer_class = ClientListSerializer\n    filter_backends = [CustomDatatablesFilterBackend]\n\n    def get_queryset(self):\n        now = timezone.now()\n        latest_treatment = Treatment.objects.filter(client=OuterRef(\"pk\")).order_by(\"-start_date\")\n\n        return Client.objects.annotate(\n            treatment_name=Subquery(latest_treatment.values(\"name\")[:1]),\n            appointments_upcoming=Count(\n                \"appointments\", filter=Q(appointments__when__gte=now)\n            )\n        )\n    \n    def get_datatables_fields(self):\n        return [\n            {\"name\": [\"first_name\"]},\n            {\"name\": [\"last_name\"]},\n            {\"name\": [\"treatment_name\"]},\n            {\"name\": [\"appointments_upcoming\"]},\n        ]",
    "crumbs": [
      "Blog",
      "Django",
      "Datatable Serverside Processing"
    ]
  },
  {
    "objectID": "Django/datatables.html#return-the-right-response-shape",
    "href": "Django/datatables.html#return-the-right-response-shape",
    "title": "Datatable Serverside Processing",
    "section": "üìä 6. Return the Right Response Shape",
    "text": "üìä 6. Return the Right Response Shape\nDataTables expects:\n{\n  \"draw\": 1,\n  \"recordsTotal\": 100,\n  \"recordsFiltered\": 25,\n  \"data\": [{...}, {...}, ...]\n}\nIf using DRF pagination, override paginate_queryset() and get_paginated_response() in a custom pagination class to return this shape.",
    "crumbs": [
      "Blog",
      "Django",
      "Datatable Serverside Processing"
    ]
  },
  {
    "objectID": "Django/datatables.html#optional-enhancements",
    "href": "Django/datatables.html#optional-enhancements",
    "title": "Datatable Serverside Processing",
    "section": "üõ†Ô∏è 7. Optional Enhancements",
    "text": "üõ†Ô∏è 7. Optional Enhancements\n\n\n\n\n\n\n\nFeature\nHow to Implement\n\n\n\n\nColumn-specific search\nParse columns[i][search][value]\n\n\nMulti-column sort\nParse all order[i] fields\n\n\nDate range filters\nUse query params like start_date_from, start_date_to\n\n\nFuzzy search\nUse __icontains, __regex, or trigram similarity\n\n\nPermissions\nRestrict queryset with .for_user(user) or custom managers\n\n\nLarge datasets\nUse values() or only() to reduce query cost",
    "crumbs": [
      "Blog",
      "Django",
      "Datatable Serverside Processing"
    ]
  },
  {
    "objectID": "Django/datatables.html#tips",
    "href": "Django/datatables.html#tips",
    "title": "Datatable Serverside Processing",
    "section": "üß† Tips",
    "text": "üß† Tips\n\nUse .annotate() for computed fields.\nAvoid N+1 queries by using select_related() and prefetch_related().\nUse Subquery() + OuterRef() to include related model fields efficiently.\nValidate fields used for filtering and sorting to avoid injection attacks.",
    "crumbs": [
      "Blog",
      "Django",
      "Datatable Serverside Processing"
    ]
  },
  {
    "objectID": "Django/datatables.html#testing-debugging",
    "href": "Django/datatables.html#testing-debugging",
    "title": "Datatable Serverside Processing",
    "section": "üß™ Testing & Debugging",
    "text": "üß™ Testing & Debugging\nEnable logging of SQL queries to debug performance:\nimport logging\nlogger = logging.getLogger('django.db.backends')\nlogger.setLevel(logging.DEBUG)\nlogger.addHandler(logging.StreamHandler())",
    "crumbs": [
      "Blog",
      "Django",
      "Datatable Serverside Processing"
    ]
  },
  {
    "objectID": "Django/0_custom_commands.html",
    "href": "Django/0_custom_commands.html",
    "title": "Custom Commands",
    "section": "",
    "text": "Inside your Django app, create a directory named management/commands/.\n\nmkdir -p myapp/management/commands/\n\n\n\n\nAdd __init__.py files to the management and commands directories to make them Python packages.\n\ntouch myapp/management/__init__.py\ntouch myapp/management/commands/__init__.py\n\n\n\n\nCreate a new Python file in the commands directory. The file name will be the command name.\n\ntouch myapp/management/commands/my_custom_command.py",
    "crumbs": [
      "Blog",
      "Django",
      "Custom Commands"
    ]
  },
  {
    "objectID": "Django/0_custom_commands.html#basic-setup",
    "href": "Django/0_custom_commands.html#basic-setup",
    "title": "Custom Commands",
    "section": "",
    "text": "Inside your Django app, create a directory named management/commands/.\n\nmkdir -p myapp/management/commands/\n\n\n\n\nAdd __init__.py files to the management and commands directories to make them Python packages.\n\ntouch myapp/management/__init__.py\ntouch myapp/management/commands/__init__.py\n\n\n\n\nCreate a new Python file in the commands directory. The file name will be the command name.\n\ntouch myapp/management/commands/my_custom_command.py",
    "crumbs": [
      "Blog",
      "Django",
      "Custom Commands"
    ]
  },
  {
    "objectID": "Django/0_custom_commands.html#writing-the-custom-command",
    "href": "Django/0_custom_commands.html#writing-the-custom-command",
    "title": "Custom Commands",
    "section": "Writing the Custom Command",
    "text": "Writing the Custom Command\n\nBasic Command Structure\n\nDefine the command by creating a subclass of BaseCommand or AppCommand from django.core.management.base\n\nfrom django.core.management.base import BaseCommand\n\nclass Command(BaseCommand):\n    help = 'Description of your custom command'\n\n    def handle(self, *args, **kwargs):\n        self.stdout.write('Executing custom command...')\n\n\nAdding Arguments\n\nAdd arguments and options to the command.\n\nfrom django.core.management.base import BaseCommand\n\nclass Command(BaseCommand):\n    help = 'Description of your custom command'\n\n    def add_arguments(self, parser):\n        parser.add_argument('arg1', type=str, help='Argument 1 description')\n        parser.add_argument('--option1', type=str, help='Option 1 description', default='default_value')\n\n    def handle(self, *args, **kwargs):\n        arg1 = kwargs['arg1']\n        option1 = kwargs['option1']\n        self.stdout.write(f'Argument: {arg1}')\n        self.stdout.write(f'Option: {option1}')\n\n\nHandling Command Logic\n\nImplement the logic inside the handle method.\n\nfrom django.core.management.base import BaseCommand\nfrom myapp.models import ExampleModel\n\nclass Command(BaseCommand):\n    help = 'Update ExampleModel instances'\n\n    def handle(self, *args, **kwargs):\n        examples = ExampleModel.objects.all()\n        for example in examples:\n            example.description = 'Updated description'\n            example.save()\n        self.stdout.write(self.style.SUCCESS('Successfully updated all ExampleModel instances'))",
    "crumbs": [
      "Blog",
      "Django",
      "Custom Commands"
    ]
  },
  {
    "objectID": "Django/0_custom_commands.html#advanced-command-features",
    "href": "Django/0_custom_commands.html#advanced-command-features",
    "title": "Custom Commands",
    "section": "Advanced Command Features",
    "text": "Advanced Command Features\n\nUsing Transactions\n\nEnsure atomicity using database transactions.\n\nfrom django.core.management.base import BaseCommand\nfrom django.db import transaction\nfrom myapp.models import ExampleModel\n\nclass Command(BaseCommand):\n    help = 'Update ExampleModel instances'\n\n    @transaction.atomic\n    def handle(self, *args, **kwargs):\n        examples = ExampleModel.objects.all()\n        for example in examples:\n            example.description = 'Updated description'\n            example.save()\n        self.stdout.write(self.style.SUCCESS('Successfully updated all ExampleModel instances'))\n\n\nError Handling\n\nImplement error handling within your command\n\nfrom django.core.management.base import BaseCommand\nfrom django.db import transaction, DatabaseError\nfrom myapp.models import ExampleModel\n\nclass Command(BaseCommand):\n    help = 'Update ExampleModel instances'\n\n    @transaction.atomic\n    def handle(self, *args, **kwargs):\n        try:\n            examples = ExampleModel.objects.all()\n            for example in examples:\n                example.description = 'Updated description'\n                example.save()\n            self.stdout.write(self.style.SUCCESS('Successfully updated all ExampleModel instances'))\n        except DatabaseError as e:\n            self.stdout.write(self.style.ERROR(f'Error updating ExampleModel instances: {str(e)}'))\n\n\nScheduling Commands\n\nUse task schedulers like cron or Windows Task Scheduler to run your custom commands at scheduled intervals.\n\n# Example cron job to run custom command every day at midnight\n0 0 * * * /path/to/your/virtualenv/bin/python /path/to/your/project/manage.py my_custom_command",
    "crumbs": [
      "Blog",
      "Django",
      "Custom Commands"
    ]
  },
  {
    "objectID": "Django/django_q.html",
    "href": "Django/django_q.html",
    "title": "django_q",
    "section": "",
    "text": "1. Core Concepts of Django-Q\n\nTask Queue: You can offload long-running or resource-heavy tasks to the background using Django-Q. These tasks are processed asynchronously without blocking the main Django app.\nScheduling: Django-Q has built-in support for periodic or scheduled tasks, similar to cron jobs.\nResult Handling: It supports tracking the result of tasks and retrieving them later.\nClusters: Django-Q operates with ‚Äúclusters‚Äù of worker processes that handle tasks in parallel, allowing you to scale task processing horizontally.\nMultiple Backends: Django-Q supports Redis, ORM, and other storage options for task persistence and broker functionality.\nFailover and Recovery: It has robust task recovery mechanisms, ensuring tasks are retried in case of failure.\n\n\n\n2. Installation\nTo install Django-Q, you can use pip:\npip install django-q\nOnce installed, add django_q to your INSTALLED_APPS in settings.py:\nINSTALLED_APPS = [\n    # Other apps...\n    'django_q',\n]\nAfter that, run the necessary migrations:\npython manage.py migrate\n\n\n3. Basic Setup\nAfter installation, configure Django-Q in settings.py. You need to define the broker, which will handle communication between Django and the background workers. Common brokers include Redis and Django ORM.\n\nExample configuration using Redis:\nQ_CLUSTER = {\n    'name': 'DjangoQCluster',\n    'workers': 4,  # Number of workers to handle tasks\n    'recycle': 500,  # How many tasks before a worker is recycled\n    'timeout': 60,  # Maximum time to wait for a task\n    'queue_limit': 50,  # Limit the number of tasks in the queue\n    'bulk': 10,  # Process tasks in bulk\n    'orm': 'default',  # Use Django ORM for task storage\n    'redis': {\n        'host': 'localhost',\n        'port': 6379,\n        'db': 0,\n    }\n}\nFor Django ORM as the broker (no external dependencies):\nQ_CLUSTER = {\n    'name': 'DjangoQCluster',\n    'workers': 4,\n    'timeout': 60,\n    'queue_limit': 50,\n    'bulk': 10,\n    'orm': 'default'  # Use Django ORM to store tasks and results\n}\n\n\n\n4. Running Django-Q\nStart Django-Q‚Äôs cluster to begin processing tasks by running:\npython manage.py qcluster\nThe cluster will spawn worker processes that consume tasks from the queue and execute them in the background.\n\n\n5. Asynchronous Tasks\nTo define an asynchronous task, you create a Python function and call it asynchronously using the async_task() function.\n\nExample:\nfrom django_q.tasks import async_task\n\ndef send_email(user_id):\n    # Send email logic here\n    print(f'Sending email to user {user_id}')\n\n# Running the task asynchronously\nasync_task('myapp.tasks.send_email', user_id)\n\nasync_task(): Schedules the function to be executed in the background.\n\n\n\nTracking Task Results\nYou can track the result of a task if needed. Use the result function to retrieve the result:\nfrom django_q.tasks import result\n\ntask_id = async_task('myapp.tasks.send_email', user_id)\n\n# Later in the code, you can fetch the result\nres = result(task_id)\nif res:\n    print(f'Task Result: {res}')\nIf the task fails, Django-Q will retry the task until it either succeeds or exceeds the retry limit.\n\n\n\n6. Scheduled Tasks\nDjango-Q has built-in support for scheduled tasks (periodic tasks). You can schedule tasks to run at specific intervals, similar to cron jobs.\n\nExample:\nfrom django_q.models import Schedule\n\n# Schedule a task to run every minute\nSchedule.objects.create(\n    func='myapp.tasks.send_email',\n    args='user_id',\n    schedule_type=Schedule.MINUTES,\n    minutes=1,\n    repeats=-1,  # Repeat indefinitely\n)\n\nSchedule.MINUTES: Schedule type to run tasks periodically (other options include Schedule.HOURLY, Schedule.DAILY, Schedule.WEEKLY).\nrepeats: Set to -1 to repeat indefinitely, or to a positive integer to repeat a fixed number of times.\n\n\n\nAvailable Schedule Types:\n\nOne-time task: Schedule.ONCE\nRepeating tasks:\n\nSchedule.MINUTES\nSchedule.HOURLY\nSchedule.DAILY\nSchedule.WEEKLY\nSchedule.MONTHLY\n\n\n\n\n\n7. Using ORM as the Broker\nIf you prefer not to use Redis or another external service, Django-Q can use the Django ORM as the broker for storing tasks. This is a great option for simpler setups or testing environments.\nTo use the ORM as the broker, update your settings:\nQ_CLUSTER = {\n    'name': 'DjangoQCluster',\n    'workers': 4,\n    'timeout': 60,\n    'queue_limit': 50,\n    'orm': 'default'  # ORM mode\n}\nTasks and results will now be stored in the database, using Django models.\n\n\n8. Task Retry and Timeout\nDjango-Q automatically retries tasks if they fail, with configurable retry limits and timeouts.\n\nTimeout: Defined in the cluster configuration (timeout key). If a task exceeds this time, it is marked as failed and retried.\nRetries: If a task fails, Django-Q retries the task based on the retry policy you define.\n\n\nExample:\nQ_CLUSTER = {\n    'timeout': 60,  # Tasks timeout after 60 seconds\n    'retry': 2,  # Retries each task twice if it fails\n}\n\n\n\n9. Task Chaining and Grouping\nYou can chain multiple tasks together or group tasks to run them in parallel.\n\nTask Chaining:\nfrom django_q.tasks import chain\n\n# Chain tasks, one task will be executed after the previous one completes\nchain('myapp.tasks.task_one', 'myapp.tasks.task_two', args=(1,))\n\n\nTask Grouping (Run in Parallel):\nfrom django_q.tasks import async_task, result_group\n\ngroup = async_task('myapp.tasks.task_one', 1, group='task_group')\nasync_task('myapp.tasks.task_two', 2, group='task_group')\n\n# Retrieve the results for the group\nresults = result_group('task_group')\nfor r in results:\n    print(f'Task Result: {r}')\n\n\n\n10. Task Priority\nDjango-Q supports priority queues, where higher priority tasks are processed before lower-priority ones.\n\nExample:\n# Set a high priority for the task\nasync_task('myapp.tasks.send_email', user_id, priority=1)\nLower numbers have higher priority (1 being the highest).\n\n\n\n11. Monitoring and Admin\nDjango-Q provides a Django Admin interface for monitoring tasks, schedules, and clusters. You can view:\n\nFailed tasks\nRunning tasks\nScheduled tasks\nTask results\n\nIn your admin.py:\nfrom django_q.admin import TaskAdmin, ScheduleAdmin\nfrom django_q.models import Task, Schedule\n\nadmin.site.register(Task, TaskAdmin)\nadmin.site.register(Schedule, ScheduleAdmin)\nThis will give you visibility into the task queue and schedules via the Django Admin.\n\n\n12. Advanced Settings\nDjango-Q comes with a variety of settings to fine-tune task processing and behavior.\n\nAdvanced Options:\nQ_CLUSTER = {\n    'name': 'DjangoQCluster',\n    'workers': 4,  # Number of worker processes\n    'timeout': 60,  # Time limit per task\n    'recycle': 500,  # Restart worker after processing this many tasks\n    'compress': True,  # Compress task data to reduce memory usage\n    'save_limit': 100,  # Only keep 100 task results in the database\n    'group_save_limit': 100,  # Limit the number of task group results\n    'queue_limit': 50,  # Maximum number of tasks in the queue\n    'cpu_affinity': 1,  # Allocate one core for worker processing\n    'log_level': 'DEBUG',  # Log level (DEBUG, INFO, WARNING, etc.)\n}\n\nrecycle: Recycles workers after a specified number of tasks to avoid memory leaks.\ncompress: Compresses task data to reduce memory footprint.\nsave_limit: Limits how many task results are saved (useful for reducing database size).\nqueue_limit: Prevents too many tasks from being queued up\n\n.\n\n\n\n13. Failover and High Availability\nDjango-Q offers failover support in case a task or worker process fails. It retries tasks and restarts failed workers as needed.\n\nDistributed Mode: You can deploy Django-Q in a distributed mode by running multiple clusters across different servers. This allows horizontal scaling and high availability.\n\n\n\n14. Logging and Debugging\nDjango-Q provides detailed logging options, which you can configure in your settings:\nQ_CLUSTER = {\n    'log_level': 'DEBUG',  # DEBUG, INFO, WARNING, ERROR\n    'log_file': '/path/to/your/logfile.log',  # Specify a log file\n}\nLogs include task execution details, errors, and retries, which can help in debugging and monitoring your task queue.\n\n\n15. Django Signals\nDjango-Q integrates with Django‚Äôs signals framework. For example, you can trigger tasks based on model signals like post_save:\nfrom django.db.models.signals import post_save\nfrom django.dispatch import receiver\nfrom django_q.tasks import async_task\nfrom myapp.models import MyModel\n\n@receiver(post_save, sender=MyModel)\ndef my_model_post_save(sender, instance, **kwargs):\n    # Trigger async task when a MyModel object is saved\n    async_task('myapp.tasks.process_data', instance.id)\n\n\nConclusion\nDjango-Q is a powerful and flexible task queue and scheduler for Django applications, providing asynchronous task execution, scheduling, and result tracking with ease. It is particularly well-suited for smaller to mid-sized projects, or as a simpler alternative to Celery, thanks to its minimal configuration requirements and built-in ORM support.\n\n\n\n\n Back to top",
    "crumbs": [
      "Blog",
      "Django",
      "django_q"
    ]
  },
  {
    "objectID": "Django/2_drf_quickstart.html",
    "href": "Django/2_drf_quickstart.html",
    "title": "DRF Quickstart",
    "section": "",
    "text": "# Create the project directory\nmkdir tutorial\ncd tutorial\n\n# Create a virtual environment to isolate our package dependencies locally\npython3 -m venv env\nsource env/bin/activate  # On Windows use `env\\Scripts\\activate`\n\n# Install Django and Django REST framework into the virtual environment\npip install djangorestframework\n\n# Set up a new project with a single application\ndjango-admin startproject tutorial .  # Note the trailing '.' character\ncd tutorial\ndjango-admin startapp quickstart\ncd ..\n\nNow sync your database for the first time:\n\npython manage.py migrate\n\nWe‚Äôll also create an initial user named admin with a password. We‚Äôll authenticate as that user later in our example.\n\npython manage.py createsuperuser --username bthek1 --email admin@gmail.com",
    "crumbs": [
      "Blog",
      "Django",
      "DRF Quickstart"
    ]
  },
  {
    "objectID": "Django/2_drf_quickstart.html#project-setup",
    "href": "Django/2_drf_quickstart.html#project-setup",
    "title": "DRF Quickstart",
    "section": "",
    "text": "# Create the project directory\nmkdir tutorial\ncd tutorial\n\n# Create a virtual environment to isolate our package dependencies locally\npython3 -m venv env\nsource env/bin/activate  # On Windows use `env\\Scripts\\activate`\n\n# Install Django and Django REST framework into the virtual environment\npip install djangorestframework\n\n# Set up a new project with a single application\ndjango-admin startproject tutorial .  # Note the trailing '.' character\ncd tutorial\ndjango-admin startapp quickstart\ncd ..\n\nNow sync your database for the first time:\n\npython manage.py migrate\n\nWe‚Äôll also create an initial user named admin with a password. We‚Äôll authenticate as that user later in our example.\n\npython manage.py createsuperuser --username bthek1 --email admin@gmail.com",
    "crumbs": [
      "Blog",
      "Django",
      "DRF Quickstart"
    ]
  },
  {
    "objectID": "Django/2_drf_quickstart.html#serializers",
    "href": "Django/2_drf_quickstart.html#serializers",
    "title": "DRF Quickstart",
    "section": "Serializers",
    "text": "Serializers\n\nFirst up we‚Äôre going to define some serializers. Let‚Äôs create a new module named tutorial/quickstart/serializers.py that we‚Äôll use for our data representations.\n\n\nNotice that we‚Äôre using hyperlinked relations in this case with HyperlinkedModelSerializer. You can also use primary key and various other relationships, but hyperlinking is good RESTful design.\n\nfrom django.contrib.auth.models import Group, User\nfrom rest_framework import serializers\n\n\nclass UserSerializer(serializers.HyperlinkedModelSerializer):\n    class Meta:\n        model = User\n        fields = ['url', 'username', 'email', 'groups']\n\n\nclass GroupSerializer(serializers.HyperlinkedModelSerializer):\n    class Meta:\n        model = Group\n        fields = ['url', 'name']",
    "crumbs": [
      "Blog",
      "Django",
      "DRF Quickstart"
    ]
  },
  {
    "objectID": "Django/2_drf_quickstart.html#views",
    "href": "Django/2_drf_quickstart.html#views",
    "title": "DRF Quickstart",
    "section": "Views",
    "text": "Views\nfrom django.contrib.auth.models import Group, User\nfrom rest_framework import permissions, viewsets\n\nfrom tutorial.quickstart.serializers import GroupSerializer, UserSerializer\n\n\nclass UserViewSet(viewsets.ModelViewSet):\n    \"\"\"\n    API endpoint that allows users to be viewed or edited.\n    \"\"\"\n    queryset = User.objects.all().order_by('-date_joined')\n    serializer_class = UserSerializer\n    permission_classes = [permissions.IsAuthenticated]\n\n\nclass GroupViewSet(viewsets.ModelViewSet):\n    \"\"\"\n    API endpoint that allows groups to be viewed or edited.\n    \"\"\"\n    queryset = Group.objects.all().order_by('name')\n    serializer_class = GroupSerializer\n    permission_classes = [permissions.IsAuthenticated]",
    "crumbs": [
      "Blog",
      "Django",
      "DRF Quickstart"
    ]
  },
  {
    "objectID": "Django/2_drf_quickstart.html#urls",
    "href": "Django/2_drf_quickstart.html#urls",
    "title": "DRF Quickstart",
    "section": "URLs",
    "text": "URLs\n\nBecause we‚Äôre using viewsets instead of views, we can automatically generate the URL conf for our API, by simply registering the viewsets with a router class.\n\n\nAgain, if we need more control over the API URLs we can simply drop down to using regular class-based views, and writing the URL conf explicitly.\n\n\nFinally, we‚Äôre including default login and logout views for use with the browsable API. That‚Äôs optional, but useful if your API requires authentication and you want to use the browsable API.\n\nfrom django.urls import include, path\nfrom rest_framework import routers\n\nfrom tutorial.quickstart import views\n\nrouter = routers.DefaultRouter()\nrouter.register(r'users', views.UserViewSet)\nrouter.register(r'groups', views.GroupViewSet)\n\n# Wire up our API using automatic URL routing.\n# Additionally, we include login URLs for the browsable API.\nurlpatterns = [\n    path('', include(router.urls)),\n    path('api-auth/', include('rest_framework.urls', namespace='rest_framework'))\n]",
    "crumbs": [
      "Blog",
      "Django",
      "DRF Quickstart"
    ]
  },
  {
    "objectID": "Django/2_drf_quickstart.html#pagination",
    "href": "Django/2_drf_quickstart.html#pagination",
    "title": "DRF Quickstart",
    "section": "Pagination",
    "text": "Pagination\n\nPagination allows you to control how many objects per page are returned. To enable it add the following lines to tutorial/settings.py\n\nREST_FRAMEWORK = {\n    'DEFAULT_PAGINATION_CLASS': 'rest_framework.pagination.PageNumberPagination',\n    'PAGE_SIZE': 10\n}",
    "crumbs": [
      "Blog",
      "Django",
      "DRF Quickstart"
    ]
  },
  {
    "objectID": "Django/2_drf_quickstart.html#settings",
    "href": "Django/2_drf_quickstart.html#settings",
    "title": "DRF Quickstart",
    "section": "Settings",
    "text": "Settings\nAdd rest_framework to your INSTALLED_APPS setting.\nINSTALLED_APPS = [\n    ...\n    'rest_framework',\n]",
    "crumbs": [
      "Blog",
      "Django",
      "DRF Quickstart"
    ]
  },
  {
    "objectID": "Django/2_drf_quickstart.html#testing-our-api",
    "href": "Django/2_drf_quickstart.html#testing-our-api",
    "title": "DRF Quickstart",
    "section": "Testing our API",
    "text": "Testing our API\npython manage.py runserver\n\nWe can now access our API, both from the command-line, using tools like curl...\n\nbash: curl -u admin -H 'Accept: application/json; indent=4' http://127.0.0.1:8000/users/\nEnter host password for user 'admin':\n{\n    \"count\": 1,\n    \"next\": null,\n    \"previous\": null,\n    \"results\": [\n        {\n            \"url\": \"http://127.0.0.1:8000/users/1/\",\n            \"username\": \"admin\",\n            \"email\": \"admin@example.com\",\n            \"groups\": []\n        }\n    ]\n}\n\nOr using the httpie, command line tool‚Ä¶\n\nbash: http -a admin http://127.0.0.1:8000/users/\nhttp: password for admin@127.0.0.1:8000:: \n$HTTP/1.1 200 OK\n...\n{\n    \"count\": 1,\n    \"next\": null,\n    \"previous\": null,\n    \"results\": [\n        {\n            \"email\": \"admin@example.com\",\n            \"groups\": [],\n            \"url\": \"http://127.0.0.1:8000/users/1/\",\n            \"username\": \"admin\"\n        }\n    ]\n}",
    "crumbs": [
      "Blog",
      "Django",
      "DRF Quickstart"
    ]
  },
  {
    "objectID": "Django/0_forms.html",
    "href": "Django/0_forms.html",
    "title": "Forms",
    "section": "",
    "text": "Forms in Django: Django forms are used to handle the input from a user, process it, and then use it for various purposes such as saving data to the database, sending an email, etc.\nTwo Types of Forms:\n\nForms: django.forms.Form is used to create a form from scratch.\nModelForms: django.forms.ModelForm is used to create a form directly from a Django model.",
    "crumbs": [
      "Blog",
      "Django",
      "Forms"
    ]
  },
  {
    "objectID": "Django/0_forms.html#introduction-to-django-forms",
    "href": "Django/0_forms.html#introduction-to-django-forms",
    "title": "Forms",
    "section": "",
    "text": "Forms in Django: Django forms are used to handle the input from a user, process it, and then use it for various purposes such as saving data to the database, sending an email, etc.\nTwo Types of Forms:\n\nForms: django.forms.Form is used to create a form from scratch.\nModelForms: django.forms.ModelForm is used to create a form directly from a Django model.",
    "crumbs": [
      "Blog",
      "Django",
      "Forms"
    ]
  },
  {
    "objectID": "Django/0_forms.html#creating-a-basic-form",
    "href": "Django/0_forms.html#creating-a-basic-form",
    "title": "Forms",
    "section": "Creating a Basic Form",
    "text": "Creating a Basic Form\n\nForm Class: Define a form by creating a subclass of forms.Form.\nForm Fields: Add fields using the various field classes (e.g., CharField, EmailField, ChoiceField).\n\nfrom django import forms\n\nclass ContactForm(forms.Form):\n    name = forms.CharField(max_length=100)\n    email = forms.EmailField()\n    message = forms.CharField(widget=forms.Textarea)\n\nRendering the Form: Forms can be rendered in templates using Django template tags.\n\n&lt;form method=\"post\"&gt;\n    {% csrf_token %}\n    {{ form.as_p }}\n    &lt;button type=\"submit\"&gt;Send&lt;/button&gt;\n&lt;/form&gt;",
    "crumbs": [
      "Blog",
      "Django",
      "Forms"
    ]
  },
  {
    "objectID": "Django/0_forms.html#handling-form-submission",
    "href": "Django/0_forms.html#handling-form-submission",
    "title": "Forms",
    "section": "Handling Form Submission",
    "text": "Handling Form Submission\n\nViews: Handle form submission in a Django view.\nForm Validation: When a form is submitted, you can check if it‚Äôs valid using form.is_valid().\n\n\nExample\n\nfrom django.shortcuts import render\nfrom .forms import ContactForm\n\ndef contact_view(request):\n    if request.method == 'POST':\n        form = ContactForm(request.POST)\n        if form.is_valid():\n            # Process the data in form.cleaned_data\n            # For example, send an email or save the data\n            return render(request, 'contact_success.html')\n    else:\n        form = ContactForm()\n    return render(request, 'contact_form.html', {'form': form})",
    "crumbs": [
      "Blog",
      "Django",
      "Forms"
    ]
  },
  {
    "objectID": "Django/0_forms.html#form-fields",
    "href": "Django/0_forms.html#form-fields",
    "title": "Forms",
    "section": "Form Fields",
    "text": "Form Fields\n\nDjango provides a variety of form fields, each corresponding to a different HTML input element:\n\n\nCharField: &lt;input type=\"text\"&gt;\nEmailField: &lt;input type=\"email\"&gt;\nChoiceField: &lt;select&gt;\nBooleanField: &lt;input type=\"checkbox\"&gt;\nDateField: &lt;input type=\"date\"&gt;\nFileField: &lt;input type=\"file\"&gt;\nImageField: A special subclass of FileField used for uploading images.\n\n\nExample\n\nclass ExampleForm(forms.Form):\n    name = forms.CharField(max_length=100)\n    email = forms.EmailField()\n    birth_date = forms.DateField(widget=forms.SelectDateWidget)",
    "crumbs": [
      "Blog",
      "Django",
      "Forms"
    ]
  },
  {
    "objectID": "Django/0_forms.html#widgets",
    "href": "Django/0_forms.html#widgets",
    "title": "Forms",
    "section": "Widgets",
    "text": "Widgets\n\nCustomizing Widgets: Widgets define how the form field is rendered. Each form field has an associated widget that determines its appearance.\nCommon Widgets:\n\nTextInput, Textarea, Select, CheckboxInput, FileInput, etc.\n\nCustom Widgets: You can create custom widgets by subclassing forms.Widget.\n\n\nExample:\n\nclass CustomForm(forms.Form):\n    name = forms.CharField(widget=forms.TextInput(attrs={'class': 'special', 'size': '40'}))\n    email = forms.EmailField(widget=forms.EmailInput(attrs={'placeholder': 'you@example.com'}))",
    "crumbs": [
      "Blog",
      "Django",
      "Forms"
    ]
  },
  {
    "objectID": "Django/0_forms.html#form-validation",
    "href": "Django/0_forms.html#form-validation",
    "title": "Forms",
    "section": "Form Validation",
    "text": "Form Validation\n\nField Validation: Basic validation is provided by the field types (e.g., EmailField validates that the input is a valid email address).\nCustom Validation: Add custom validation by defining a clean_&lt;fieldname&gt;() method in your form class.\nForm-Level Validation: For validation that involves multiple fields, override the clean() method.\n\n\nExample\n\nclass RegistrationForm(forms.Form):\n    username = forms.CharField(max_length=100)\n    email = forms.EmailField()\n    password = forms.CharField(widget=forms.PasswordInput)\n    confirm_password = forms.CharField(widget=forms.PasswordInput)\n\n    def clean(self):\n        cleaned_data = super().clean()\n        password = cleaned_data.get('password')\n        confirm_password = cleaned_data.get('confirm_password')\n\n        if password != confirm_password:\n            raise forms.ValidationError(\"Passwords do not match\")",
    "crumbs": [
      "Blog",
      "Django",
      "Forms"
    ]
  },
  {
    "objectID": "Django/0_forms.html#modelforms",
    "href": "Django/0_forms.html#modelforms",
    "title": "Forms",
    "section": "ModelForms",
    "text": "ModelForms\n\nIntroduction: A ModelForm is a form that automatically creates fields based on the fields in a Django model. It‚Äôs used to create forms that directly interact with the database.\nCreating a ModelForm:\n\nfrom django import forms\nfrom .models import Person\n\nclass PersonForm(forms.ModelForm):\n    class Meta:\n        model = Person\n        fields = ['first_name', 'last_name', 'email']\n\nSaving Data: When the form is valid, you can call form.save() to save the data to the database.\nCustomizing ModelForms: You can override or add fields, customize widgets, and add validation.",
    "crumbs": [
      "Blog",
      "Django",
      "Forms"
    ]
  },
  {
    "objectID": "Django/0_forms.html#formsets",
    "href": "Django/0_forms.html#formsets",
    "title": "Forms",
    "section": "Formsets",
    "text": "Formsets\n\nIntroduction: Formsets are a layer of abstraction to work with multiple forms on the same page. They are often used to manage multiple instances of a model.\nCreating a Formset:\n\nfrom django.forms import formset_factory\n\nclass SimpleForm(forms.Form):\n    name = forms.CharField()\n\nSimpleFormSet = formset_factory(SimpleForm, extra=3)\n\nModelFormsets: ModelFormsets work similarly to Formsets but are based on models.\n\nfrom django.forms import modelformset_factory\nfrom .models import Person\n\nPersonFormSet = modelformset_factory(Person, fields=('first_name', 'last_name', 'email'), extra=2)",
    "crumbs": [
      "Blog",
      "Django",
      "Forms"
    ]
  },
  {
    "objectID": "influx.html",
    "href": "influx.html",
    "title": "Influx",
    "section": "",
    "text": "Inside WSL\n# Ubuntu/Debian AMD64\ncurl -O https://dl.influxdata.com/influxdb/releases/influxdb2_2.7.3-1_amd64.deb\nsudo dpkg -i influxdb2_2.7.3-1_amd64.deb",
    "crumbs": [
      "Blog",
      "Influx"
    ]
  },
  {
    "objectID": "influx.html#installation",
    "href": "influx.html#installation",
    "title": "Influx",
    "section": "",
    "text": "Inside WSL\n# Ubuntu/Debian AMD64\ncurl -O https://dl.influxdata.com/influxdb/releases/influxdb2_2.7.3-1_amd64.deb\nsudo dpkg -i influxdb2_2.7.3-1_amd64.deb",
    "crumbs": [
      "Blog",
      "Influx"
    ]
  },
  {
    "objectID": "influx.html#to-view-all-services",
    "href": "influx.html#to-view-all-services",
    "title": "Influx",
    "section": "To view all Services",
    "text": "To view all Services\nsystemctl --type=service --state=running\npstree | head -5\n\n!ps\n\n    PID TTY          TIME CMD\n2048646 pts/18   00:00:00 ps\n\n\n\n!pstree\n\nsystemd‚îÄ‚î¨‚îÄ2*[agetty]\n        ‚îú‚îÄcron\n        ‚îú‚îÄdbus-daemon\n        ‚îú‚îÄgrafana‚îÄ‚îÄ‚îÄ20*[{grafana}]\n        ‚îú‚îÄinfluxd‚îÄ‚îÄ‚îÄ53*[{influxd}]\n        ‚îú‚îÄinit-systemd(Ub‚îÄ‚î¨‚îÄSessionLeader‚îÄ‚îÄ‚îÄRelay(400)‚îÄ‚î¨‚îÄbash‚îÄ‚îÄ‚îÄtmux: client\n        ‚îÇ                 ‚îÇ                            ‚îú‚îÄpython‚îÄ‚îÄ‚îÄ22*[{python}]\n        ‚îÇ                 ‚îÇ                            ‚îî‚îÄtmux: server‚îÄ‚î¨‚îÄbash‚îÄ‚îÄ‚îÄ+\n        ‚îÇ                 ‚îÇ                                           ‚îú‚îÄ6*[bash+\n        ‚îÇ                 ‚îÇ                                           ‚îú‚îÄbash‚îÄ‚îÄ‚îÄ+\n        ‚îÇ                 ‚îÇ                                           ‚îî‚îÄbash‚îÄ‚îÄ‚îÄ+\n        ‚îÇ                 ‚îú‚îÄSessionLeader‚îÄ‚îÄ‚îÄRelay(707)‚îÄ‚îÄ‚îÄbash\n        ‚îÇ                 ‚îú‚îÄSessionLeader‚îÄ‚îÄ‚îÄRelay(8620)‚îÄ‚îÄ‚îÄbash‚îÄ‚îÄ‚îÄtmux: client\n        ‚îÇ                 ‚îú‚îÄSessionLeader‚îÄ‚îÄ‚îÄRelay(1997513)‚îÄ‚îÄ‚îÄbash‚îÄ‚îÄ‚îÄtmux: clien+\n        ‚îÇ                 ‚îú‚îÄinit‚îÄ‚îÄ‚îÄ{init}\n        ‚îÇ                 ‚îú‚îÄlogin‚îÄ‚îÄ‚îÄbash\n        ‚îÇ                 ‚îî‚îÄ{init-systemd(Ub}\n        ‚îú‚îÄnetworkd-dispat\n        ‚îú‚îÄpackagekitd‚îÄ‚îÄ‚îÄ2*[{packagekitd}]\n        ‚îú‚îÄpolkitd‚îÄ‚îÄ‚îÄ2*[{polkitd}]\n        ‚îú‚îÄrsyslogd‚îÄ‚îÄ‚îÄ3*[{rsyslogd}]\n        ‚îú‚îÄsmtpd‚îÄ‚îÄ‚îÄ6*[smtpd]\n        ‚îú‚îÄsnapd‚îÄ‚îÄ‚îÄ18*[{snapd}]\n        ‚îú‚îÄ16*[snapfuse]\n        ‚îú‚îÄsshd\n        ‚îú‚îÄsubiquity-serve‚îÄ‚îÄ‚îÄpython3.10‚îÄ‚î¨‚îÄpython3\n        ‚îÇ                              ‚îî‚îÄ5*[{python3.10}]\n        ‚îú‚îÄsystemd‚îÄ‚îÄ‚îÄ(sd-pam)\n        ‚îú‚îÄsystemd-journal\n        ‚îú‚îÄsystemd-logind\n        ‚îú‚îÄsystemd-resolve\n        ‚îú‚îÄsystemd-udevd‚îÄ‚îÄ‚îÄ2*[systemd-udevd]\n        ‚îî‚îÄunattended-upgr‚îÄ‚îÄ‚îÄ{unattended-upgr}",
    "crumbs": [
      "Blog",
      "Influx"
    ]
  },
  {
    "objectID": "influx.html#server-settings",
    "href": "influx.html#server-settings",
    "title": "Influx",
    "section": "Server Settings",
    "text": "Server Settings\n\nTo start influx server\nsudo service influxdb start --http-bind-address :8080\n\n\nShow Status of influx server\nsudo service influxdb status\n\n\nTo Stop influx server\nsudo service influxdb stop",
    "crumbs": [
      "Blog",
      "Influx"
    ]
  },
  {
    "objectID": "influx.html#influxdb-oss-urls",
    "href": "influx.html#influxdb-oss-urls",
    "title": "Influx",
    "section": "InfluxDB OSS URLs",
    "text": "InfluxDB OSS URLs\nhttp://localhost:8086/",
    "crumbs": [
      "Blog",
      "Influx"
    ]
  },
  {
    "objectID": "influx.html#t0-change-ports",
    "href": "influx.html#t0-change-ports",
    "title": "Influx",
    "section": "T0 change ports",
    "text": "T0 change ports\ninfluxd --http-bind-address :8080",
    "crumbs": [
      "Blog",
      "Influx"
    ]
  },
  {
    "objectID": "influx.html#to-setup-influx-server",
    "href": "influx.html#to-setup-influx-server",
    "title": "Influx",
    "section": "To setup influx server",
    "text": "To setup influx server\n\nFirst step, Must do\n\ninflux setup \\\n  --username bthek1 \\\n  --password &lt;password&gt; \\\n  --token TOKEN \\\n  --org ORGANIZATION_NAME \\\n  --bucket BUCKET_NAME \\\n  --force",
    "crumbs": [
      "Blog",
      "Influx"
    ]
  },
  {
    "objectID": "influx.html#organisation-settings",
    "href": "influx.html#organisation-settings",
    "title": "Influx",
    "section": "Organisation Settings",
    "text": "Organisation Settings\n\nTo show organisation list\ninflux org ls",
    "crumbs": [
      "Blog",
      "Influx"
    ]
  },
  {
    "objectID": "influx.html#bucket-settings",
    "href": "influx.html#bucket-settings",
    "title": "Influx",
    "section": "Bucket Settings",
    "text": "Bucket Settings\n\nTo show Bucket list\ninflux bucket ls\n\n\nTo create bucket\ninflux bucket create --name &lt;name&gt; -c &lt;config-file&gt;\n\n\nTo enter data to bucket\ninflux write --bucket sample-bucket --url https://influx-testdata.s3.amazonaws.com/air-sensor-data-annotated.csv\ninflux write -b energy_data -f 'energy.lp'\n\n\nTo query data from influx\ninflux query 'from(bucket:\\\"sample-bucket\\\") |&gt; range(start:-30m)'\ninflux query 'from(bucket: \"sample-bucket\")\n  |&gt; range(start:-4h , stop: -0m)\n  |&gt; filter(fn: (r) =&gt; r[\"_measurement\"] == \"airSensors\")\n  |&gt; filter(fn: (r) =&gt; r[\"_field\"] == \"temperature\")\n  |&gt; aggregateWindow(every: 1m, fn: mean, createEmpty: false)\n  |&gt; yield(name: \"mean\")'",
    "crumbs": [
      "Blog",
      "Influx"
    ]
  },
  {
    "objectID": "influx.html#user-settings",
    "href": "influx.html#user-settings",
    "title": "Influx",
    "section": "User settings",
    "text": "User settings\n\nTo create new user\ninflux user create -n &lt;username&gt; -p &lt;password&gt; -o &lt;org-name&gt; \ninflux user create -n ben -p Asdf,mnb1234 -o phisaver\n\n\nTo show user list\ninflux user ls\n\n\nTo delete user\ninflux user delete -i &lt;id&gt;\n\n\nTo delete user\ninflux user update -i &lt;user-id&gt; -n &lt;new-username&gt;",
    "crumbs": [
      "Blog",
      "Influx"
    ]
  },
  {
    "objectID": "influx.html#task",
    "href": "influx.html#task",
    "title": "Influx",
    "section": "Task",
    "text": "Task\nimport influxdata/influxdb/sample\n\n\noption task = {\n  name: \"Collect air sensor sample data\",\n  every: '15m',\n}\n\nsample.data(set: \"airSensor\")\n    |&gt; to(bucket: \"example-bucket\")",
    "crumbs": [
      "Blog",
      "Influx"
    ]
  },
  {
    "objectID": "influx.html#python-version",
    "href": "influx.html#python-version",
    "title": "Influx",
    "section": "Python Version",
    "text": "Python Version\n\nCreate config.ini file\n[APP]\nINFLUX_URL = &lt;INFLUX_URL&gt;\nINFLUX_TOKEN = &lt;INFLUX_TOKEN&gt;\nINFLUX_ORG = &lt;INFLUX_ORG_ID&gt;\nINFLUX_BUCKET = iot_center\nINFLUX_BUCKET_AUTH = iot_center_devices\n\n# Import the dependencies.\nimport configparser\nfrom datetime import datetime\nfrom uuid import uuid4\n\n# Import client library classes.\nfrom influxdb_client import Authorization, InfluxDBClient, Permission, PermissionResource, Point, WriteOptions\n\nfrom influxdb_client.client.write_api import SYNCHRONOUS\nimport influxdb_client\n\n# Get the configuration key-value pairs.\n\nconfig = configparser.ConfigParser()\nconfig.read('config.ini')\n\n['config.ini']\n\n\n\n\nConnect to server using InfluxDBClient\n\nclient = InfluxDBClient(url=config.get('APP', 'INFLUX_URL'),\n                        token=config.get('APP', 'INFLUX_TOKEN'),\n                        org=config.get('APP', 'INFLUX_ORG'),)\n\n\nclient.ping()\n\nTrue\n\n\n\n\nAuth: create, list, delete\n\nauthorization_api = client.authorizations_api()\nauth_list = authorization_api.find_authorizations()\n\nfor auth in auth_list:\n    print(auth.token)\n\np_5lZramPcqYC4EPNRVpRhAFs4RvWc8cPXtt9exsIPH8ybJP3lKlf5KMKjLf2ueHFlcmo45ZBxeeU3ZtKQ-LDQ==\nCeAAU2CprLUJoammpG9G7JuGTZ2qosK_shCBdXZvnIai46GFf7VB8jfd8XV6yeAeRjAc8nwAYkyhYL5BhDji2g==\nU1HdRByFCwZJhoNaKqVg9tja0zHw23TO7-pUxSSFhzDxt740WZ1DRUZoRWx6Brs5lDRBJqU-bB11kkVGBxtNfg==\nIPPdYDQH2s43p7jCro1SI_oJ8aGhFjkDEpgMSFuGs-vXuKnOMy1mvQzVLBoth2tKmvJGpy6ePo5c93sO8xTUkg==\n\n\n\n\nBucket: create, list, delete\n\nbuckets_api = client.buckets_api()\nbucket_list = buckets_api.find_buckets()\n\n\nfor bucket in bucket_list.buckets:\n    print(bucket.name)\n\n_tasks\nsample-bucket\n_monitoring\nenergy_data\npower_data\ntest\nWeather\n\n\n\nclient = InfluxDBClient(url=config.get('APP', 'INFLUX_URL'),\n                        token=config.get('APP', 'INFLUX_TOKEN'),\n                        org=config.get('APP', 'INFLUX_ORG'),)\n\nbuckets_api = client.buckets_api()\nbucket_list = buckets_api.find_buckets()\nbucket_name = 'solar_forecast'\n\nif bucket_name not in [bucket.name for bucket in bucket_list.buckets]:\n    buckets_api.create_bucket(bucket_name = bucket_name)\nelse:\n    print('bucket already exists')\n\nbucket already exists\n\n\n\n# Specify the name of the bucket you want to delete\nbucket_name = \"your_bucket_name\"\n\ntry:\n    # Delete the bucket\n    client.buckets_api().delete_bucket(bucket_name=bucket_name)\n    print(f\"Bucket '{bucket_name}' deleted successfully.\")\nexcept ApiException as e:\n    print(f\"Failed to delete bucket '{bucket_name}': {e}\")\n\n\n\nOrganization: create, list, delete\n\nori_api = client.organizations_api()\norganization_list = ori_api.find_organizations()\n\n\nfor ori in organization_list:\n    print(ori.name)\n\nOrg1\n\n\n\n\nUser: create, list, delete\n\nusers_api = client.users_api()\n\n\nusers_list = users_api.find_users()\nusers_list\n\n{'links': {'_self': '/api/v2/users'},\n 'users': [{'id': '0ca78064bac9d000',\n            'links': {'_self': '/api/v2/users/0ca78064bac9d000'},\n            'name': 'ben',\n            'status': 'active'}]}\n\n\n\n\nQuery: create, list, delete\n\nimport pandas as pd\n\n\nquery_api = client.query_api()\n\nquery = '''from(bucket: \"sample-bucket\")\n  |&gt; range(start: 2024-02-28T03:50:00.000Z, stop: 2024-02-28T04:50:00.000Z)\n  |&gt; filter(fn: (r) =&gt; r[\"_measurement\"] == \"airSensors\")\n  |&gt; filter(fn: (r) =&gt; r[\"_field\"] == \"humidity\")\n  |&gt; filter(fn: (r) =&gt; r[\"sensor_id\"] == \"TLM0101\" or r[\"sensor_id\"] == \"TLM0102\")\n  |&gt; aggregateWindow(every: 1s, fn: mean, createEmpty: false)\n  |&gt; yield(name: \"mean\") \n  |&gt; pivot(rowKey:[\"_time\"], columnKey: [\"_field\"], valueColumn: \"_value\")'''\n\n\ndata = query_api.query_data_frame(org=config.get('APP', 'INFLUX_ORG'), query=query)\n\n\ndata1 = data[0]\n\n\ndata1\n\n\n\n\n\n\n\n\nresult\ntable\n_start\n_stop\n_time\n_value\n_field\n_measurement\nsensor_id\n\n\n\n\n0\nmean\n0\n2024-02-28 03:50:00+00:00\n2024-02-28 04:50:00+00:00\n2024-02-28 03:50:05+00:00\n34.889344\nhumidity\nairSensors\nTLM0101\n\n\n1\nmean\n0\n2024-02-28 03:50:00+00:00\n2024-02-28 04:50:00+00:00\n2024-02-28 03:50:15+00:00\n34.919323\nhumidity\nairSensors\nTLM0101\n\n\n2\nmean\n0\n2024-02-28 03:50:00+00:00\n2024-02-28 04:50:00+00:00\n2024-02-28 03:50:25+00:00\n34.929411\nhumidity\nairSensors\nTLM0101\n\n\n3\nmean\n0\n2024-02-28 03:50:00+00:00\n2024-02-28 04:50:00+00:00\n2024-02-28 03:50:35+00:00\n34.920287\nhumidity\nairSensors\nTLM0101\n\n\n4\nmean\n0\n2024-02-28 03:50:00+00:00\n2024-02-28 04:50:00+00:00\n2024-02-28 03:50:45+00:00\n34.969323\nhumidity\nairSensors\nTLM0101\n\n\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n\n\n705\nmean\n1\n2024-02-28 03:50:00+00:00\n2024-02-28 04:50:00+00:00\n2024-02-28 04:48:25+00:00\n35.477672\nhumidity\nairSensors\nTLM0102\n\n\n706\nmean\n1\n2024-02-28 03:50:00+00:00\n2024-02-28 04:50:00+00:00\n2024-02-28 04:48:35+00:00\n35.434914\nhumidity\nairSensors\nTLM0102\n\n\n707\nmean\n1\n2024-02-28 03:50:00+00:00\n2024-02-28 04:50:00+00:00\n2024-02-28 04:48:45+00:00\n35.466550\nhumidity\nairSensors\nTLM0102\n\n\n708\nmean\n1\n2024-02-28 03:50:00+00:00\n2024-02-28 04:50:00+00:00\n2024-02-28 04:48:55+00:00\n35.433109\nhumidity\nairSensors\nTLM0102\n\n\n709\nmean\n1\n2024-02-28 03:50:00+00:00\n2024-02-28 04:50:00+00:00\n2024-02-28 04:49:05+00:00\n35.482699\nhumidity\nairSensors\nTLM0102\n\n\n\n\n710 rows √ó 9 columns\n\n\n\n\ndata1.loc[1]\n\nresult                               mean\ntable                                   0\n_start          2024-02-28 03:50:00+00:00\n_stop           2024-02-28 04:50:00+00:00\n_time           2024-02-28 03:50:15+00:00\n_value                          34.919323\n_field                           humidity\n_measurement                   airSensors\nsensor_id                         TLM0101\nName: 1, dtype: object\n\n\n\n\nWrite: create, list, delete\n\nfrom datetime import datetime\n\n\nwrite_Api = client.write_api(write_options=SYNCHRONOUS)\n\n\ndt = '2024-03-01 05:20:09'\ndate = pd.to_datetime(dt).strftime('%Y-%m-%dT%H:%M:%SZ')\ndate\n\n'2024-03-01T05:20:09Z'\n\n\n\ntimestamp = datetime.utcnow().strftime('%Y-%m-%dT%H:%M:%SZ')\ntimestamp\n\n'2024-02-29T09:42:00Z'\n\n\n\ndictionary = {\"measurement\": \"h2o_feet\",\n              \"tags\": {\"location\": \"us-west\"},\n              \"fields\": {\"level\": 150},\n              \"time\": date\n             }\ndictionary\n\n{'measurement': 'h2o_feet',\n 'tags': {'location': 'us-west'},\n 'fields': {'level': 150},\n 'time': '2024-03-01T05:20:09Z'}\n\n\n\nwrite_Api.write(bucket=\"test\",org=\"Org1\", record=dictionary)\n\npath = '/home/ben/BENEDICT_Only/Benedict_Projects/Intership/Phisaver/data_phisaver/energy.lp'\n\n# Open the .lp file\nwith open(path, 'r') as file:\n    # Read the first 5 lines\n    for line in file:\n        write_Api.write(bucket=bucket_name, \n                        org=\"Org1\",\n                        record=line.strip())\nwith open(path, 'r') as file:\n    lp_content = file.read()\nfor line in tqdm(text.split('\\n')):\n        write_Api.write(bucket='test', \n                        org=\"Org1\",\n                        record=line.strip())",
    "crumbs": [
      "Blog",
      "Influx"
    ]
  },
  {
    "objectID": "Databases/redis.html",
    "href": "Databases/redis.html",
    "title": "Redis",
    "section": "",
    "text": "1. Core Features of Redis\n\na. In-Memory Data Store\nRedis is primarily an in-memory store, meaning it holds the entire dataset in memory (RAM), making data access extremely fast. You can optionally persist the data to disk, but it‚Äôs designed to perform as an in-memory database.\n\n\nb. Data Structures Supported\nRedis supports a variety of data structures: - Strings: The most basic Redis value, strings are binary-safe and can store any type of data (e.g., text, numbers, or serialized data). - Lists: Ordered collections of strings. Redis lists are ideal for queues or stacks. - Sets: Unordered collections of unique strings. - Sorted Sets: Similar to sets, but each member has a score that determines the order. - Hashes: Key-value pairs within a single key. Perfect for representing objects. - Bitmaps: Efficient way to store binary data (bits). - HyperLogLog: Probabilistic data structure used for approximating the cardinality of large datasets. - Streams: Log-like append-only data structures for time-ordered events. - Geospatial: Stores and queries geographical data such as longitude and latitude.\n\n\nc.¬†Persistence Options\nRedis provides two persistence mechanisms: - RDB (Redis Database Backup): Snapshot-based persistence, saving the dataset to disk at regular intervals. - AOF (Append-Only File): Logs each write operation to disk, allowing more fine-grained persistence. AOF provides more durability but can be slower than RDB. - Hybrid Persistence: You can combine both RDB and AOF persistence for balance between performance and durability.\n\n\nd.¬†Replication\nRedis supports master-slave replication. You can configure Redis instances as read replicas, which can help distribute the read load and provide high availability.\n\nMaster/Slave Replication: Replicas are exact copies of the master. You can have multiple read-only replicas, but only the master can accept write operations.\nAsynchronous Replication: Replication is asynchronous, meaning the master doesn‚Äôt wait for replicas to confirm receipt of updates.\n\n\n\ne. High Availability with Redis Sentinel\nRedis Sentinel provides high availability by monitoring Redis instances and automatically failing over if the master goes down. Sentinel provides: - Automatic failover to a replica when the master fails. - Monitoring of master and replica instances. - Notifications when issues occur.\n\n\nf.¬†Clustering\nRedis Cluster allows you to partition data across multiple Redis nodes. It enables Redis to handle larger datasets beyond the memory limit of a single machine and provides data replication and automatic failover.\n\nSharding: Data is split across multiple nodes based on the hash of the key.\nFault Tolerance: Redis Cluster has built-in mechanisms for fault tolerance, automatically promoting replicas if a master node goes down.\n\n\n\ng. Pub/Sub Messaging\nRedis provides a lightweight publish/subscribe messaging system, allowing messages to be broadcasted to multiple subscribers.\n\n\nh. Lua Scripting\nRedis allows you to run Lua scripts atomically, meaning all commands in a script are executed in a single operation. Lua scripts are useful for reducing the number of network round-trips and for executing multiple operations that must be done atomically.\n\n\n\n2. Installation and Configuration\n\na. Installing Redis\nYou can install Redis on most operating systems using package managers or by compiling it from source.\nFor Ubuntu/Debian:\nsudo apt update\nsudo apt install redis-server\nFor macOS (using Homebrew):\nbrew install redis\n\n\nb. Starting Redis\nStart Redis using the command:\nredis-server\nYou can also configure Redis to run as a service:\nsudo systemctl enable redis-server\nsudo systemctl start redis-server\n\n\nc.¬†Basic Configuration\nThe configuration file is typically located at /etc/redis/redis.conf. You can configure various aspects of Redis here, such as: - Memory Limits: Use the maxmemory directive to limit how much RAM Redis can use. - Persistence: Control how often Redis snapshots data using the save directive or configure AOF with appendonly yes. - Security: Use requirepass to set a password, or configure Redis to listen only on localhost for better security.\n\n\n\n3. Redis Data Types and Commands\n\na. String Commands\nSET key value     # Set a key to hold the string value\nGET key           # Get the value of a key\nINCR key          # Increment the integer value of a key\nAPPEND key value  # Append a value to a key\nDEL key           # Delete a key\n\n\nb. List Commands\nRPUSH key value    # Push a value onto the list (right)\nLPUSH key value    # Push a value onto the list (left)\nLRANGE key 0 -1    # Get all elements in the list\nLPOP key           # Remove and return the first element\nRPOP key           # Remove and return the last element\n\n\nc.¬†Set Commands\nSADD key member     # Add a member to the set\nSMEMBERS key        # Get all members of the set\nSREM key member     # Remove a member from the set\nSISMEMBER key member # Check if a member exists in the set\n\n\nd.¬†Sorted Set Commands\nZADD key score member  # Add a member to the sorted set with a score\nZRANGE key 0 -1        # Get all elements in the sorted set by score\nZREM key member        # Remove a member from the sorted set\n\n\ne. Hash Commands\nHSET key field value   # Set a field in the hash\nHGET key field         # Get the value of a field in the hash\nHGETALL key            # Get all fields and values in the hash\nHDEL key field         # Delete a field in the hash\n\n\nf.¬†Pub/Sub Commands\nPUBLISH channel message   # Publish a message to a channel\nSUBSCRIBE channel         # Subscribe to a channel\n\n\ng. Stream Commands\nXADD mystream * key value  # Add an entry to a stream\nXRANGE mystream - +        # Get all entries in the stream\nXREAD COUNT 2 STREAMS mystream  # Read from the stream\n\n\nh. Transaction Commands\nTransactions in Redis are achieved using MULTI and EXEC commands.\nMULTI                  # Start a transaction\nSET key value          # Queue this command\nINCR key               # Queue another command\nEXEC                   # Execute all queued commands atomically\n\n\n\n4. Persistence Options in Redis\n\na. RDB (Redis Database Backup)\nRDB snapshots the dataset at regular intervals and saves it to disk in a binary format. You configure this in redis.conf using the save directive.\nExample:\nsave 900 1   # Save every 15 minutes if at least 1 change was made\nsave 300 10  # Save every 5 minutes if at least 10 changes were made\nsave 60 10000 # Save every minute if 10,000 changes were made\n\n\nb. AOF (Append-Only File)\nAOF logs every write operation to disk. It offers more durability compared to RDB, as it logs every change.\nEnable AOF in redis.conf:\nappendonly yes\nYou can also configure how often the file is synced to disk: - appendfsync always: Slowest but safest (syncs after every write). - appendfsync everysec: Recommended (syncs every second). - appendfsync no: Fastest but less durable.\n\n\nc.¬†Hybrid Persistence\nRedis 6 introduced hybrid persistence, which combines both RDB and AOF for better performance and durability. It writes the RDB snapshot to disk, followed by AOF to replay recent operations.\n\n\n\n5. Replication and High Availability\n\na. Master-Slave Replication\nYou can replicate data from a master Redis instance to one or more slave instances. This helps distribute the read load across multiple instances.\nTo set up a replica, add the following to the redis.conf file of the replica:\nreplicaof &lt;master-ip&gt; &lt;master-port&gt;\n\n\nb. Redis Sentinel\nRedis Sentinel is used for automatic failover in a master-slave setup. Sentinel monitors your Redis instances and promotes a slave to master if the master fails.\nSentinel runs as a separate process. To configure Sentinel:\nsentinel monitor mymaster &lt;master-ip&gt; &lt;master-port&gt; 2\nsentinel down-after-milliseconds mymaster 5000\nsentinel failover-timeout mymaster 60000\n\n\nc.¬†Redis Cluster\nRedis Cluster allows you to distribute your dataset across multiple Redis nodes, enabling horizontal scalability. It automatically shards data across nodes using a key hashing algorithm.\nTo start a cluster, you need at\nleast 3 master nodes and preferably 3 replica nodes for failover. You can use the redis-cli tool to create a cluster:\nredis-cli --cluster create 127.0.0.1:7000 127.0.0.1:7001 127.0.0.1:7002 --cluster-replicas 1\n\n\n\n6. Security in Redis\nRedis does not have robust security mechanisms built-in, so securing Redis should be part of your deployment process:\n\nBind to localhost or private network: In redis.conf, set bind 127.0.0.1 to limit connections to localhost.\nRequire Password: Use the requirepass directive in redis.conf to enforce password authentication:\nrequirepass your-password-here\nDisable Command Renaming: To prevent misuse of dangerous commands (like FLUSHALL), you can rename or disable them:\nrename-command FLUSHALL \"\"\nUse TLS: Redis 6.0 and above support TLS encryption, which secures data transmitted over the network. You can enable TLS using the following settings in redis.conf:\ntls-port 6379\ntls-cert-file /path/to/your/cert.pem\ntls-key-file /path/to/your/key.pem\ntls-ca-cert-file /path/to/your/ca.pem\n\n\n\n7. Advanced Features\n\na. Lua Scripting\nRedis allows you to run Lua scripts atomically, making them ideal for performing complex operations involving multiple keys.\nExample:\nEVAL \"return redis.call('GET', KEYS[1])\" 1 mykey\n\nThe EVAL command is used to execute the Lua script.\nKEYS[1] represents the first key passed to the script.\n\n\n\nb. Bitmaps\nBitmaps are used to store binary data in Redis. You can set or get bits at specific offsets.\nExample:\nSETBIT mykey 7 1       # Set the 7th bit of mykey to 1\nGETBIT mykey 7         # Get the value of the 7th bit\nBITCOUNT mykey         # Count the number of bits set to 1\n\n\nc.¬†HyperLogLog\nHyperLogLog is a probabilistic data structure for estimating the cardinality of large datasets.\nExample:\nPFADD mylog value1 value2 value3\nPFCOUNT mylog    # Get the approximate number of unique elements\n\n\nd.¬†Streams\nStreams allow you to create logs of data, which can be processed by consumers in real-time.\nExample:\nXADD mystream * field1 value1 field2 value2   # Add an entry to the stream\nXREAD COUNT 2 STREAMS mystream 0              # Read two entries from the stream\n\n\n\n8. Redis Use Cases\n\nCaching: Redis is commonly used for caching web pages, session data, and database query results due to its high performance and TTL features.\nReal-Time Analytics: Use Redis for real-time metrics aggregation and reporting.\nMessage Queues: Redis Pub/Sub and Lists can be used for lightweight messaging and task queues.\nLeaderboards: Sorted sets in Redis are perfect for building leaderboards in gaming and other applications.\nSession Store: Redis is often used to store user session data because of its in-memory speed and ability to expire keys.\n\n\n\n9. Monitoring Redis\nYou can monitor Redis using several methods:\n\nRedis INFO Command: Provides real-time metrics such as memory usage, client connections, and keyspace statistics.\nredis-cli INFO\nRedis CLI MONITOR Command: This command shows real-time queries executed by Redis.\nredis-cli MONITOR\nThird-Party Tools: Tools like RedisInsight, Prometheus, and Grafana provide a more detailed dashboard for Redis monitoring.\n\n\n\n\n\n Back to top",
    "crumbs": [
      "Blog",
      "Databases",
      "Redis"
    ]
  },
  {
    "objectID": "Databases/PostgreSQL/postgresql_setup.html",
    "href": "Databases/PostgreSQL/postgresql_setup.html",
    "title": "PostgreSQL Setup",
    "section": "",
    "text": "Update the package list before installing PostgreSQL\n\nsudo apt-get update\n\n\n\n\nInstall PostgreSQL and its client packages:\n\nsudo apt-get install postgresql postgresql-contrib\n\n\n\n\nCheck the PostgreSQL version to verify installation:\n\npsql --version",
    "crumbs": [
      "Blog",
      "Databases",
      "PostgreSQL",
      "PostgreSQL Setup"
    ]
  },
  {
    "objectID": "Databases/PostgreSQL/postgresql_setup.html#install-postgresql",
    "href": "Databases/PostgreSQL/postgresql_setup.html#install-postgresql",
    "title": "PostgreSQL Setup",
    "section": "",
    "text": "Update the package list before installing PostgreSQL\n\nsudo apt-get update\n\n\n\n\nInstall PostgreSQL and its client packages:\n\nsudo apt-get install postgresql postgresql-contrib\n\n\n\n\nCheck the PostgreSQL version to verify installation:\n\npsql --version",
    "crumbs": [
      "Blog",
      "Databases",
      "PostgreSQL",
      "PostgreSQL Setup"
    ]
  },
  {
    "objectID": "Databases/PostgreSQL/postgresql_setup.html#initialize-and-configure-postgresql",
    "href": "Databases/PostgreSQL/postgresql_setup.html#initialize-and-configure-postgresql",
    "title": "PostgreSQL Setup",
    "section": "Initialize and Configure PostgreSQL",
    "text": "Initialize and Configure PostgreSQL\n\nInitialize PostgreSQL Cluster:\n\nPostgreSQL installation typically initializes a cluster automatically. If not, you can do it manually:\n\nsudo pg_createcluster 13 main --start\n\n\nStart PostgreSQL Service:\nsudo service postgresql start\n\n\nConfigure PostgreSQL User and Password\n\nBy default, PostgreSQL creates a user postgres with no password. Set a password for the postgres user if needed:\n\nsudo -u postgres psql\n\\password postgres\n\\q",
    "crumbs": [
      "Blog",
      "Databases",
      "PostgreSQL",
      "PostgreSQL Setup"
    ]
  },
  {
    "objectID": "Databases/PostgreSQL/postgresql_setup.html#access-postgresql",
    "href": "Databases/PostgreSQL/postgresql_setup.html#access-postgresql",
    "title": "PostgreSQL Setup",
    "section": "Access PostgreSQL",
    "text": "Access PostgreSQL\n\nAccess PostgreSQL Shell (psql):\nsudo -u postgres psql\n\n\nBasic Commands\n\nOnce in psql, you can execute SQL commands. Here are a few essential commands:\n\n\n: List all databases.\natabase_name: Connect to a specific database.\n: List all tables in the current database.\n: Quit psql.",
    "crumbs": [
      "Blog",
      "Databases",
      "PostgreSQL",
      "PostgreSQL Setup"
    ]
  },
  {
    "objectID": "Databases/PostgreSQL/postgresql_setup.html#configure-postgresql-for-use-with-applications",
    "href": "Databases/PostgreSQL/postgresql_setup.html#configure-postgresql-for-use-with-applications",
    "title": "PostgreSQL Setup",
    "section": "Configure PostgreSQL for Use with Applications",
    "text": "Configure PostgreSQL for Use with Applications\n\nEdit PostgreSQL Configuration (if necessary):\n\nModify PostgreSQL configuration files (postgresql.conf and pg_hba.conf) located typically in /etc/postgresql//main/ to adjust settings like authentication methods, listen addresses, etc.\n\n\n\nConnect PostgreSQL with Django or Other Applications\n\nUpdate your application‚Äôs database settings (settings.py for Django) to use PostgreSQL with the appropriate credentials (USER, PASSWORD, HOST, PORT).",
    "crumbs": [
      "Blog",
      "Databases",
      "PostgreSQL",
      "PostgreSQL Setup"
    ]
  },
  {
    "objectID": "Databases/PostgreSQL/postgresql_setup.html#remove-postgresql",
    "href": "Databases/PostgreSQL/postgresql_setup.html#remove-postgresql",
    "title": "PostgreSQL Setup",
    "section": "Remove PostgreSQL",
    "text": "Remove PostgreSQL\n\nStop\n\nIf PostgreSQL is running, stop the service:\n\nsudo service postgresql stop\n\n\nRemove\n\nRemove PostgreSQL and its configuration files:\n\nsudo apt-get remove --purge postgresql\\*\n\n\nClean up\n\nRemove any remaining configuration files:\n\nsudo rm -r /etc/postgresql/\nsudo rm -r /etc/postgresql-common/\nsudo rm -r /var/lib/postgresql/\n\n\n\n\nAdditional Tips\n\nBackup and Restore: Use tools like pg_dump and pg_restore for database backups and restoration.\nSecurity: Ensure PostgreSQL is configured securely, especially if accessible from outside WSL.",
    "crumbs": [
      "Blog",
      "Databases",
      "PostgreSQL",
      "PostgreSQL Setup"
    ]
  },
  {
    "objectID": "Databases/PostgreSQL/timescaledb.html#what-is-timescaledb",
    "href": "Databases/PostgreSQL/timescaledb.html#what-is-timescaledb",
    "title": "TimescaleDB",
    "section": "üîç What is TimescaleDB?",
    "text": "üîç What is TimescaleDB?\nTimescaleDB is a PostgreSQL extension built for time-series data, offering:\n\n\n\n\n\n\n\nFeature\nBenefit\n\n\n\n\n‚è±Ô∏è Hypertables\nAutomatic time-based partitioning for massive datasets\n\n\nüìä Continuous Aggregates\nPrecomputed rollups for fast queries\n\n\nüßä Compression\nReduces storage, improves read performance\n\n\nüîÅ Time Bucketing\nEasy GROUP BY time_interval for summaries\n\n\nüí• PostgreSQL Compatibility\nWorks with Django ORM via PostgreSQL backend",
    "crumbs": [
      "Blog",
      "Databases",
      "PostgreSQL",
      "TimescaleDB"
    ]
  },
  {
    "objectID": "Databases/PostgreSQL/timescaledb.html#install-and-enable-timescaledb",
    "href": "Databases/PostgreSQL/timescaledb.html#install-and-enable-timescaledb",
    "title": "TimescaleDB",
    "section": "üîß 1. Install and Enable TimescaleDB",
    "text": "üîß 1. Install and Enable TimescaleDB\n\nüê≥ Docker Example:\nservices:\n  db:\n    image: timescale/timescaledb:latest-pg15\n    ports:\n      - \"5432:5432\"\n    environment:\n      POSTGRES_PASSWORD: password\n\n\nManual Install (Linux):\nsudo apt install timescaledb-postgresql-15\nUpdate postgresql.conf:\nshared_preload_libraries = 'timescaledb'\nThen restart PostgreSQL and enable the extension:\nCREATE EXTENSION IF NOT EXISTS timescaledb;",
    "crumbs": [
      "Blog",
      "Databases",
      "PostgreSQL",
      "TimescaleDB"
    ]
  },
  {
    "objectID": "Databases/PostgreSQL/timescaledb.html#django-project-setup",
    "href": "Databases/PostgreSQL/timescaledb.html#django-project-setup",
    "title": "TimescaleDB",
    "section": "‚öôÔ∏è 2. Django Project Setup",
    "text": "‚öôÔ∏è 2. Django Project Setup\n\nInstall dependencies:\npip install psycopg2 django\n\n\nsettings.py:\nDATABASES = {\n    'default': {\n        'ENGINE': 'django.db.backends.postgresql',\n        'NAME': 'yourdb',\n        'USER': 'youruser',\n        'PASSWORD': 'yourpass',\n        'HOST': 'localhost',\n        'PORT': '5432',\n    }\n}",
    "crumbs": [
      "Blog",
      "Databases",
      "PostgreSQL",
      "TimescaleDB"
    ]
  },
  {
    "objectID": "Databases/PostgreSQL/timescaledb.html#django-model-for-time-series-data",
    "href": "Databases/PostgreSQL/timescaledb.html#django-model-for-time-series-data",
    "title": "TimescaleDB",
    "section": "üì¶ 3. Django Model for Time-Series Data",
    "text": "üì¶ 3. Django Model for Time-Series Data\n# models.py\nfrom django.db import models\n\nclass SensorReading(models.Model):\n    timestamp = models.DateTimeField()\n    sensor_id = models.CharField(max_length=50)\n    temperature = models.FloatField()\n\n    class Meta:\n        indexes = [models.Index(fields=[\"timestamp\"])]\n\nMigrate:\npython manage.py makemigrations\npython manage.py migrate",
    "crumbs": [
      "Blog",
      "Databases",
      "PostgreSQL",
      "TimescaleDB"
    ]
  },
  {
    "objectID": "Databases/PostgreSQL/timescaledb.html#convert-to-hypertable",
    "href": "Databases/PostgreSQL/timescaledb.html#convert-to-hypertable",
    "title": "TimescaleDB",
    "section": "üîÅ 4. Convert to Hypertable",
    "text": "üîÅ 4. Convert to Hypertable\nRun this via psql or Django connection.cursor():\nSELECT create_hypertable('yourapp_sensorreading', 'timestamp', if_not_exists =&gt; TRUE);\nOr dynamically in Django:\nfrom django.db import connection\nwith connection.cursor() as cursor:\n    cursor.execute(\"SELECT create_hypertable('yourapp_sensorreading', 'timestamp', if_not_exists =&gt; TRUE);\")",
    "crumbs": [
      "Blog",
      "Databases",
      "PostgreSQL",
      "TimescaleDB"
    ]
  },
  {
    "objectID": "Databases/PostgreSQL/timescaledb.html#time-bucket-aggregation-rollups",
    "href": "Databases/PostgreSQL/timescaledb.html#time-bucket-aggregation-rollups",
    "title": "TimescaleDB",
    "section": "‚è±Ô∏è 5. Time Bucket + Aggregation (Rollups)",
    "text": "‚è±Ô∏è 5. Time Bucket + Aggregation (Rollups)\n\nBasic hourly average query:\nSELECT time_bucket('1 hour', timestamp) AS hour,\n       AVG(temperature)\nFROM yourapp_sensorreading\nGROUP BY hour\nORDER BY hour;\nUse this in Django with raw SQL and convert to Pandas for dashboards.",
    "crumbs": [
      "Blog",
      "Databases",
      "PostgreSQL",
      "TimescaleDB"
    ]
  },
  {
    "objectID": "Databases/PostgreSQL/timescaledb.html#continuous-aggregates",
    "href": "Databases/PostgreSQL/timescaledb.html#continuous-aggregates",
    "title": "TimescaleDB",
    "section": "üìä 6. Continuous Aggregates",
    "text": "üìä 6. Continuous Aggregates\nCREATE MATERIALIZED VIEW hourly_temp\nWITH (timescaledb.continuous) AS\nSELECT time_bucket('1 hour', timestamp) AS bucket,\n       sensor_id,\n       AVG(temperature) AS avg_temp\nFROM yourapp_sensorreading\nGROUP BY bucket, sensor_id;\n\nAutomate refresh:\nSELECT add_continuous_aggregate_policy('hourly_temp',\n  start_offset =&gt; INTERVAL '7 days',\n  end_offset =&gt; INTERVAL '1 hour',\n  schedule_interval =&gt; INTERVAL '30 minutes');",
    "crumbs": [
      "Blog",
      "Databases",
      "PostgreSQL",
      "TimescaleDB"
    ]
  },
  {
    "objectID": "Databases/PostgreSQL/timescaledb.html#data-compression",
    "href": "Databases/PostgreSQL/timescaledb.html#data-compression",
    "title": "TimescaleDB",
    "section": "üßä 7. Data Compression",
    "text": "üßä 7. Data Compression\nALTER TABLE yourapp_sensorreading\nSET (timescaledb.compress, timescaledb.compress_segmentby = 'sensor_id');\n\nSELECT compress_chunk(i) FROM show_chunks('yourapp_sensorreading') i;\n\nPolicy:\nSELECT add_compression_policy('yourapp_sensorreading', INTERVAL '30 days');",
    "crumbs": [
      "Blog",
      "Databases",
      "PostgreSQL",
      "TimescaleDB"
    ]
  },
  {
    "objectID": "Databases/PostgreSQL/timescaledb.html#query-via-django-orm-or-raw-sql",
    "href": "Databases/PostgreSQL/timescaledb.html#query-via-django-orm-or-raw-sql",
    "title": "TimescaleDB",
    "section": "üß† 8. Query via Django ORM or Raw SQL",
    "text": "üß† 8. Query via Django ORM or Raw SQL\n\nDjango ORM (limited for rollups):\nfrom yourapp.models import SensorReading\n\nSensorReading.objects.filter(\n    timestamp__gte=timezone.now() - timedelta(days=7)\n).aggregate(Avg('temperature'))\n\n\nRaw SQL with Pandas:\nfrom django.db import connection\nimport pandas as pd\n\nquery = \"\"\"\nSELECT time_bucket('1 hour', timestamp) AS hour,\n       AVG(temperature) as avg_temp\nFROM yourapp_sensorreading\nWHERE timestamp &gt; now() - interval '7 days'\nGROUP BY hour ORDER BY hour;\n\"\"\"\n\ndf = pd.read_sql(query, connection)",
    "crumbs": [
      "Blog",
      "Databases",
      "PostgreSQL",
      "TimescaleDB"
    ]
  },
  {
    "objectID": "Databases/PostgreSQL/timescaledb.html#visualize-with-jupyter",
    "href": "Databases/PostgreSQL/timescaledb.html#visualize-with-jupyter",
    "title": "TimescaleDB",
    "section": "üßÆ 9. Visualize with Jupyter",
    "text": "üßÆ 9. Visualize with Jupyter\nPerfect for exploring time-series:\nimport matplotlib.pyplot as plt\n\ndf.plot(x='hour', y='avg_temp', title='Hourly Avg Temp')\nplt.grid(True)\nplt.show()",
    "crumbs": [
      "Blog",
      "Databases",
      "PostgreSQL",
      "TimescaleDB"
    ]
  },
  {
    "objectID": "Databases/PostgreSQL/timescaledb.html#summary-table",
    "href": "Databases/PostgreSQL/timescaledb.html#summary-table",
    "title": "TimescaleDB",
    "section": "üìò Summary Table",
    "text": "üìò Summary Table\n\n\n\n\n\n\n\nFeature\nTimescaleDB Usage\n\n\n\n\nStore time-series\nRegular Django model + create_hypertable()\n\n\nPartitioning\nAutomatic via hypertables\n\n\nAggregations\ntime_bucket(), GROUP BY\n\n\nContinuous aggregates\nFast rollups with materialized views\n\n\nCompression\nSave space, improve historical query performance\n\n\nCompatibility\nFull Django & PostgreSQL support",
    "crumbs": [
      "Blog",
      "Databases",
      "PostgreSQL",
      "TimescaleDB"
    ]
  },
  {
    "objectID": "Databases/PostgreSQL/timescaledb.html#tools-add-ons",
    "href": "Databases/PostgreSQL/timescaledb.html#tools-add-ons",
    "title": "TimescaleDB",
    "section": "üõ†Ô∏è Tools & Add-ons",
    "text": "üõ†Ô∏è Tools & Add-ons\n\nüìä Grafana for live dashboards\nüì¶ pgAdmin for TimescaleDB queries\nüîÅ pg_cron for DB-side scheduling\nüß™ tsbs for benchmarking",
    "crumbs": [
      "Blog",
      "Databases",
      "PostgreSQL",
      "TimescaleDB"
    ]
  },
  {
    "objectID": "Databases/PostgreSQL/timescaledb.html#starter-ideas",
    "href": "Databases/PostgreSQL/timescaledb.html#starter-ideas",
    "title": "TimescaleDB",
    "section": "üß™ Starter Ideas",
    "text": "üß™ Starter Ideas\n\nIoT metrics dashboard (sensor data)\nHealth tracker (heart rate over time)\nFinancial tick data rollups\nWebsite traffic analysis (time-bucketed)",
    "crumbs": [
      "Blog",
      "Databases",
      "PostgreSQL",
      "TimescaleDB"
    ]
  },
  {
    "objectID": "Databases/sql.html",
    "href": "Databases/sql.html",
    "title": "SQL",
    "section": "",
    "text": "Language for Databases: SQL is used to communicate with relational database management systems (RDBMS) such as MySQL, PostgreSQL, SQLite, Oracle, and Microsoft SQL Server.\nDeclarative Language: SQL focuses on what data to retrieve or modify rather than how to do it, which the database engine handles.",
    "crumbs": [
      "Blog",
      "Databases",
      "SQL"
    ]
  },
  {
    "objectID": "Databases/sql.html#django-orm-to-sql",
    "href": "Databases/sql.html#django-orm-to-sql",
    "title": "SQL",
    "section": "Django ORM to SQL",
    "text": "Django ORM to SQL\n\nIn Django, the ORM (Object-Relational Mapping) translates SQL operations into Python code, allowing you to interact with a database using Django‚Äôs high-level QuerySet API. Here‚Äôs how common SQL concepts map to Django ORM concepts:\n\n\n1. Models as Tables\nIn Django, each database table is represented by a model class. Each field in the model corresponds to a column in the database table, and each instance of the model represents a row.\n\nSQL Table Definition\nCREATE TABLE employee (\n    id SERIAL PRIMARY KEY,\n    name VARCHAR(100),\n    department VARCHAR(50),\n    salary DECIMAL\n);\n\n\nDjango Model\nfrom django.db import models\n\nclass Employee(models.Model):\n    name = models.CharField(max_length=100)\n    department = models.CharField(max_length=50)\n    salary = models.DecimalField(max_digits=10, decimal_places=2)\n\n\n\n2. SQL Data Types to Django Field Types\n\n\n\nSQL Type\nDjango Field Type\n\n\n\n\nVARCHAR\nmodels.CharField\n\n\nINTEGER\nmodels.IntegerField\n\n\nDECIMAL\nmodels.DecimalField\n\n\nDATE\nmodels.DateField\n\n\nTIMESTAMP\nmodels.DateTimeField\n\n\nBOOLEAN\nmodels.BooleanField\n\n\nSERIAL\nmodels.AutoField (Primary Key by default)\n\n\n\n\n\n3. Basic CRUD Operations\n\nCREATE: Inserting Data\nIn SQL:\nINSERT INTO employee (name, department, salary) VALUES ('John Doe', 'Sales', 50000);\nIn Django ORM:\nEmployee.objects.create(name=\"John Doe\", department=\"Sales\", salary=50000)\n\n\nREAD: Querying Data\n\nSELECT All: Retrieve all rows from a table.\nSQL: sql   SELECT * FROM employee;\nDjango ORM: python   Employee.objects.all()\nSELECT with WHERE Condition:\nSQL: sql   SELECT * FROM employee WHERE department = 'Sales';\nDjango ORM: python   Employee.objects.filter(department=\"Sales\")\nSELECT with Filtering and Ordering:\nSQL: sql   SELECT * FROM employee WHERE department = 'Sales' ORDER BY salary DESC;\nDjango ORM: python   Employee.objects.filter(department=\"Sales\").order_by(\"-salary\")\n\n\n\nUPDATE: Modifying Data\nIn SQL:\nUPDATE employee SET salary = 55000 WHERE name = 'John Doe';\nIn Django ORM:\nEmployee.objects.filter(name=\"John Doe\").update(salary=55000)\n\n\nDELETE: Removing Data\nIn SQL:\nDELETE FROM employee WHERE name = 'John Doe';\nIn Django ORM:\nEmployee.objects.filter(name=\"John Doe\").delete()\n\n\n\n4. Relationships\nDjango provides fields like ForeignKey, OneToOneField, and ManyToManyField to define relationships between models. These fields translate to JOIN operations in SQL.\n\nOne-to-Many Relationship\nSQL:\nCREATE TABLE department (\n    id SERIAL PRIMARY KEY,\n    name VARCHAR(50)\n);\n\nCREATE TABLE employee (\n    id SERIAL PRIMARY KEY,\n    name VARCHAR(100),\n    department_id INTEGER REFERENCES department(id)\n);\nDjango Models:\nclass Department(models.Model):\n    name = models.CharField(max_length=50)\n\nclass Employee(models.Model):\n    name = models.CharField(max_length=100)\n    department = models.ForeignKey(Department, on_delete=models.CASCADE)\nQuerying with a Foreign Key:\n# Get all employees in a specific department\nsales_dept = Department.objects.get(name=\"Sales\")\nemployees = Employee.objects.filter(department=sales_dept)\n\n\nMany-to-Many Relationship\nSQL:\nCREATE TABLE project (\n    id SERIAL PRIMARY KEY,\n    name VARCHAR(100)\n);\n\nCREATE TABLE employee_project (\n    employee_id INTEGER REFERENCES employee(id),\n    project_id INTEGER REFERENCES project(id),\n    PRIMARY KEY (employee_id, project_id)\n);\nDjango Models:\nclass Project(models.Model):\n    name = models.CharField(max_length=100)\n\nclass Employee(models.Model):\n    name = models.CharField(max_length=100)\n    projects = models.ManyToManyField(Project)\nQuerying Many-to-Many Relationships:\n# Get all projects for a specific employee\nemployee = Employee.objects.get(name=\"John Doe\")\nprojects = employee.projects.all()\n\n\n\n5. Aggregation and Grouping\nThe Django ORM provides methods like annotate() and aggregate() for aggregation and grouping operations, similar to SQL‚Äôs GROUP BY and aggregate functions like COUNT(), SUM(), AVG().\n\nExample: COUNT and GROUP BY\nSQL:\nSELECT department, COUNT(*) FROM employee GROUP BY department;\nDjango ORM:\nfrom django.db.models import Count\n\nEmployee.objects.values('department').annotate(count=Count('id'))\n\n\nExample: SUM, AVG, MIN, MAX\nSQL:\nSELECT AVG(salary) FROM employee WHERE department = 'Sales';\nDjango ORM:\nfrom django.db.models import Avg\n\nEmployee.objects.filter(department=\"Sales\").aggregate(Avg('salary'))\n\n\n\n6. Joins with Django ORM\nThe Django ORM automatically performs joins when you query across related models.\n\nInner Join (default with ForeignKey)\nSQL:\nSELECT employee.name, department.name\nFROM employee\nJOIN department ON employee.department_id = department.id;\nDjango ORM:\nEmployee.objects.select_related('department').values('name', 'department__name')\n\n\nLeft Outer Join (using prefetch_related for Many-to-Many or reverse ForeignKey relationships)\nEmployee.objects.prefetch_related('projects')\n\n\n\n7. Subqueries\nYou can use Django‚Äôs Subquery and OuterRef classes to perform subqueries within queries.\n\nExample: Subquery with Aggregate\nSQL:\nSELECT name, salary\nFROM employee\nWHERE salary &gt; (SELECT AVG(salary) FROM employee);\nDjango ORM:\nfrom django.db.models import Subquery, OuterRef, Avg\n\navg_salary = Employee.objects.aggregate(Avg('salary'))['salary__avg']\nhigh_earners = Employee.objects.filter(salary__gt=avg_salary)\n\n\n\n8. Transactions in Django ORM\nDjango‚Äôs transaction.atomic function allows you to manage transactions to ensure that operations are completed as a unit, similar to SQL‚Äôs BEGIN TRANSACTION, COMMIT, and ROLLBACK.\nfrom django.db import transaction\n\ntry:\n    with transaction.atomic():\n        Employee.objects.create(name=\"John Doe\", salary=60000)\n        Employee.objects.create(name=\"Jane Doe\", salary=70000)\nexcept:\n    print(\"Transaction failed\")\n\n\n9. Raw SQL in Django\nIn cases where complex queries are required, Django allows you to execute raw SQL directly.\nfrom django.db import connection\n\nwith connection.cursor() as cursor:\n    cursor.execute(\"SELECT * FROM employee WHERE salary &gt; %s\", [50000])\n    rows = cursor.fetchall()\n\n\nSummary\n\n\n\n\n\n\n\nSQL Concept\nDjango ORM Equivalent\n\n\n\n\nTable\nModel\n\n\nRow\nModel instance\n\n\nColumn\nModel field\n\n\nSELECT\n.all(), .filter(), .get()\n\n\nINSERT\n.create()\n\n\nUPDATE\n.update()\n\n\nDELETE\n.delete()\n\n\nJOIN\n.select_related(), .prefetch_related()\n\n\nGROUP BY\n.values(), .annotate()\n\n\nAggregate Functions (SUM, AVG, etc.)\n.aggregate(), .annotate()\n\n\nTransactions\ntransaction.atomic()\n\n\nRaw SQL\nconnection.cursor().execute()\n\n\n\nThe Django ORM provides a high-level, Pythonic interface to interact with your database, which is both powerful and flexible. Understanding how SQL concepts translate into Django ORM methods allows you to leverage the full potential of Django‚Äôs database management capabilities.",
    "crumbs": [
      "Blog",
      "Databases",
      "SQL"
    ]
  },
  {
    "objectID": "Databases/duckdb.html",
    "href": "Databases/duckdb.html",
    "title": "DuckDB",
    "section": "",
    "text": "In-process OLAP database: It runs inside your application (like SQLite) but is optimized for analytics queries (OLAP), not transactional workloads (OLTP).\nZero-config: No server to spin up, no dependencies. You just import duckdb and start querying.\nColumnar engine: Uses a column-store format with vectorized execution, making it blazing fast for aggregation and scanning large datasets.\nModern SQL dialect: Full SQL support (joins, windows, CTEs, JSON, UDFs).",
    "crumbs": [
      "Blog",
      "Databases",
      "DuckDB"
    ]
  },
  {
    "objectID": "Databases/duckdb.html#what-is-duckdb",
    "href": "Databases/duckdb.html#what-is-duckdb",
    "title": "DuckDB",
    "section": "",
    "text": "In-process OLAP database: It runs inside your application (like SQLite) but is optimized for analytics queries (OLAP), not transactional workloads (OLTP).\nZero-config: No server to spin up, no dependencies. You just import duckdb and start querying.\nColumnar engine: Uses a column-store format with vectorized execution, making it blazing fast for aggregation and scanning large datasets.\nModern SQL dialect: Full SQL support (joins, windows, CTEs, JSON, UDFs).",
    "crumbs": [
      "Blog",
      "Databases",
      "DuckDB"
    ]
  },
  {
    "objectID": "Databases/duckdb.html#key-features",
    "href": "Databases/duckdb.html#key-features",
    "title": "DuckDB",
    "section": "üîπ Key Features",
    "text": "üîπ Key Features\n\n1. Data Access\n\nReads CSV, Parquet, JSON, SQLite, Pandas, Polars, Arrow, Iceberg, MotherDuck (cloud).\nCan query files directly (e.g., SELECT * FROM 'file.parquet').\nCan query in-memory dataframes without copying.\n\n\n\n2. Performance\n\nVectorized execution: Processes chunks of columns in CPU cache.\nParallelism: Multithreaded query execution.\nEfficient compression: Similar to Parquet, built for scan speed.\nBenchmarks show it often beats Pandas/Polars for SQL-style analytics on millions-to-billions of rows.\n\n\n\n3. Integration\n\nPython / R / C++ / CLI bindings.\nNative support for Pandas/Polars ‚ÜîÔ∏é DuckDB interchange.\nCan be used as a lightweight ETL or embedded query layer inside ML pipelines.\ndbt + DuckDB is popular for lightweight data warehousing.\n\n\n\n4. SQL Features\n\nJoins, aggregations, window functions, subqueries.\nJSON functions (json_extract, json_group_array).\nUser-defined functions in Python.\nTime-travel style queries with Iceberg.\n\n\n\n5. Persistence\n\nDefault is in-memory, but you can duckdb.connect(\"file.duckdb\") to persist.\nTables can be native DuckDB storage or external (Parquet, CSV, Arrow).\nNo server process: library embedded in your app.",
    "crumbs": [
      "Blog",
      "Databases",
      "DuckDB"
    ]
  },
  {
    "objectID": "Databases/duckdb.html#typical-use-cases",
    "href": "Databases/duckdb.html#typical-use-cases",
    "title": "DuckDB",
    "section": "üîπ Typical Use Cases",
    "text": "üîπ Typical Use Cases\n\n\n\n\n\n\n\nUse Case\nWhy DuckDB Works Well\n\n\n\n\nAd-hoc analytics\nQuery Parquet/CSV files directly with SQL.\n\n\nReplacement for Pandas\nFaster joins, group-bys, aggregations.\n\n\nData science prep\nIntegrates with ML workflows (Pandas/Polars/Arrow).\n\n\nLocal OLAP engine\nCan handle 100M‚Äì1B rows in memory on a laptop.\n\n\nEmbedded analytics\nWorks inside apps, no external server needed.\n\n\nETL lightweight warehouse\nWorks with dbt, Iceberg, and MotherDuck for scaling.",
    "crumbs": [
      "Blog",
      "Databases",
      "DuckDB"
    ]
  },
  {
    "objectID": "Databases/duckdb.html#limitations",
    "href": "Databases/duckdb.html#limitations",
    "title": "DuckDB",
    "section": "üîπ Limitations",
    "text": "üîπ Limitations\n\nNot an OLTP database: No concurrent writes or high transaction rates.\nMemory-bound: Runs in your process memory; not built for multi-terabyte datasets (unless combined with external storage).\nEcosystem still maturing: Great for analytics, but lacks advanced role/security features of Postgres.\nNo indexes (yet): Optimized for full scans, not point lookups.",
    "crumbs": [
      "Blog",
      "Databases",
      "DuckDB"
    ]
  },
  {
    "objectID": "Databases/duckdb.html#ecosystem",
    "href": "Databases/duckdb.html#ecosystem",
    "title": "DuckDB",
    "section": "üîπ Ecosystem",
    "text": "üîπ Ecosystem\n\nMotherDuck: Cloud service extending DuckDB (shared storage, scaling, persistence).\ndbt-duckdb: Run dbt models against local files and Parquet with DuckDB.\nPolars + DuckDB: Polars for Pythonic transformations, DuckDB for SQL joins/aggregations.\nData Fusion: Works well as a query layer over Iceberg/Parquet lakes.",
    "crumbs": [
      "Blog",
      "Databases",
      "DuckDB"
    ]
  },
  {
    "objectID": "Databases/duckdb.html#example-workflows",
    "href": "Databases/duckdb.html#example-workflows",
    "title": "DuckDB",
    "section": "üîπ Example Workflows",
    "text": "üîπ Example Workflows\n\nQuery a Parquet file directly\nimport duckdb\ncon = duckdb.connect()\ndf = con.execute(\"SELECT station, AVG(temp) FROM 'measurements.parquet' GROUP BY station\").df()\n\n\nInterop with Pandas\nimport pandas as pd, duckdb\ndf = pd.read_csv(\"big.csv\")\nduckdb.query(\"SELECT col1, COUNT(*) FROM df GROUP BY col1\").df()\n\n\nSave to persistent DB\ncon = duckdb.connect(\"analytics.duckdb\")\ncon.execute(\"CREATE TABLE IF NOT EXISTS sales AS SELECT * FROM 'sales.parquet'\")",
    "crumbs": [
      "Blog",
      "Databases",
      "DuckDB"
    ]
  },
  {
    "objectID": "Databases/duckdb.html#performance-outlook",
    "href": "Databases/duckdb.html#performance-outlook",
    "title": "DuckDB",
    "section": "üîπ Performance Outlook",
    "text": "üîπ Performance Outlook\n\nHandles billions of rows on a laptop with enough memory.\nBenchmarks: scanning a 1B row CSV can take ~30‚Äì60s; Parquet is much faster (~10‚Äì20s).\nWith Polars/DuckDB hybrid workflows, you can approach Rust-level performance with the flexibility of Python.",
    "crumbs": [
      "Blog",
      "Databases",
      "DuckDB"
    ]
  },
  {
    "objectID": "Databases/duckdb.html#when-to-use-vs-alternatives",
    "href": "Databases/duckdb.html#when-to-use-vs-alternatives",
    "title": "DuckDB",
    "section": "üîπ When to Use vs Alternatives",
    "text": "üîπ When to Use vs Alternatives\n\n\n\n\n\n\n\nTool\nBest For\n\n\n\n\nDuckDB\nLocal analytics, SQL over files, Pandas replacement\n\n\nSQLite\nEmbedded OLTP, small apps\n\n\nPolars\nPythonic fast dataframe ops (no SQL)\n\n\nPandas\nLegacy ecosystem, flexibility, but slower\n\n\nPostgres/BigQuery/Snowflake\nMulti-user, transactional, massive data warehouse\n\n\n\n\n‚úÖ In short: DuckDB is the SQLite of analytics. It‚Äôs ideal when you want SQL-powered analytics without a big warehouse or cluster, yet still want to handle 100M‚Äì1B rows efficiently. It‚Äôs becoming a cornerstone of the modern data stack, especially when paired with Parquet, Arrow, and dbt.",
    "crumbs": [
      "Blog",
      "Databases",
      "DuckDB"
    ]
  },
  {
    "objectID": "rest_api_standard.html",
    "href": "rest_api_standard.html",
    "title": "REST API Standard",
    "section": "",
    "text": "Principle\nDescription\n\n\n\n\nStateless\nEach request contains all information needed (no session state on server).\n\n\nClient-server\nFrontend and backend are decoupled.\n\n\nCacheable\nResponses can be cached where appropriate.\n\n\nUniform interface\nStandardized resource access via HTTP verbs.\n\n\nLayered system\nIntermediary layers (e.g., load balancers, caches) are allowed.\n\n\nCode on demand\n(Optional) Clients can download and execute code from the server.",
    "crumbs": [
      "Blog",
      "REST API Standard"
    ]
  },
  {
    "objectID": "rest_api_standard.html#what-is-a-rest-api",
    "href": "rest_api_standard.html#what-is-a-rest-api",
    "title": "REST API Standard",
    "section": "",
    "text": "Principle\nDescription\n\n\n\n\nStateless\nEach request contains all information needed (no session state on server).\n\n\nClient-server\nFrontend and backend are decoupled.\n\n\nCacheable\nResponses can be cached where appropriate.\n\n\nUniform interface\nStandardized resource access via HTTP verbs.\n\n\nLayered system\nIntermediary layers (e.g., load balancers, caches) are allowed.\n\n\nCode on demand\n(Optional) Clients can download and execute code from the server.",
    "crumbs": [
      "Blog",
      "REST API Standard"
    ]
  },
  {
    "objectID": "rest_api_standard.html#standard-http-methods-in-rest",
    "href": "rest_api_standard.html#standard-http-methods-in-rest",
    "title": "REST API Standard",
    "section": "üöÄ 2. Standard HTTP Methods in REST",
    "text": "üöÄ 2. Standard HTTP Methods in REST\n\n\n\nHTTP Method\nUsage\nExample\n\n\n\n\nGET\nRead\nGET /users/123\n\n\nPOST\nCreate\nPOST /users\n\n\nPUT\nReplace (full)\nPUT /users/123\n\n\nPATCH\nUpdate (partial)\nPATCH /users/123\n\n\nDELETE\nDelete\nDELETE /users/123",
    "crumbs": [
      "Blog",
      "REST API Standard"
    ]
  },
  {
    "objectID": "rest_api_standard.html#uri-naming-conventions",
    "href": "rest_api_standard.html#uri-naming-conventions",
    "title": "REST API Standard",
    "section": "üìÇ 3. URI Naming Conventions",
    "text": "üìÇ 3. URI Naming Conventions\n\nUse nouns, not verbs: ‚úÖ GET /users ‚ùå GET /getUsers\nUse plural resource names: ‚úÖ /books ‚ùå /book\nNest relationships: GET /users/123/orders ‚Üí orders for a user\nUse query parameters for filtering: /books?genre=sci-fi&author=asimov",
    "crumbs": [
      "Blog",
      "REST API Standard"
    ]
  },
  {
    "objectID": "rest_api_standard.html#status-codes",
    "href": "rest_api_standard.html#status-codes",
    "title": "REST API Standard",
    "section": "‚úÖ 4. Status Codes",
    "text": "‚úÖ 4. Status Codes\n\n\n\nCode\nMeaning\nWhen to Use\n\n\n\n\n200\nOK\nGET, PUT, PATCH success\n\n\n201\nCreated\nSuccessful resource creation (POST)\n\n\n204\nNo Content\nDELETE or PUT success with no body\n\n\n400\nBad Request\nMalformed request or validation error\n\n\n401\nUnauthorized\nAuth needed\n\n\n403\nForbidden\nAuth provided but access denied\n\n\n404\nNot Found\nResource doesn‚Äôt exist\n\n\n409\nConflict\nDuplicate or conflicting state\n\n\n500\nInternal Server Error\nUnhandled server error",
    "crumbs": [
      "Blog",
      "REST API Standard"
    ]
  },
  {
    "objectID": "rest_api_standard.html#request-response-structure",
    "href": "rest_api_standard.html#request-response-structure",
    "title": "REST API Standard",
    "section": "üß™ 5. Request & Response Structure",
    "text": "üß™ 5. Request & Response Structure\n\nJSON Request:\nPOST /users\n{\n  \"email\": \"user@example.com\",\n  \"password\": \"secure123\"\n}\n\n\nJSON Response (Success):\n{\n  \"id\": 1,\n  \"email\": \"user@example.com\",\n  \"created_at\": \"2025-06-17T10:00:00Z\"\n}\n\n\nJSON Response (Error):\n{\n  \"error\": \"ValidationError\",\n  \"message\": \"Email already exists\"\n}",
    "crumbs": [
      "Blog",
      "REST API Standard"
    ]
  },
  {
    "objectID": "rest_api_standard.html#authentication-security",
    "href": "rest_api_standard.html#authentication-security",
    "title": "REST API Standard",
    "section": "üîê 6. Authentication & Security",
    "text": "üîê 6. Authentication & Security\n\nUse HTTPS only.\nPrefer JWT or OAuth 2.0 for authentication.\nUse rate limiting to prevent abuse.\nValidate and sanitize all input to avoid injection attacks.",
    "crumbs": [
      "Blog",
      "REST API Standard"
    ]
  },
  {
    "objectID": "rest_api_standard.html#versioning",
    "href": "rest_api_standard.html#versioning",
    "title": "REST API Standard",
    "section": "üìã 7. Versioning",
    "text": "üìã 7. Versioning\nBest options:\n\nURL-based: /v1/users\nHeader-based: Accept: application/vnd.myapi.v1+json\n\n\n‚úÖ Avoid breaking changes without versioning.",
    "crumbs": [
      "Blog",
      "REST API Standard"
    ]
  },
  {
    "objectID": "rest_api_standard.html#filtering-sorting-pagination",
    "href": "rest_api_standard.html#filtering-sorting-pagination",
    "title": "REST API Standard",
    "section": "üìä 8. Filtering, Sorting, Pagination",
    "text": "üìä 8. Filtering, Sorting, Pagination\n\n\n\nFeature\nQuery Format Example\n\n\n\n\nFiltering\n/products?category=clothing&color=red\n\n\nSorting\n/products?sort=-price (descending)\n\n\nPagination\n/products?page=2&page_size=50",
    "crumbs": [
      "Blog",
      "REST API Standard"
    ]
  },
  {
    "objectID": "rest_api_standard.html#hateoas-optional-advanced",
    "href": "rest_api_standard.html#hateoas-optional-advanced",
    "title": "REST API Standard",
    "section": "üîÑ 9. HATEOAS (Optional Advanced)",
    "text": "üîÑ 9. HATEOAS (Optional Advanced)\nHypermedia as the Engine of Application State:\n{\n  \"id\": 123,\n  \"name\": \"Example\",\n  \"_links\": {\n    \"self\": { \"href\": \"/items/123\" },\n    \"next\": { \"href\": \"/items/124\" }\n  }\n}\nNot widely used, but adheres to pure REST principles.",
    "crumbs": [
      "Blog",
      "REST API Standard"
    ]
  },
  {
    "objectID": "rest_api_standard.html#openapi-swagger",
    "href": "rest_api_standard.html#openapi-swagger",
    "title": "REST API Standard",
    "section": "üß± 10. OpenAPI / Swagger",
    "text": "üß± 10. OpenAPI / Swagger\nDocument your API:\n\nGenerate interactive docs\nExample:\n\npaths:\n  /users:\n    get:\n      summary: Get all users\n      responses:\n        '200':\n          description: OK\nTools: Swagger UI, Redoc, Postman",
    "crumbs": [
      "Blog",
      "REST API Standard"
    ]
  },
  {
    "objectID": "rest_api_standard.html#forward-thinking-modern-additions",
    "href": "rest_api_standard.html#forward-thinking-modern-additions",
    "title": "REST API Standard",
    "section": "üìà 11. Forward-Thinking & Modern Additions",
    "text": "üìà 11. Forward-Thinking & Modern Additions\n\n\n\n\n\n\n\nConcept\nDescription\n\n\n\n\nGraphQL\nAlternative to REST for complex querying needs\n\n\ngRPC\nHigh-performance, binary protocol\n\n\nREST + Events\nUse Webhooks or Server-Sent Events alongside REST\n\n\nJSON:API\nStrict REST format standard (https://jsonapi.org/)\n\n\nAsync APIs\nFor microservices, combine REST with messaging queues",
    "crumbs": [
      "Blog",
      "REST API Standard"
    ]
  },
  {
    "objectID": "rest_api_standard.html#example-project-structure",
    "href": "rest_api_standard.html#example-project-structure",
    "title": "REST API Standard",
    "section": "üõ†Ô∏è 12. Example Project Structure",
    "text": "üõ†Ô∏è 12. Example Project Structure\n/api\n  /v1\n    users/\n      views.py\n      serializers.py\n      urls.py\n      models.py\n/tests\n/docs",
    "crumbs": [
      "Blog",
      "REST API Standard"
    ]
  },
  {
    "objectID": "rest_api_standard.html#summary-table",
    "href": "rest_api_standard.html#summary-table",
    "title": "REST API Standard",
    "section": "üìå Summary Table",
    "text": "üìå Summary Table\n\n\n\nArea\nStandard Practice\n\n\n\n\nHTTP Methods\nUse GET, POST, PUT, PATCH, DELETE\n\n\nURIs\nUse nouns, plurals, nested resources\n\n\nAuth\nJWT, OAuth2, HTTPS\n\n\nResponses\nConsistent JSON + meaningful status codes\n\n\nDocs\nUse OpenAPI/Swagger\n\n\nVersioning\nURL or Header-based\n\n\nPagination\nOffset or cursor-based",
    "crumbs": [
      "Blog",
      "REST API Standard"
    ]
  },
  {
    "objectID": "Databases/mysql_&_mariadb.html",
    "href": "Databases/mysql_&_mariadb.html",
    "title": "MariaDB and MySQL",
    "section": "",
    "text": "Origin: Developed by MySQL AB in 1995, acquired by Oracle Corporation in 2010.\nLicense: Open-source under the GPL license, with a commercial version available.\nCompatibility: Supports multiple platforms including Linux, Windows, macOS.",
    "crumbs": [
      "Blog",
      "Databases",
      "MariaDB and MySQL"
    ]
  },
  {
    "objectID": "Databases/mysql_&_mariadb.html#introduction-to-mysql",
    "href": "Databases/mysql_&_mariadb.html#introduction-to-mysql",
    "title": "MariaDB and MySQL",
    "section": "",
    "text": "Origin: Developed by MySQL AB in 1995, acquired by Oracle Corporation in 2010.\nLicense: Open-source under the GPL license, with a commercial version available.\nCompatibility: Supports multiple platforms including Linux, Windows, macOS.",
    "crumbs": [
      "Blog",
      "Databases",
      "MariaDB and MySQL"
    ]
  },
  {
    "objectID": "Databases/mysql_&_mariadb.html#installation",
    "href": "Databases/mysql_&_mariadb.html#installation",
    "title": "MariaDB and MySQL",
    "section": "Installation",
    "text": "Installation\nsudo apt update\nsudo apt install mysql-server",
    "crumbs": [
      "Blog",
      "Databases",
      "MariaDB and MySQL"
    ]
  },
  {
    "objectID": "Databases/mysql_&_mariadb.html#introduction-to-mariadb",
    "href": "Databases/mysql_&_mariadb.html#introduction-to-mariadb",
    "title": "MariaDB and MySQL",
    "section": "Introduction to MariaDB",
    "text": "Introduction to MariaDB\n\nOrigin: Created by the original developers of MySQL after Oracle acquired MySQL.\nCompatibility: Highly compatible with MySQL, allowing easy migration of databases.\nLicense: Open-source under the GPL license.",
    "crumbs": [
      "Blog",
      "Databases",
      "MariaDB and MySQL"
    ]
  },
  {
    "objectID": "Databases/mysql_&_mariadb.html#installation-1",
    "href": "Databases/mysql_&_mariadb.html#installation-1",
    "title": "MariaDB and MySQL",
    "section": "Installation",
    "text": "Installation\nsudo apt update\nsudo apt install mariadb-server",
    "crumbs": [
      "Blog",
      "Databases",
      "MariaDB and MySQL"
    ]
  },
  {
    "objectID": "Databases/mysql_&_mariadb.html#configuration",
    "href": "Databases/mysql_&_mariadb.html#configuration",
    "title": "MariaDB and MySQL",
    "section": "Configuration",
    "text": "Configuration\n\nConfiguration File: The primary configuration file is my.cnf or my.ini.\nLocation: Typically found in /etc/mysql/ or /etc/ on Linux and in the MariaDB installation directory on Windows.",
    "crumbs": [
      "Blog",
      "Databases",
      "MariaDB and MySQL"
    ]
  },
  {
    "objectID": "Databases/mysql_&_mariadb.html#basic-usage",
    "href": "Databases/mysql_&_mariadb.html#basic-usage",
    "title": "MariaDB and MySQL",
    "section": "Basic Usage",
    "text": "Basic Usage\nsudo systemctl start mariadb\nsudo systemctl stop mariadb\nsudo systemctl enable mariadb\n\nAccessing the MariaDB Shell\nmysql -u root -p\n\n\nCreating a Database\nCREATE DATABASE mydatabase;\n\n\nCreating a User and Granting Permissions\nCREATE USER 'myuser'@'localhost' IDENTIFIED BY 'mypassword';\nGRANT ALL PRIVILEGES ON mydatabase.* TO 'myuser'@'localhost';\nFLUSH PRIVILEGES;",
    "crumbs": [
      "Blog",
      "Databases",
      "MariaDB and MySQL"
    ]
  },
  {
    "objectID": "Databases/mysql_&_mariadb.html#database-operations",
    "href": "Databases/mysql_&_mariadb.html#database-operations",
    "title": "MariaDB and MySQL",
    "section": "Database Operations",
    "text": "Database Operations\n\nCreating Tables\nUSE mydatabase;\nCREATE TABLE mytable (\n    id INT PRIMARY KEY AUTO_INCREMENT,\n    name VARCHAR(100),\n    age INT\n);\n\n\nInserting Data\nINSERT INTO mytable (name, age) VALUES ('Alice', 30);\n\n\nQuerying Data\nSELECT * FROM mytable;\n\n\nUpdating Data\nUPDATE mytable SET age = 31 WHERE name = 'Alice';\n\n\nDeleting Data\nDELETE FROM mytable WHERE name = 'Alice';",
    "crumbs": [
      "Blog",
      "Databases",
      "MariaDB and MySQL"
    ]
  },
  {
    "objectID": "Databases/mysql_&_mariadb.html#advanced-features",
    "href": "Databases/mysql_&_mariadb.html#advanced-features",
    "title": "MariaDB and MySQL",
    "section": "Advanced Features",
    "text": "Advanced Features\n\nStored Procedures\nDELIMITER //\nCREATE PROCEDURE myprocedure()\nBEGIN\n    SELECT * FROM mytable;\nEND //\nDELIMITER ;\nCALL myprocedure();\n\n\nTriggers\nCREATE TRIGGER before_insert_mytable\nBEFORE INSERT ON mytable\nFOR EACH ROW\nBEGIN\n    SET NEW.age = IF(NEW.age IS NULL, 0, NEW.age);\nEND;\n\n\nViews\nCREATE VIEW myview AS SELECT name, age FROM mytable WHERE age &gt; 25;\nSELECT * FROM myview;",
    "crumbs": [
      "Blog",
      "Databases",
      "MariaDB and MySQL"
    ]
  },
  {
    "objectID": "Databases/mysql_&_mariadb.html#security",
    "href": "Databases/mysql_&_mariadb.html#security",
    "title": "MariaDB and MySQL",
    "section": "Security",
    "text": "Security\n\nSecure Installation\nsudo mysql_secure_installation\n\n\nUser Privileges\n\nGrant specific privileges to users instead of using GRANT ALL PRIVILEGES.",
    "crumbs": [
      "Blog",
      "Databases",
      "MariaDB and MySQL"
    ]
  },
  {
    "objectID": "Databases/mysql_&_mariadb.html#performance-tuning",
    "href": "Databases/mysql_&_mariadb.html#performance-tuning",
    "title": "MariaDB and MySQL",
    "section": "Performance Tuning",
    "text": "Performance Tuning\n\nIndexes\n\nUse indexes to speed up query performance.\n\nCREATE INDEX idx_name ON mytable (name);\n\n\nQuery Optimization\n\nUse the EXPLAIN statement to analyze query performance.\n\nEXPLAIN SELECT * FROM mytable WHERE name = 'Alice';\n\n\nCaching\n\nEnable query caching in the configuration file.",
    "crumbs": [
      "Blog",
      "Databases",
      "MariaDB and MySQL"
    ]
  },
  {
    "objectID": "Databases/mysql_&_mariadb.html#backup-and-restore",
    "href": "Databases/mysql_&_mariadb.html#backup-and-restore",
    "title": "MariaDB and MySQL",
    "section": "Backup and Restore",
    "text": "Backup and Restore\n\nBackup\nmysqldump -u root -p mydatabase &gt; mydatabase.sql\n\n\nRestore\nmysql -u root -p mydatabase &lt; mydatabase.sql",
    "crumbs": [
      "Blog",
      "Databases",
      "MariaDB and MySQL"
    ]
  },
  {
    "objectID": "Databases/mysql_&_mariadb.html#replication",
    "href": "Databases/mysql_&_mariadb.html#replication",
    "title": "MariaDB and MySQL",
    "section": "Replication",
    "text": "Replication\n\nMaster-Slave Replication: Set up replication for high availability and scalability.\nConfiguration: Configure my.cnf on both master and slave servers.",
    "crumbs": [
      "Blog",
      "Databases",
      "MariaDB and MySQL"
    ]
  },
  {
    "objectID": "Databases/mysql_&_mariadb.html#high-availability",
    "href": "Databases/mysql_&_mariadb.html#high-availability",
    "title": "MariaDB and MySQL",
    "section": "High Availability",
    "text": "High Availability\n\nGalera Cluster: Use Galera Cluster for synchronous multi-master replication.",
    "crumbs": [
      "Blog",
      "Databases",
      "MariaDB and MySQL"
    ]
  },
  {
    "objectID": "Databases/mysql_&_mariadb.html#monitoring-and-maintenance",
    "href": "Databases/mysql_&_mariadb.html#monitoring-and-maintenance",
    "title": "MariaDB and MySQL",
    "section": "Monitoring and Maintenance",
    "text": "Monitoring and Maintenance\n\nMonitoring Tools: Use tools like MySQLTuner and Percona Monitoring and Management (PMM) to monitor performance.\nLog Files: Monitor log files (error.log, slow-query.log) for troubleshooting.",
    "crumbs": [
      "Blog",
      "Databases",
      "MariaDB and MySQL"
    ]
  },
  {
    "objectID": "Databases/sqlite.html",
    "href": "Databases/sqlite.html",
    "title": "SQLite",
    "section": "",
    "text": "Origin: Created by D. Richard Hipp in 2000.\nLicense: Public domain.\nCharacteristics:\n\nServerless: No need for a separate server process.\nZero Configuration: No setup or administration required.\nSelf-contained: A single library file.\nCross-platform: Works on many operating systems.",
    "crumbs": [
      "Blog",
      "Databases",
      "SQLite"
    ]
  },
  {
    "objectID": "Databases/sqlite.html#introduction-to-sqlite",
    "href": "Databases/sqlite.html#introduction-to-sqlite",
    "title": "SQLite",
    "section": "",
    "text": "Origin: Created by D. Richard Hipp in 2000.\nLicense: Public domain.\nCharacteristics:\n\nServerless: No need for a separate server process.\nZero Configuration: No setup or administration required.\nSelf-contained: A single library file.\nCross-platform: Works on many operating systems.",
    "crumbs": [
      "Blog",
      "Databases",
      "SQLite"
    ]
  },
  {
    "objectID": "Databases/sqlite.html#installation",
    "href": "Databases/sqlite.html#installation",
    "title": "SQLite",
    "section": "Installation",
    "text": "Installation\nsudo apt update\nsudo apt install sqlite3",
    "crumbs": [
      "Blog",
      "Databases",
      "SQLite"
    ]
  },
  {
    "objectID": "Databases/sqlite.html#basic-usage",
    "href": "Databases/sqlite.html#basic-usage",
    "title": "SQLite",
    "section": "Basic Usage",
    "text": "Basic Usage\n\nCreating a Database\nsqlite3 mydatabase.db\n\n\nBasic Commands\n\nOpen an existing database\nsqlite3 mydatabase.db\n\n\nCreating a Table\nCREATE TABLE mytable (\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    name TEXT NOT NULL,\n    age INTEGER\n);\n\n\nInserting Data\nINSERT INTO mytable (name, age) VALUES ('Alice', 30);\n\n\nQuerying Data\nSELECT * FROM mytable;\n\n\nUpdating Data\nUPDATE mytable SET age = 31 WHERE name = 'Alice';\n\n\nDeleting Data\nDELETE FROM mytable WHERE name = 'Alice';",
    "crumbs": [
      "Blog",
      "Databases",
      "SQLite"
    ]
  },
  {
    "objectID": "Databases/sqlite.html#features",
    "href": "Databases/sqlite.html#features",
    "title": "SQLite",
    "section": "Features",
    "text": "Features\n\nData Types\n\nSQLite uses dynamic typing. The data types it supports are:\n\n\nNULL\nINTEGER\nREAL\nTEXT\nBLOB\n\n\n\nTransactions\nBEGIN TRANSACTION;\nINSERT INTO mytable (name, age) VALUES ('Bob', 25);\nCOMMIT;\n\n\nIndexes\nCREATE INDEX idx_name ON mytable (name);\n\n\nViews\nCREATE VIEW myview AS SELECT name, age FROM mytable WHERE age &gt; 25;\nSELECT * FROM myview;\n\n\nTriggers\nCREATE TRIGGER before_insert_mytable\nBEFORE INSERT ON mytable\nFOR EACH ROW\nBEGIN\n    SELECT RAISE(FAIL, \"Duplicate name\") WHERE EXISTS (SELECT 1 FROM mytable WHERE name = NEW.name);\nEND;\n\n\nStored Procedures\n\nSQLite does not support stored procedures like other RDBMSs. However, you can use triggers and user-defined functions to achieve similar functionality.",
    "crumbs": [
      "Blog",
      "Databases",
      "SQLite"
    ]
  },
  {
    "objectID": "Databases/sqlite.html#security",
    "href": "Databases/sqlite.html#security",
    "title": "SQLite",
    "section": "Security",
    "text": "Security\n\nDatabase Encryption: Use SQLCipher for database encryption.\nAccess Control: SQLite does not provide built-in user management and access control.",
    "crumbs": [
      "Blog",
      "Databases",
      "SQLite"
    ]
  },
  {
    "objectID": "Databases/sqlite.html#performance-tuning",
    "href": "Databases/sqlite.html#performance-tuning",
    "title": "SQLite",
    "section": "Performance Tuning",
    "text": "Performance Tuning\n\nIndexes: Proper indexing can significantly improve query performance.\nPRAGMA Statements: Use PRAGMA commands to modify the database behavior.\n\nPRAGMA synchronous = OFF;\nPRAGMA journal_mode = WAL;",
    "crumbs": [
      "Blog",
      "Databases",
      "SQLite"
    ]
  },
  {
    "objectID": "Databases/sqlite.html#backup-and-restore",
    "href": "Databases/sqlite.html#backup-and-restore",
    "title": "SQLite",
    "section": "Backup and Restore",
    "text": "Backup and Restore\n\nBackup\nsqlite3 mydatabase.db \".backup 'backup.db'\"\n\n\nRestore\nsqlite3 backup.db \".restore 'mydatabase.db'\"",
    "crumbs": [
      "Blog",
      "Databases",
      "SQLite"
    ]
  },
  {
    "objectID": "Databases/sqlite.html#integration-with-programming-languages",
    "href": "Databases/sqlite.html#integration-with-programming-languages",
    "title": "SQLite",
    "section": "Integration with Programming Languages",
    "text": "Integration with Programming Languages\n\nPython\n\nimport sqlite3\n\n# Connect to the database\nconn = sqlite3.connect('mydatabase.db')\n\n# Create a cursor object\ncursor = conn.cursor()\n\n# Execute SQL commands\ncursor.execute(\"CREATE TABLE IF NOT EXISTS mytable (id INTEGER PRIMARY KEY, name TEXT, age INTEGER)\")\ncursor.execute(\"INSERT INTO mytable (name, age) VALUES ('Alice', 30)\")\nconn.commit()\n\n# Query the database\ncursor.execute(\"SELECT * FROM mytable\")\nrows = cursor.fetchall()\nfor row in rows:\n    print(row)\n\n# Close the connection\nconn.close()\n\nJavaScript\n\nconst sqlite3 = require('sqlite3').verbose();\n\n// Connect to the database\nlet db = new sqlite3.Database('mydatabase.db');\n\n// Create a table\ndb.run('CREATE TABLE IF NOT EXISTS mytable (id INTEGER PRIMARY KEY, name TEXT, age INTEGER)');\n\n// Insert data\ndb.run('INSERT INTO mytable (name, age) VALUES (?, ?)', ['Alice', 30]);\n\n// Query the database\ndb.all('SELECT * FROM mytable', [], (err, rows) =&gt; {\n  if (err) {\n    throw err;\n  }\n  rows.forEach((row) =&gt; {\n    console.log(row);\n  });\n});\n\n// Close the database connection\ndb.close();",
    "crumbs": [
      "Blog",
      "Databases",
      "SQLite"
    ]
  },
  {
    "objectID": "Databases/sqlite.html#tools-and-utilities",
    "href": "Databases/sqlite.html#tools-and-utilities",
    "title": "SQLite",
    "section": "Tools and Utilities",
    "text": "Tools and Utilities\n\nSQLite Command Line: The primary tool for interacting with SQLite databases.\nDB Browser for SQLite: A visual tool to manage SQLite databases.\nSQLiteStudio: Another powerful SQLite database manager.",
    "crumbs": [
      "Blog",
      "Databases",
      "SQLite"
    ]
  },
  {
    "objectID": "Databases/sqlite.html#best-practices",
    "href": "Databases/sqlite.html#best-practices",
    "title": "SQLite",
    "section": "Best Practices",
    "text": "Best Practices\n\nNormalization: Properly normalize your database schema.\nIndexes: Use indexes to optimize query performance but avoid over-indexing.\nBackups: Regularly back up your database.\nTesting: Thoroughly test database schema changes.",
    "crumbs": [
      "Blog",
      "Databases",
      "SQLite"
    ]
  },
  {
    "objectID": "Databases/PostgreSQL/postgresql.html#postgresql-architecture-overview",
    "href": "Databases/PostgreSQL/postgresql.html#postgresql-architecture-overview",
    "title": "PostgreSQL Overview",
    "section": "üß† 1. PostgreSQL Architecture Overview",
    "text": "üß† 1. PostgreSQL Architecture Overview\nCluster ‚Üí Databases ‚Üí Schemas ‚Üí Tables ‚Üí Columns\n                        ‚Üò      ‚Üò\n                       Views   Functions\n\n\n\n\n\n\n\nLayer\nDescription\n\n\n\n\nCluster\nThe entire PostgreSQL server instance (1+ databases)\n\n\nDatabase\nA single logical database (separate namespaces)\n\n\nSchema\nLogical grouping inside a database (public by default)\n\n\nTable\nActual data storage (rows and columns)\n\n\nColumn\nField in a table with a data type\n\n\nRow\nA record (tuple) in a table\n\n\nIndex\nImproves lookup speed\n\n\nView\nSaved SQL query (virtual table)\n\n\nFunction\nProcedural logic (in PL/pgSQL, SQL, Python, etc.)",
    "crumbs": [
      "Blog",
      "Databases",
      "PostgreSQL",
      "PostgreSQL Overview"
    ]
  },
  {
    "objectID": "Databases/PostgreSQL/postgresql.html#directory-hierarchy-linuxunix",
    "href": "Databases/PostgreSQL/postgresql.html#directory-hierarchy-linuxunix",
    "title": "PostgreSQL Overview",
    "section": "üóÇ 2. Directory Hierarchy (Linux/Unix)",
    "text": "üóÇ 2. Directory Hierarchy (Linux/Unix)\n\n\n\nDirectory\nDescription\n\n\n\n\npg_data/\nBase directory\n\n\nbase/\nActual database data files\n\n\npg_wal/\nWrite-Ahead Logs\n\n\npg_tblspc/\nTablespace links\n\n\nglobal/\nGlobal metadata (roles, transactions)",
    "crumbs": [
      "Blog",
      "Databases",
      "PostgreSQL",
      "PostgreSQL Overview"
    ]
  },
  {
    "objectID": "Databases/PostgreSQL/postgresql.html#data-types",
    "href": "Databases/PostgreSQL/postgresql.html#data-types",
    "title": "PostgreSQL Overview",
    "section": "üî¢ 3. Data Types",
    "text": "üî¢ 3. Data Types\n\n\n\nType Category\nExamples\n\n\n\n\nNumeric\nint, float, decimal, serial\n\n\nCharacter\nchar(n), varchar(n), text\n\n\nTemporal\ndate, timestamp, interval\n\n\nBoolean\nboolean\n\n\nUUID\nuuid\n\n\nArray\ninteger[], text[]\n\n\nJSON/Binary\njson, jsonb, bytea\n\n\nGeometric/Network\npoint, cidr, inet\n\n\nCustom\nenum, composite, domain\n\n\n\n‚úÖ Use jsonb over json for indexing and performance.",
    "crumbs": [
      "Blog",
      "Databases",
      "PostgreSQL",
      "PostgreSQL Overview"
    ]
  },
  {
    "objectID": "Databases/PostgreSQL/postgresql.html#schema-objects",
    "href": "Databases/PostgreSQL/postgresql.html#schema-objects",
    "title": "PostgreSQL Overview",
    "section": "üîë 4. Schema Objects",
    "text": "üîë 4. Schema Objects\n\n\n\nObject\nDescription\n\n\n\n\nTables\nStore data in rows\n\n\nIndexes\nAccelerate queries\n\n\nViews\nStored SQL queries\n\n\nSequences\nAuto-increment counters (used in serial)\n\n\nFunctions\nReusable code blocks\n\n\nTriggers\nHooks before/after changes\n\n\nConstraints\nRules (e.g.¬†UNIQUE, CHECK)",
    "crumbs": [
      "Blog",
      "Databases",
      "PostgreSQL",
      "PostgreSQL Overview"
    ]
  },
  {
    "objectID": "Databases/PostgreSQL/postgresql.html#system-catalogs",
    "href": "Databases/PostgreSQL/postgresql.html#system-catalogs",
    "title": "PostgreSQL Overview",
    "section": "‚öôÔ∏è 5. System Catalogs",
    "text": "‚öôÔ∏è 5. System Catalogs\nAll metadata is stored in system tables (prefixed with pg_).\nExamples:\nSELECT * FROM pg_tables WHERE schemaname = 'public';\nSELECT * FROM pg_indexes WHERE tablename = 'my_table';\nUseful views:\n\ninformation_schema.tables\npg_stat_activity\npg_locks",
    "crumbs": [
      "Blog",
      "Databases",
      "PostgreSQL",
      "PostgreSQL Overview"
    ]
  },
  {
    "objectID": "Databases/PostgreSQL/postgresql.html#index-types",
    "href": "Databases/PostgreSQL/postgresql.html#index-types",
    "title": "PostgreSQL Overview",
    "section": "üìà 6. Index Types",
    "text": "üìà 6. Index Types\n\n\n\nIndex Type\nUse Case\n\n\n\n\nB-tree\nDefault, great for equality/range\n\n\nHash\nFast equality checks (less used)\n\n\nGIN\nFull-text search, jsonb, arrays\n\n\nGiST\nGeospatial or custom indexing\n\n\nBRIN\nVery large tables with ordered data\n\n\nPartial\nOnly for subset of rows\n\n\nComposite\nIndex on multiple columns\n\n\n\nCREATE INDEX idx_name ON table(column);\nCREATE INDEX idx_gin ON documents USING gin(jsonb_column);",
    "crumbs": [
      "Blog",
      "Databases",
      "PostgreSQL",
      "PostgreSQL Overview"
    ]
  },
  {
    "objectID": "Databases/PostgreSQL/postgresql.html#constraints-relationships",
    "href": "Databases/PostgreSQL/postgresql.html#constraints-relationships",
    "title": "PostgreSQL Overview",
    "section": "üß∞ 7. Constraints & Relationships",
    "text": "üß∞ 7. Constraints & Relationships\n\n\n\nConstraint\nPurpose\n\n\n\n\nPRIMARY KEY\nUniquely identifies a row\n\n\nFOREIGN KEY\nEnforces relationships\n\n\nUNIQUE\nEnsures values are unique\n\n\nCHECK\nValidates conditions (CHECK (age &gt; 0))\n\n\nNOT NULL\nColumn must have a value\n\n\n\nRelational example:\nCREATE TABLE users (\n  id SERIAL PRIMARY KEY,\n  email TEXT UNIQUE\n);\n\nCREATE TABLE orders (\n  id SERIAL PRIMARY KEY,\n  user_id INT REFERENCES users(id)\n);",
    "crumbs": [
      "Blog",
      "Databases",
      "PostgreSQL",
      "PostgreSQL Overview"
    ]
  },
  {
    "objectID": "Databases/PostgreSQL/postgresql.html#views-vs-materialized-views",
    "href": "Databases/PostgreSQL/postgresql.html#views-vs-materialized-views",
    "title": "PostgreSQL Overview",
    "section": "üîÑ 8. Views vs Materialized Views",
    "text": "üîÑ 8. Views vs Materialized Views\n\n\n\nType\nDescription\n\n\n\n\nView\nVirtual table (dynamic)\n\n\nMaterialized View\nCached, can be refreshed\n\n\n\nCREATE MATERIALIZED VIEW recent_orders AS\nSELECT * FROM orders WHERE created_at &gt; NOW() - interval '7 days';",
    "crumbs": [
      "Blog",
      "Databases",
      "PostgreSQL",
      "PostgreSQL Overview"
    ]
  },
  {
    "objectID": "Databases/PostgreSQL/postgresql.html#advanced-features",
    "href": "Databases/PostgreSQL/postgresql.html#advanced-features",
    "title": "PostgreSQL Overview",
    "section": "üöÄ 9. Advanced Features",
    "text": "üöÄ 9. Advanced Features\n\n\n\nFeature\nBenefit\n\n\n\n\njsonb\nSemi-structured data\n\n\nARRAY\nNative array support\n\n\nCTE (WITH)\nReusable subqueries\n\n\nWindow Functions\nRunning totals, rankings\n\n\nPartitioning\nScale large tables efficiently\n\n\nInheritance\nTable OOP-style extension\n\n\nForeign Data Wrappers (FDW)\nQuery other databases/files\n\n\n\nExample:\nSELECT name, AVG(score) OVER (PARTITION BY subject) FROM results;",
    "crumbs": [
      "Blog",
      "Databases",
      "PostgreSQL",
      "PostgreSQL Overview"
    ]
  },
  {
    "objectID": "Databases/PostgreSQL/postgresql.html#monitoring-and-performance",
    "href": "Databases/PostgreSQL/postgresql.html#monitoring-and-performance",
    "title": "PostgreSQL Overview",
    "section": "üìä 10. Monitoring and Performance",
    "text": "üìä 10. Monitoring and Performance\n\n\n\nTool or View\nPurpose\n\n\n\n\npg_stat_activity\nSee current queries\n\n\npg_stat_statements\nTrack slow queries\n\n\nEXPLAIN ANALYZE\nQuery plan + execution timing\n\n\nVACUUM\nClean up dead tuples\n\n\nautovacuum\nAutomatic garbage collection\n\n\n\nEXPLAIN ANALYZE SELECT * FROM large_table WHERE id = 1000;",
    "crumbs": [
      "Blog",
      "Databases",
      "PostgreSQL",
      "PostgreSQL Overview"
    ]
  },
  {
    "objectID": "Databases/PostgreSQL/postgresql.html#security-structure",
    "href": "Databases/PostgreSQL/postgresql.html#security-structure",
    "title": "PostgreSQL Overview",
    "section": "üîê 11. Security Structure",
    "text": "üîê 11. Security Structure\n\n\n\nElement\nPurpose\n\n\n\n\nRoles & Users\nRole-based access control (CREATE ROLE)\n\n\nPrivileges\nGRANT SELECT ON table TO analyst;\n\n\nRow-Level Sec\nCREATE POLICY for per-user filtering\n\n\nEncryption\nTLS + pgcrypto",
    "crumbs": [
      "Blog",
      "Databases",
      "PostgreSQL",
      "PostgreSQL Overview"
    ]
  },
  {
    "objectID": "Databases/PostgreSQL/postgresql.html#extension-ecosystem",
    "href": "Databases/PostgreSQL/postgresql.html#extension-ecosystem",
    "title": "PostgreSQL Overview",
    "section": "üåç 12. Extension Ecosystem",
    "text": "üåç 12. Extension Ecosystem\n\n\n\nExtension\nUse Case\n\n\n\n\npostgis\nGeospatial types and queries\n\n\npg_trgm\nText similarity, fuzzy search\n\n\nuuid-ossp\nUUID generation\n\n\ncitext\nCase-insensitive text\n\n\ntimescaledb\nTime-series data\n\n\npg_partman\nPartition management\n\n\n\nCREATE EXTENSION IF NOT EXISTS postgis;",
    "crumbs": [
      "Blog",
      "Databases",
      "PostgreSQL",
      "PostgreSQL Overview"
    ]
  },
  {
    "objectID": "Databases/PostgreSQL/postgresql.html#backup-restore-and-migrations",
    "href": "Databases/PostgreSQL/postgresql.html#backup-restore-and-migrations",
    "title": "PostgreSQL Overview",
    "section": "üîÑ 13. Backup, Restore, and Migrations",
    "text": "üîÑ 13. Backup, Restore, and Migrations\n\n\n\nTool\nUse Case\n\n\n\n\npg_dump\nDump single DB\n\n\npg_restore\nRestore from .dump or .sql\n\n\npg_basebackup\nEntire cluster backup\n\n\npsql\nInteractive SQL shell\n\n\nalembic / django-migrations\nSchema evolution",
    "crumbs": [
      "Blog",
      "Databases",
      "PostgreSQL",
      "PostgreSQL Overview"
    ]
  },
  {
    "objectID": "Databases/PostgreSQL/postgresql.html#summary-table",
    "href": "Databases/PostgreSQL/postgresql.html#summary-table",
    "title": "PostgreSQL Overview",
    "section": "üìå Summary Table",
    "text": "üìå Summary Table\n\n\n\nCategory\nKey Concepts\n\n\n\n\nStructure\nCluster ‚Üí DB ‚Üí Schema ‚Üí Tables\n\n\nData Types\nRich: JSONB, ARRAY, GEOMETRY\n\n\nIndexes\nB-Tree, GIN, BRIN, Composite\n\n\nFeatures\nCTEs, Views, Partitions, Extensions\n\n\nPerformance\nVACUUM, ANALYZE, EXPLAIN\n\n\nSecurity\nRoles, RLS, TLS, Audit\n\n\nTools\npg_dump, psql, pgadmin, pg_stat_statements",
    "crumbs": [
      "Blog",
      "Databases",
      "PostgreSQL",
      "PostgreSQL Overview"
    ]
  },
  {
    "objectID": "Databases/PostgreSQL/pqsl_extensions.html",
    "href": "Databases/PostgreSQL/pqsl_extensions.html",
    "title": "PostgreSQL Extensions",
    "section": "",
    "text": "PostgreSQL extensions are modular packages that extend the functionality of the database. They can provide:\n\nNew data types (e.g.¬†geospatial, key-value)\nIndexing strategies (e.g.¬†trigrams, btrees on arrays)\nProcedural languages (e.g.¬†PL/Python, PL/V8)\nOptimization, partitioning, time-series handling\nMonitoring, logging, and more",
    "crumbs": [
      "Blog",
      "Databases",
      "PostgreSQL",
      "PostgreSQL Extensions"
    ]
  },
  {
    "objectID": "Databases/PostgreSQL/pqsl_extensions.html#what-are-postgresql-extensions",
    "href": "Databases/PostgreSQL/pqsl_extensions.html#what-are-postgresql-extensions",
    "title": "PostgreSQL Extensions",
    "section": "",
    "text": "PostgreSQL extensions are modular packages that extend the functionality of the database. They can provide:\n\nNew data types (e.g.¬†geospatial, key-value)\nIndexing strategies (e.g.¬†trigrams, btrees on arrays)\nProcedural languages (e.g.¬†PL/Python, PL/V8)\nOptimization, partitioning, time-series handling\nMonitoring, logging, and more",
    "crumbs": [
      "Blog",
      "Databases",
      "PostgreSQL",
      "PostgreSQL Extensions"
    ]
  },
  {
    "objectID": "Databases/PostgreSQL/pqsl_extensions.html#extension-lifecycle",
    "href": "Databases/PostgreSQL/pqsl_extensions.html#extension-lifecycle",
    "title": "PostgreSQL Extensions",
    "section": "üì¶ Extension Lifecycle",
    "text": "üì¶ Extension Lifecycle\n\nüì• Installation\nInstall via your system‚Äôs package manager:\nsudo apt install postgresql-contrib     # Debian/Ubuntu\nsudo yum install postgresql-contrib     # RHEL/CentOS\nOr use source builds or Docker images with extensions pre-bundled.\n\n\nüîå Enable in PostgreSQL\nCREATE EXTENSION IF NOT EXISTS &lt;extension_name&gt;;\nFor example:\nCREATE EXTENSION IF NOT EXISTS \"uuid-ossp\";\nCREATE EXTENSION IF NOT EXISTS \"pg_trgm\";\n\n\nüßº Remove Extension\nDROP EXTENSION IF EXISTS &lt;extension_name&gt;;",
    "crumbs": [
      "Blog",
      "Databases",
      "PostgreSQL",
      "PostgreSQL Extensions"
    ]
  },
  {
    "objectID": "Databases/PostgreSQL/pqsl_extensions.html#where-are-extensions-stored",
    "href": "Databases/PostgreSQL/pqsl_extensions.html#where-are-extensions-stored",
    "title": "PostgreSQL Extensions",
    "section": "üìÇ Where Are Extensions Stored?",
    "text": "üìÇ Where Are Extensions Stored?\n\nPostgreSQL extensions live in the $PGDATA/extension directory.\nMetadata stored in pg_extension system catalog table:\n\nSELECT * FROM pg_extension;",
    "crumbs": [
      "Blog",
      "Databases",
      "PostgreSQL",
      "PostgreSQL Extensions"
    ]
  },
  {
    "objectID": "Databases/PostgreSQL/pqsl_extensions.html#creating-your-own-extensions",
    "href": "Databases/PostgreSQL/pqsl_extensions.html#creating-your-own-extensions",
    "title": "PostgreSQL Extensions",
    "section": "üîß Creating Your Own Extensions",
    "text": "üîß Creating Your Own Extensions\nYou can define your own reusable extension by bundling:\n\nSQL definitions (functions, types, views)\nControl file (.control)\nSQL install file (.sql)\nOptionally: C code for performance (compiled as a .so)\n\nUseful for repeatable logic across projects.",
    "crumbs": [
      "Blog",
      "Databases",
      "PostgreSQL",
      "PostgreSQL Extensions"
    ]
  },
  {
    "objectID": "Databases/PostgreSQL/pqsl_extensions.html#must-know-extensions-by-category",
    "href": "Databases/PostgreSQL/pqsl_extensions.html#must-know-extensions-by-category",
    "title": "PostgreSQL Extensions",
    "section": "üîç Must-Know Extensions by Category",
    "text": "üîç Must-Know Extensions by Category\n\nüóÇÔ∏è Data Types & Structures\n\n\n\nExtension\nPurpose\n\n\n\n\nhstore\nKey-value pairs in a column\n\n\ncitext\nCase-insensitive text\n\n\nltree\nTree-like hierarchical data\n\n\nintarray\nArray operations\n\n\npg_trgm\nTrigram-based fuzzy search\n\n\nuuid-ossp\nUUID generators (v1-v5)\n\n\n\n\n\n\nüìà Performance & Indexing\n\n\n\nExtension\nPurpose\n\n\n\n\nbtree_gin\nGIN indexes for btree types\n\n\nhypopg\nHypothetical index advisor\n\n\npg_partman\nAutomatic table partitioning\n\n\npg_stat_statements\nQuery performance insights\n\n\n\n\n\n\nüïì Time-Series\n\n\n\n\n\n\n\nExtension\nDescription\n\n\n\n\nTimescaleDB\nTime-series superpowers (compression, retention, analytics)\n\n\npg_cron\nRun cron-like jobs inside PostgreSQL\n\n\n\n\n\n\nüåç GIS / Spatial\n\n\n\n\n\n\n\nExtension\nPurpose\n\n\n\n\nPostGIS\nGeospatial functions, types, indexes\n\n\naddress_standardizer\nCleans up address fields (used with PostGIS)\n\n\n\n\n\n\nüîê Security & Crypto\n\n\n\nExtension\nPurpose\n\n\n\n\npgcrypto\nHashing, encryption, PGP operations\n\n\npgaudit\nLogs read/write access for security audits\n\n\nsslinfo\nView SSL info about connected clients\n\n\n\n\n\n\nüß™ Procedural Languages\n\n\n\nExtension\nAdds Support For\n\n\n\n\nplpython3u\nPython\n\n\nplv8\nJavaScript\n\n\nplperl\nPerl\n\n\npllua\nLua",
    "crumbs": [
      "Blog",
      "Databases",
      "PostgreSQL",
      "PostgreSQL Extensions"
    ]
  },
  {
    "objectID": "Databases/PostgreSQL/pqsl_extensions.html#example-pg_trgm-trigram-index",
    "href": "Databases/PostgreSQL/pqsl_extensions.html#example-pg_trgm-trigram-index",
    "title": "PostgreSQL Extensions",
    "section": "üß† Example: pg_trgm (Trigram Index)",
    "text": "üß† Example: pg_trgm (Trigram Index)\nCREATE EXTENSION pg_trgm;\n\n-- fuzzy search on a text column\nSELECT * FROM users\nWHERE username % 'benj';\n\n-- Index for performance\nCREATE INDEX trgm_idx ON users\nUSING gin (username gin_trgm_ops);",
    "crumbs": [
      "Blog",
      "Databases",
      "PostgreSQL",
      "PostgreSQL Extensions"
    ]
  },
  {
    "objectID": "Databases/PostgreSQL/pqsl_extensions.html#example-monitoring-with-pg_stat_statements",
    "href": "Databases/PostgreSQL/pqsl_extensions.html#example-monitoring-with-pg_stat_statements",
    "title": "PostgreSQL Extensions",
    "section": "üìà Example: Monitoring With pg_stat_statements",
    "text": "üìà Example: Monitoring With pg_stat_statements\nCREATE EXTENSION pg_stat_statements;\n\n-- View slowest queries\nSELECT query, calls, total_time\nFROM pg_stat_statements\nORDER BY total_time DESC\nLIMIT 5;",
    "crumbs": [
      "Blog",
      "Databases",
      "PostgreSQL",
      "PostgreSQL Extensions"
    ]
  },
  {
    "objectID": "Databases/PostgreSQL/pqsl_extensions.html#timescaledb-in-action-docker",
    "href": "Databases/PostgreSQL/pqsl_extensions.html#timescaledb-in-action-docker",
    "title": "PostgreSQL Extensions",
    "section": "üß± TimescaleDB in Action (Docker)",
    "text": "üß± TimescaleDB in Action (Docker)\n# docker-compose.yml\nservices:\n  timescaledb:\n    image: timescale/timescaledb:latest-pg14\n    environment:\n      POSTGRES_PASSWORD: example\n    ports:\n      - \"5432:5432\"\n\nSQL Example:\nCREATE EXTENSION IF NOT EXISTS timescaledb;\n\n-- Create hypertable\nCREATE TABLE metrics (\n  time TIMESTAMPTZ NOT NULL,\n  device TEXT,\n  value DOUBLE PRECISION\n);\n\nSELECT create_hypertable('metrics', 'time');",
    "crumbs": [
      "Blog",
      "Databases",
      "PostgreSQL",
      "PostgreSQL Extensions"
    ]
  },
  {
    "objectID": "Databases/PostgreSQL/pqsl_extensions.html#visualization-dashboards",
    "href": "Databases/PostgreSQL/pqsl_extensions.html#visualization-dashboards",
    "title": "PostgreSQL Extensions",
    "section": "üìä Visualization & Dashboards",
    "text": "üìä Visualization & Dashboards\nCombine PostgreSQL extensions with:\n\nGrafana ‚Üí For metrics from TimescaleDB or pg_stat*\npgAdmin ‚Üí Admin GUI\npgHero, pganalyze ‚Üí Performance dashboards",
    "crumbs": [
      "Blog",
      "Databases",
      "PostgreSQL",
      "PostgreSQL Extensions"
    ]
  },
  {
    "objectID": "Databases/PostgreSQL/pqsl_extensions.html#performance-monitoring-stack",
    "href": "Databases/PostgreSQL/pqsl_extensions.html#performance-monitoring-stack",
    "title": "PostgreSQL Extensions",
    "section": "‚ö° Performance Monitoring Stack",
    "text": "‚ö° Performance Monitoring Stack\n\n\n\nTool / Extension\nUse\n\n\n\n\npg_stat_statements\nQuery insights\n\n\npg_buffercache\nCache performance\n\n\npg_stat_kcache\nSystem-level stats (CPU, I/O)\n\n\nauto_explain\nAutomatic EXPLAIN plans\n\n\npgaudit\nSecurity logging\n\n\npgbouncer\nConnection pooling",
    "crumbs": [
      "Blog",
      "Databases",
      "PostgreSQL",
      "PostgreSQL Extensions"
    ]
  },
  {
    "objectID": "Databases/PostgreSQL/pqsl_extensions.html#best-practices",
    "href": "Databases/PostgreSQL/pqsl_extensions.html#best-practices",
    "title": "PostgreSQL Extensions",
    "section": "üß™ Best Practices",
    "text": "üß™ Best Practices\n\nVersion lock extensions in migrations.\nOnly install extensions you need.\nMonitor extension performance if used heavily (e.g., pg_trgm on large text).\nPrefer GIN indexes when using extensions like JSONB or trigrams.\nStore installation scripts with your repo or schema migrations.",
    "crumbs": [
      "Blog",
      "Databases",
      "PostgreSQL",
      "PostgreSQL Extensions"
    ]
  },
  {
    "objectID": "Databases/PostgreSQL/pqsl_extensions.html#tools-to-explore-extensions",
    "href": "Databases/PostgreSQL/pqsl_extensions.html#tools-to-explore-extensions",
    "title": "PostgreSQL Extensions",
    "section": "üõ†Ô∏è Tools to Explore Extensions",
    "text": "üõ†Ô∏è Tools to Explore Extensions\n\npgxn (PostgreSQL Extension Network): https://pgxn.org\npg_show_all_settings(); to view configs\nSELECT * FROM pg_extension; to view active extensions",
    "crumbs": [
      "Blog",
      "Databases",
      "PostgreSQL",
      "PostgreSQL Extensions"
    ]
  },
  {
    "objectID": "mqtt.html",
    "href": "mqtt.html",
    "title": "MQTT",
    "section": "",
    "text": "MQTT (Message Queuing Telemetry Transport) is a lightweight publish/subscribe messaging protocol designed for IoT and low-bandwidth systems.\n\nBroker = server (e.g., Mosquitto)\nClient = device/app that publishes or subscribes to topics\nTopic = a UTF-8 string like sensor/temp/office",
    "crumbs": [
      "Blog",
      "MQTT"
    ]
  },
  {
    "objectID": "mqtt.html#what-is-mqtt",
    "href": "mqtt.html#what-is-mqtt",
    "title": "MQTT",
    "section": "",
    "text": "MQTT (Message Queuing Telemetry Transport) is a lightweight publish/subscribe messaging protocol designed for IoT and low-bandwidth systems.\n\nBroker = server (e.g., Mosquitto)\nClient = device/app that publishes or subscribes to topics\nTopic = a UTF-8 string like sensor/temp/office",
    "crumbs": [
      "Blog",
      "MQTT"
    ]
  },
  {
    "objectID": "mqtt.html#install-an-mqtt-broker-mosquitto-on-linux",
    "href": "mqtt.html#install-an-mqtt-broker-mosquitto-on-linux",
    "title": "MQTT",
    "section": "‚öôÔ∏è 2. Install an MQTT Broker (Mosquitto) on Linux",
    "text": "‚öôÔ∏è 2. Install an MQTT Broker (Mosquitto) on Linux\n\n‚úÖ Ubuntu / Debian\nsudo apt update\nsudo apt install -y mosquitto mosquitto-clients\n\n\n‚úÖ Fedora / CentOS / RHEL\nsudo dnf install -y mosquitto mosquitto-clients\n\n\n‚úÖ Arch Linux\nsudo pacman -S mosquitto mosquitto-clients\n\n\nStart & Enable:\nsudo systemctl enable mosquitto\nsudo systemctl start mosquitto\nCheck status:\nsudo systemctl status mosquitto",
    "crumbs": [
      "Blog",
      "MQTT"
    ]
  },
  {
    "objectID": "mqtt.html#test-mqtt-locally",
    "href": "mqtt.html#test-mqtt-locally",
    "title": "MQTT",
    "section": "üîé 3. Test MQTT Locally",
    "text": "üîé 3. Test MQTT Locally\nIn one terminal (subscriber):\nmosquitto_sub -h localhost -t \"test/topic\"\nIn another (publisher):\nmosquitto_pub -h localhost -t \"test/topic\" -m \"Hello MQTT!\"\nYou should see the message appear in the first terminal.",
    "crumbs": [
      "Blog",
      "MQTT"
    ]
  },
  {
    "objectID": "mqtt.html#add-authentication-username-password",
    "href": "mqtt.html#add-authentication-username-password",
    "title": "MQTT",
    "section": "üîê 4. Add Authentication (Username + Password)",
    "text": "üîê 4. Add Authentication (Username + Password)\n\nCreate password file\n\nsudo mosquitto_passwd -c /etc/mosquitto/passwd myuser\n\nEdit Mosquitto config: Create or modify /etc/mosquitto/conf.d/auth.conf:\n\nallow_anonymous false\npassword_file /etc/mosquitto/passwd\nlistener 1883\n\nRestart Mosquitto:\n\nsudo systemctl restart mosquitto\n\nTest authenticated connection:\n\nmosquitto_pub -h localhost -t \"secure/test\" -u myuser -P your_password -m \"Secure test\"",
    "crumbs": [
      "Blog",
      "MQTT"
    ]
  },
  {
    "objectID": "mqtt.html#enable-tls-encryption-optional-but-recommended",
    "href": "mqtt.html#enable-tls-encryption-optional-but-recommended",
    "title": "MQTT",
    "section": "üîí 5. Enable TLS Encryption (Optional but Recommended)",
    "text": "üîí 5. Enable TLS Encryption (Optional but Recommended)\n\nCreate a self-signed cert:\nmkdir ~/mosquitto_certs && cd ~/mosquitto_certs\nopenssl req -x509 -newkey rsa:2048 -days 365 -nodes -keyout mqtt.key -out mqtt.crt\n\n\nConfigure TLS in /etc/mosquitto/conf.d/tls.conf:\nlistener 8883\ncafile /path/to/mqtt.crt\ncertfile /path/to/mqtt.crt\nkeyfile /path/to/mqtt.key\nrequire_certificate false\nRestart:\nsudo systemctl restart mosquitto\nTest:\nmosquitto_pub --cafile mqtt.crt -h localhost -p 8883 -t \"secure/topic\" -m \"Encrypted\"",
    "crumbs": [
      "Blog",
      "MQTT"
    ]
  },
  {
    "objectID": "mqtt.html#configure-persistence-retain-data-after-restart",
    "href": "mqtt.html#configure-persistence-retain-data-after-restart",
    "title": "MQTT",
    "section": "üß† 6. Configure Persistence (Retain Data After Restart)",
    "text": "üß† 6. Configure Persistence (Retain Data After Restart)\nIn /etc/mosquitto/mosquitto.conf:\npersistence true\npersistence_location /var/lib/mosquitto/\nAlso useful:\nlog_dest file /var/log/mosquitto/mosquitto.log\nRestart the broker after changing configs.",
    "crumbs": [
      "Blog",
      "MQTT"
    ]
  },
  {
    "objectID": "mqtt.html#connect-devices-clients",
    "href": "mqtt.html#connect-devices-clients",
    "title": "MQTT",
    "section": "üì≤ 7. Connect Devices / Clients",
    "text": "üì≤ 7. Connect Devices / Clients\n\nPython (with paho-mqtt):\npip install paho-mqtt\nimport paho.mqtt.client as mqtt\n\nclient = mqtt.Client()\nclient.connect(\"localhost\", 1883, 60)\nclient.publish(\"test/topic\", \"Hello from Python!\")\nclient.loop_start()\n\n\nRaspberry Pi Pico W (MicroPython):\nUse umqtt.simple or umqtt.robust libraries to connect and publish.",
    "crumbs": [
      "Blog",
      "MQTT"
    ]
  },
  {
    "objectID": "mqtt.html#remote-access-and-firewalls",
    "href": "mqtt.html#remote-access-and-firewalls",
    "title": "MQTT",
    "section": "üì° 8. Remote Access and Firewalls",
    "text": "üì° 8. Remote Access and Firewalls\n\nOpen port 1883 or 8883 in your firewall/router.\nUse ufw if on Ubuntu:\n\nsudo ufw allow 1883/tcp",
    "crumbs": [
      "Blog",
      "MQTT"
    ]
  },
  {
    "objectID": "mqtt.html#troubleshooting-tips",
    "href": "mqtt.html#troubleshooting-tips",
    "title": "MQTT",
    "section": "üõ† 9. Troubleshooting Tips",
    "text": "üõ† 9. Troubleshooting Tips\n\n\n\n\n\n\n\nIssue\nSolution\n\n\n\n\nBroker not responding\nsystemctl status mosquitto\n\n\nCan‚Äôt connect remotely\nCheck firewall or bind address\n\n\nAuth fails\nRe-check /etc/mosquitto/passwd and allow_anonymous\n\n\nTLS errors\nCheck cert paths and validity",
    "crumbs": [
      "Blog",
      "MQTT"
    ]
  },
  {
    "objectID": "mqtt.html#extras-tools",
    "href": "mqtt.html#extras-tools",
    "title": "MQTT",
    "section": "üìò 10. Extras & Tools",
    "text": "üìò 10. Extras & Tools\n\nüñ• MQTT Dashboards: MQTT Explorer, Node-RED\nüõ† Cloud MQTT brokers: HiveMQ Cloud, Adafruit IO\nüì¶ Docker Mosquitto:\n\ndocker run -it -p 1883:1883 eclipse-mosquitto",
    "crumbs": [
      "Blog",
      "MQTT"
    ]
  },
  {
    "objectID": "mqtt.html#summary-table",
    "href": "mqtt.html#summary-table",
    "title": "MQTT",
    "section": "‚úÖ Summary Table",
    "text": "‚úÖ Summary Table\n\n\n\nFeature\nDefault\nConfig File\n\n\n\n\nPort\n1883\n/etc/mosquitto/mosquitto.conf\n\n\nAuth\nOff\n/etc/mosquitto/conf.d/auth.conf\n\n\nTLS\nOff\n/etc/mosquitto/conf.d/tls.conf\n\n\nPersistence\nOff\npersistence true\n\n\nLogs\nSyslog\nor log_dest file",
    "crumbs": [
      "Blog",
      "MQTT"
    ]
  },
  {
    "objectID": "mqtt.html#mqtt-through-python",
    "href": "mqtt.html#mqtt-through-python",
    "title": "MQTT",
    "section": "MQTT through python",
    "text": "MQTT through python\n\nimport paho.mqtt.client as mqtt\nimport uuid\n\n# MQTT broker configuration\nBROKER = \"localhost\"  # Change if needed\nPORT = 1883\nTOPIC = \"#\"\nCLIENT_ID = f\"jupyter-client-{uuid.uuid4()}\"\n\n# --- Callback Implementations ---\n\ndef on_connect(client, userdata, flags, reason_code, properties):\n    print(f\"‚úÖ [on_connect] Connected: {reason_code}\")\n    if hasattr(flags, \"session_present\"):\n        print(f\"  ‚Ü™ session_present: {flags.session_present}\")\n    client.subscribe(TOPIC)\n\ndef on_connect_fail(client, userdata):\n    print(\"‚ùå [on_connect_fail] Connection failed.\")\n\ndef on_disconnect(client, userdata, reason_code, properties):\n    print(f\"‚ùå [on_disconnect] Disconnected: {reason_code}\")\n\ndef on_message(client, userdata, msg):\n    print(f\"üì© [on_message] Topic: {msg.topic} | Payload: {msg.payload.decode()}\")\n\ndef on_publish(client, userdata, mid, reason_codes=None, properties=None):\n    print(f\"üì§ [on_publish] mid: {mid} reason: {reason_codes}\")\n\ndef on_subscribe(client, userdata, mid, reason_codes, properties):\n    print(f\"üîî [on_subscribe] mid: {mid} reason_codes: {reason_codes}\")\n\ndef on_unsubscribe(client, userdata, mid, reason_codes, properties):\n    print(f\"üö´ [on_unsubscribe] mid: {mid} reason_codes: {reason_codes}\")\n\ndef on_log(client, userdata, level, buf):\n    print(f\"üìù [on_log] {buf}\")\n\ndef on_socket_open(client, userdata, sock):\n    print(\"üì∂ [on_socket_open] Socket opened\")\n\ndef on_socket_close(client, userdata, sock):\n    print(\"‚ùé [on_socket_close] Socket closed\")\n\ndef on_socket_register_write(client, userdata, sock):\n    print(\"üñäÔ∏è [on_socket_register_write] Socket ready for write\")\n\ndef on_socket_unregister_write(client, userdata, sock):\n    print(\"üõë [on_socket_unregister_write] Socket not ready for write\")\n\n# --- Client Setup ---\n\nclient = mqtt.Client(client_id=CLIENT_ID, callback_api_version=mqtt.CallbackAPIVersion.VERSION2)\n\nclient.on_connect = on_connect\nclient.on_connect_fail = on_connect_fail\nclient.on_disconnect = on_disconnect\nclient.on_message = on_message\nclient.on_publish = on_publish\nclient.on_subscribe = on_subscribe\nclient.on_unsubscribe = on_unsubscribe\nclient.on_log = on_log\nclient.on_socket_open = on_socket_open\nclient.on_socket_close = on_socket_close\nclient.on_socket_register_write = on_socket_register_write\nclient.on_socket_unregister_write = on_socket_unregister_write\n\n# --- Start Client ---\n\nclient.connect(BROKER, PORT, 60)\nclient.loop_start()\n\nüì∂ [on_socket_open] Socket opened\nüìù [on_log] Sending CONNECT (u0, p0, wr0, wq0, wf0, c1, k60) client_id=b'jupyter-client-b11aed8c-5d98-4f04-a984-6a0c1d6a2978'\nüñäÔ∏è [on_socket_register_write] Socket ready for write\nüõë [on_socket_unregister_write] Socket not ready for write\n\n\n&lt;MQTTErrorCode.MQTT_ERR_SUCCESS: 0&gt;\n\n\nüìù [on_log] Received CONNACK (0, 0)\n‚úÖ [on_connect] Connected: Success\n  ‚Ü™ session_present: False\nüìù [on_log] Sending SUBSCRIBE (d0, m1) [(b'#', 0)]\nüñäÔ∏è [on_socket_register_write] Socket ready for write\nüõë [on_socket_unregister_write] Socket not ready for write\nüìù [on_log] Received SUBACK\nüîî [on_subscribe] mid: 1 reason_codes: [ReasonCode(Suback, 'Granted QoS 0')]\nüìù [on_log] Received PUBLISH (d0, q0, r1, m0), '/online', ...  (1 bytes)\nüì© [on_message] Topic: /online | Payload: 0\nüì§ [on_publish] mid: 2 reason: Success\nüõë [on_socket_unregister_write] Socket not ready for write\nüìù [on_log] Received PUBLISH (d0, q0, r0, m0), '/led', ...  (1 bytes)\nüì© [on_message] Topic: /led | Payload: 0\nüìù [on_log] Sending PINGREQ\nüñäÔ∏è [on_socket_register_write] Socket ready for write\nüõë [on_socket_unregister_write] Socket not ready for write\nüìù [on_log] Received PINGRESP\nüìù [on_log] Sending PINGREQ\nüñäÔ∏è [on_socket_register_write] Socket ready for write\nüõë [on_socket_unregister_write] Socket not ready for write\nüìù [on_log] Received PINGRESP\nüìù [on_log] Sending PINGREQ\nüñäÔ∏è [on_socket_register_write] Socket ready for write\nüõë [on_socket_unregister_write] Socket not ready for write\nüìù [on_log] Received PINGRESP\nüìù [on_log] Sending PINGREQ\nüñäÔ∏è [on_socket_register_write] Socket ready for write\nüõë [on_socket_unregister_write] Socket not ready for write\nüìù [on_log] Received PINGRESP\nüìù [on_log] Sending PINGREQ\nüñäÔ∏è [on_socket_register_write] Socket ready for write\nüõë [on_socket_unregister_write] Socket not ready for write\nüìù [on_log] Received PINGRESP\nüìù [on_log] Sending PINGREQ\nüñäÔ∏è [on_socket_register_write] Socket ready for write\nüõë [on_socket_unregister_write] Socket not ready for write\nüìù [on_log] Received PINGRESP\nüìù [on_log] Sending PINGREQ\nüñäÔ∏è [on_socket_register_write] Socket ready for write\nüõë [on_socket_unregister_write] Socket not ready for write\nüìù [on_log] Received PINGRESP\nüìù [on_log] Sending PINGREQ\nüñäÔ∏è [on_socket_register_write] Socket ready for write\nüõë [on_socket_unregister_write] Socket not ready for write\nüìù [on_log] Received PINGRESP\nüìù [on_log] Sending PINGREQ\nüñäÔ∏è [on_socket_register_write] Socket ready for write\nüõë [on_socket_unregister_write] Socket not ready for write\nüìù [on_log] Received PINGRESP\nüìù [on_log] Sending PINGREQ\nüñäÔ∏è [on_socket_register_write] Socket ready for write\nüõë [on_socket_unregister_write] Socket not ready for write\nüìù [on_log] Received PINGRESP\nüìù [on_log] Sending PINGREQ\nüñäÔ∏è [on_socket_register_write] Socket ready for write\nüõë [on_socket_unregister_write] Socket not ready for write\nüìù [on_log] Received PINGRESP\nüìù [on_log] Sending PINGREQ\nüñäÔ∏è [on_socket_register_write] Socket ready for write\nüõë [on_socket_unregister_write] Socket not ready for write\nüìù [on_log] Received PINGRESP\nüìù [on_log] Sending PINGREQ\nüñäÔ∏è [on_socket_register_write] Socket ready for write\nüõë [on_socket_unregister_write] Socket not ready for write\nüìù [on_log] Received PINGRESP\nüìù [on_log] Sending PINGREQ\nüñäÔ∏è [on_socket_register_write] Socket ready for write\nüõë [on_socket_unregister_write] Socket not ready for write\nüìù [on_log] Received PINGRESP\nüìù [on_log] Sending PINGREQ\nüñäÔ∏è [on_socket_register_write] Socket ready for write\nüõë [on_socket_unregister_write] Socket not ready for write\nüìù [on_log] Received PINGRESP\nüìù [on_log] Sending PINGREQ\nüñäÔ∏è [on_socket_register_write] Socket ready for write\nüõë [on_socket_unregister_write] Socket not ready for write\nüìù [on_log] Received PINGRESP\nüìù [on_log] Sending PINGREQ\nüñäÔ∏è [on_socket_register_write] Socket ready for write\nüõë [on_socket_unregister_write] Socket not ready for write\nüìù [on_log] Received PINGRESP\nüì§ [on_publish] mid: 3 reason: Success\nüõë [on_socket_unregister_write] Socket not ready for write\nüìù [on_log] Received PUBLISH (d0, q0, r0, m0), '/led', ...  (1 bytes)\nüì© [on_message] Topic: /led | Payload: 0\n\n\n\nfor i in range(5):\n    client.publish(\"test/topic\", f\"Message {i}\")\n\n\nclient.publish(\"/led\", f\"0\")\n\nüìù [on_log] Sending PUBLISH (d0, q0, r0, m3), 'b'/led'', ... (1 bytes)\nüñäÔ∏è [on_socket_register_write] Socket ready for write\n\n\n&lt;paho.mqtt.client.MQTTMessageInfo&gt;\n\n\n\nimport matplotlib.pyplot as plt\nfrom IPython.display import clear_output\n\ndata = []\n\ndef on_message(client, userdata, msg):\n    value = float(msg.payload.decode())\n    data.append(value)\n    \n    clear_output(wait=True)\n    plt.plot(data)\n    plt.title(\"Live MQTT Plot\")\n    plt.xlabel(\"Message #\")\n    plt.ylabel(\"Value\")\n    plt.grid()\n    plt.show()\n\nclient.on_message = on_message\nresult, mid = client.subscribe(\"sensor/temp\")\nif result == mqtt.MQTT_ERR_SUCCESS:\n    print(f\"‚úÖ Subscribed successfully! MID = {mid}\")\nelse:\n    print(f\"‚ùå Failed to subscribe. Error code: {result}\")\n\n‚úÖ Subscribed successfully! MID = 14",
    "crumbs": [
      "Blog",
      "MQTT"
    ]
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Back_End",
    "section": "",
    "text": "This file will become your README and also the index of your documentation.",
    "crumbs": [
      "Blog",
      "Back_End"
    ]
  },
  {
    "objectID": "index.html#developer-guide",
    "href": "index.html#developer-guide",
    "title": "Back_End",
    "section": "Developer Guide",
    "text": "Developer Guide\nIf you are new to using nbdev here are some useful pointers to get you started.\n\nInstall Back_End in Development mode\n# make sure Back_End package is installed in development mode\n$ pip install -e .\n\n# make changes under nbs/ directory\n# ...\n\n# compile to have changes apply to Back_End\n$ nbdev_prepare",
    "crumbs": [
      "Blog",
      "Back_End"
    ]
  },
  {
    "objectID": "index.html#usage",
    "href": "index.html#usage",
    "title": "Back_End",
    "section": "Usage",
    "text": "Usage\n\nInstallation\nInstall latest from the GitHub repository:\n$ pip install git+https://github.com/bthek1/Back_End.git\nor from conda\n$ conda install -c bthek1 Back_End\nor from pypi\n$ pip install Back_End\n\n\nDocumentation\nDocumentation can be found hosted on this GitHub repository‚Äôs pages. Additionally you can find package manager specific guidelines on conda and pypi respectively.",
    "crumbs": [
      "Blog",
      "Back_End"
    ]
  },
  {
    "objectID": "index.html#how-to-use",
    "href": "index.html#how-to-use",
    "title": "Back_End",
    "section": "How to use",
    "text": "How to use\nFill me in please! Don‚Äôt forget code examples:\n\n1+1\n\n2",
    "crumbs": [
      "Blog",
      "Back_End"
    ]
  },
  {
    "objectID": "Django/rm_django_setup.html",
    "href": "Django/rm_django_setup.html",
    "title": "Django For Recovery Metrics",
    "section": "",
    "text": "Add to bash\n\nexport PATH=\"$HOME/.local/bin:$PATH\"\n\nReload bash\n\nsource ~/.bashrc",
    "crumbs": [
      "Blog",
      "Django",
      "Django For Recovery Metrics"
    ]
  },
  {
    "objectID": "Django/rm_django_setup.html#install-poetry",
    "href": "Django/rm_django_setup.html#install-poetry",
    "title": "Django For Recovery Metrics",
    "section": "",
    "text": "Add to bash\n\nexport PATH=\"$HOME/.local/bin:$PATH\"\n\nReload bash\n\nsource ~/.bashrc",
    "crumbs": [
      "Blog",
      "Django",
      "Django For Recovery Metrics"
    ]
  },
  {
    "objectID": "Django/rm_django_setup.html#install-direnv",
    "href": "Django/rm_django_setup.html#install-direnv",
    "title": "Django For Recovery Metrics",
    "section": "Install direnv",
    "text": "Install direnv",
    "crumbs": [
      "Blog",
      "Django",
      "Django For Recovery Metrics"
    ]
  },
  {
    "objectID": "Django/rm_django_setup.html#add-libraries",
    "href": "Django/rm_django_setup.html#add-libraries",
    "title": "Django For Recovery Metrics",
    "section": "Add libraries",
    "text": "Add libraries\npoetry add django\npoetry add djangorestframework\npoetry add pygments  \npoetry add django-filter\npoetry add --dev pytest",
    "crumbs": [
      "Blog",
      "Django",
      "Django For Recovery Metrics"
    ]
  },
  {
    "objectID": "Django/rm_django_setup.html#create-default-project",
    "href": "Django/rm_django_setup.html#create-default-project",
    "title": "Django For Recovery Metrics",
    "section": "Create Default Project",
    "text": "Create Default Project\ndjango-admin startproject RM_django\ncd RM_django\npython manage.py startapp Users\n\nadd model code\n\npoetry run python manage.py makemigrations\npoetry run python manage.py migrate\n\nrun server\n\npython manage.py runserver\n\nWorkflows\nname: Django CI\n\non:\n  push:\n    branches: [ main ]\n  pull_request:\n    branches: [ main ]\n\njobs:\n  test:\n    runs-on: ubuntu-latest\n\n    steps:\n    - name: Checkout code\n      uses: actions/checkout@v4\n\n    - name: Set up Python\n      uses: actions/setup-python@v2\n      with:\n        python-version: '3.12'\n\n\n    - name: Install Poetry\n      run: |\n        curl -sSL https://install.python-poetry.org | python3 -\n        export PATH=\"$HOME/.local/bin:$PATH\"\n    - name: Install dependencies\n      run: poetry install\n    - name: List files in the repository\n      run: |\n        ls ${{ github.workspace }}\n    - name: Run migrations\n      run: poetry run python RM_Django/manage.py migrate\n    - name: Run tests\n      run: poetry run python RM_Django/manage.py test",
    "crumbs": [
      "Blog",
      "Django",
      "Django For Recovery Metrics"
    ]
  },
  {
    "objectID": "Django/rm_django_setup.html#djangox---postgresql",
    "href": "Django/rm_django_setup.html#djangox---postgresql",
    "title": "Django For Recovery Metrics",
    "section": "DjangoX - postgresql",
    "text": "DjangoX - postgresql\n\nUse djanogx template to create repo\nSetup poetry\nadd .envrc file for direnv\nadd .env\n\n\nSetup Poetry\n\nadd required libraries into poetry env\n\npoetry add $(cat requirements.txt | awk '{print $1}')\n\n\nSetup postgresql using .env\nsudo -u postgres createuser --interactive\nsudo -u postgres createdb rm_db\nsudo -u postgres psql\nALTER USER x_user WITH PASSWORD 'x_password';\nGRANT ALL PRIVILEGES ON DATABASE x_db TO x_user;\n\\q\n\ndb check:\n# load env vars with export if req'd\npsql -d $DB_NAME -U $DB_USER -W\npython manage.py startapp base\npython manage.py startapp questionnaire\n\nAdd to settings -&gt; Installed Apps\n\nINSTALLED_APPS = [\n    \"rest_framework\",\n    # Local\n    \"accounts\",\n    \"pages\",\n    \"base\",\n    \"questionnaire\",\n]\n\n\nREST_FRAMEWORK = {\n    'DEFAULT_AUTHENTICATION_CLASSES': [\n        'rest_framework.authentication.SessionAuthentication',  # Use session authentication\n        'rest_framework.authentication.TokenAuthentication',    # Use token authentication\n        # Add other authentication classes as needed\n    ],\n    'DEFAULT_PERMISSION_CLASSES': [\n        'rest_framework.permissions.IsAuthenticated',  # Ensure authenticated users have access\n    ],\n}\n\nadd model code\n\npoetry run python manage.py makemigrations base\npoetry run python manage.py makemigrations questionniare\npoetry run python manage.py migrate\n\nrun server\n\npython manage.py runserver\n\n\n\nFull Prompt",
    "crumbs": [
      "Blog",
      "Django",
      "Django For Recovery Metrics"
    ]
  },
  {
    "objectID": "Django/validators.html",
    "href": "Django/validators.html",
    "title": "Validator",
    "section": "",
    "text": "Validators can be applied in: 1. Django Models (models.py) - Ensures data integrity at the database level. 2. Django Forms (forms.py) - Validates user input before saving. 3. Django REST Framework (DRF) Serializers (serializers.py) - Validates API input.",
    "crumbs": [
      "Blog",
      "Django",
      "Validator"
    ]
  },
  {
    "objectID": "Django/validators.html#where-to-use-validators",
    "href": "Django/validators.html#where-to-use-validators",
    "title": "Validator",
    "section": "",
    "text": "Validators can be applied in: 1. Django Models (models.py) - Ensures data integrity at the database level. 2. Django Forms (forms.py) - Validates user input before saving. 3. Django REST Framework (DRF) Serializers (serializers.py) - Validates API input.",
    "crumbs": [
      "Blog",
      "Django",
      "Validator"
    ]
  },
  {
    "objectID": "Django/validators.html#built-in-validators",
    "href": "Django/validators.html#built-in-validators",
    "title": "Validator",
    "section": "2. Built-in Validators",
    "text": "2. Built-in Validators\nDjango provides several built-in validators in django.core.validators.\n\n2.1 Common Built-in Validators\n\n\n\n\n\n\n\n\nValidator\nDescription\nExample\n\n\n\n\nMinValueValidator(x)\nEnsures the value is at least x\nmodels.IntegerField(validators=[MinValueValidator(1)])\n\n\nMaxValueValidator(x)\nEnsures the value is at most x\nmodels.IntegerField(validators=[MaxValueValidator(100)])\n\n\nMinLengthValidator(x)\nEnsures the string length is at least x\nmodels.CharField(validators=[MinLengthValidator(5)])\n\n\nMaxLengthValidator(x)\nEnsures the string length is at most x\nmodels.CharField(validators=[MaxLengthValidator(50)])\n\n\nRegexValidator(regex, message, code)\nEnsures the value matches a regular expression\nmodels.CharField(validators=[RegexValidator(r'^\\d{4}$', message=\"Enter 4 digits\")])\n\n\nEmailValidator\nEnsures the value is a valid email format\nmodels.EmailField(validators=[EmailValidator()])\n\n\nURLValidator\nEnsures the value is a valid URL\nmodels.URLField(validators=[URLValidator()])\n\n\nvalidate_slug\nEnsures the value is a valid slug (alphanumeric + hyphens/underscores)\nmodels.SlugField(validators=[validate_slug])\n\n\nvalidate_ipv4_address\nEnsures the value is a valid IPv4 address\nmodels.GenericIPAddressField(validators=[validate_ipv4_address])\n\n\nvalidate_ipv6_address\nEnsures the value is a valid IPv6 address\nmodels.GenericIPAddressField(validators=[validate_ipv6_address])\n\n\nvalidate_comma_separated_integer_list\nEnsures the value contains only comma-separated integers\nmodels.CharField(validators=[validate_comma_separated_integer_list])",
    "crumbs": [
      "Blog",
      "Django",
      "Validator"
    ]
  },
  {
    "objectID": "Django/validators.html#using-validators-in-models",
    "href": "Django/validators.html#using-validators-in-models",
    "title": "Validator",
    "section": "3. Using Validators in Models",
    "text": "3. Using Validators in Models\nYou can add validators to model fields to ensure data is stored correctly.\n\nExample: Using Multiple Validators in a Model\nfrom django.db import models\nfrom django.core.validators import MinValueValidator, MaxValueValidator, RegexValidator, EmailValidator\n\nclass Employee(models.Model):\n    name = models.CharField(\n        max_length=100,\n        validators=[\n            RegexValidator(r'^[A-Za-z ]+$', message=\"Only alphabets and spaces allowed\")\n        ]\n    )\n    age = models.IntegerField(validators=[MinValueValidator(18), MaxValueValidator(65)])\n    email = models.EmailField(validators=[EmailValidator()])\n    phone = models.CharField(\n        max_length=10,\n        validators=[RegexValidator(r'^\\d{10}$', message=\"Enter a valid 10-digit phone number\")]\n    )",
    "crumbs": [
      "Blog",
      "Django",
      "Validator"
    ]
  },
  {
    "objectID": "Django/validators.html#using-validators-in-forms",
    "href": "Django/validators.html#using-validators-in-forms",
    "title": "Validator",
    "section": "4. Using Validators in Forms",
    "text": "4. Using Validators in Forms\nIn forms, you can specify validators inside forms.py.\n\nExample: Validating an Input Field\nfrom django import forms\nfrom django.core.validators import MinLengthValidator, MaxLengthValidator, RegexValidator\n\nclass ContactForm(forms.Form):\n    name = forms.CharField(\n        max_length=50,\n        validators=[RegexValidator(r'^[A-Za-z ]+$', message=\"Only alphabets allowed\")]\n    )\n    message = forms.CharField(\n        widget=forms.Textarea,\n        validators=[MinLengthValidator(10, message=\"Message must be at least 10 characters long\")]\n    )",
    "crumbs": [
      "Blog",
      "Django",
      "Validator"
    ]
  },
  {
    "objectID": "Django/validators.html#using-validators-in-django-rest-framework-drf-serializers",
    "href": "Django/validators.html#using-validators-in-django-rest-framework-drf-serializers",
    "title": "Validator",
    "section": "5. Using Validators in Django REST Framework (DRF) Serializers",
    "text": "5. Using Validators in Django REST Framework (DRF) Serializers\nWhen using Django REST Framework (DRF), validators ensure API inputs are valid.\n\nExample: Using Validators in a Serializer\nfrom rest_framework import serializers\nfrom django.core.validators import MinValueValidator, MaxValueValidator\n\nclass ProductSerializer(serializers.Serializer):\n    name = serializers.CharField(max_length=100)\n    price = serializers.DecimalField(\n        max_digits=10,\n        decimal_places=2,\n        validators=[MinValueValidator(0)]\n    )",
    "crumbs": [
      "Blog",
      "Django",
      "Validator"
    ]
  },
  {
    "objectID": "Django/validators.html#creating-custom-validators",
    "href": "Django/validators.html#creating-custom-validators",
    "title": "Validator",
    "section": "6. Creating Custom Validators",
    "text": "6. Creating Custom Validators\nIf built-in validators don‚Äôt meet your requirements, you can create custom validators.\n\n6.1 Function-Based Custom Validator\nA function-based validator raises a ValidationError if input is invalid.\nfrom django.core.exceptions import ValidationError\n\ndef validate_even(value):\n    \"\"\"Ensure the value is an even number.\"\"\"\n    if value % 2 != 0:\n        raise ValidationError(f'{value} is not an even number.')\n\n# Using it in a model\nclass MyModel(models.Model):\n    number = models.IntegerField(validators=[validate_even])\n\n\n6.2 Class-Based Custom Validator\nA class-based validator allows reusability and multiple validation rules.\nfrom django.core.exceptions import ValidationError\n\nclass MinWordsValidator:\n    \"\"\"Ensure the input has at least `min_words` words.\"\"\"\n    def __init__(self, min_words=3):\n        self.min_words = min_words\n\n    def __call__(self, value):\n        word_count = len(value.split())\n        if word_count &lt; self.min_words:\n            raise ValidationError(f'Must have at least {self.min_words} words.')\n\n# Using it in a model\nclass BlogPost(models.Model):\n    title = models.CharField(max_length=200)\n    content = models.TextField(validators=[MinWordsValidator(5)])",
    "crumbs": [
      "Blog",
      "Django",
      "Validator"
    ]
  },
  {
    "objectID": "Django/validators.html#raising-validation-errors-manually",
    "href": "Django/validators.html#raising-validation-errors-manually",
    "title": "Validator",
    "section": "7. Raising Validation Errors Manually",
    "text": "7. Raising Validation Errors Manually\nDjango allows you to raise validation errors in model‚Äôs clean() method.\n\nExample: Enforcing a Business Rule in a Model\nfrom django.core.exceptions import ValidationError\nfrom django.db import models\n\nclass Booking(models.Model):\n    date = models.DateField()\n    attendees = models.PositiveIntegerField()\n\n    def clean(self):\n        if self.attendees &gt; 100:\n            raise ValidationError({'attendees': 'Maximum 100 attendees allowed.'})",
    "crumbs": [
      "Blog",
      "Django",
      "Validator"
    ]
  },
  {
    "objectID": "Django/validators.html#validating-in-django-views",
    "href": "Django/validators.html#validating-in-django-views",
    "title": "Validator",
    "section": "8. Validating in Django Views",
    "text": "8. Validating in Django Views\nIf using function-based or class-based views, you can manually validate input.\n\nExample: Manually Validating User Input in a View\nfrom django.core.exceptions import ValidationError\nfrom django.shortcuts import render\nfrom .models import Booking\nfrom .forms import BookingForm\n\ndef booking_view(request):\n    if request.method == \"POST\":\n        form = BookingForm(request.POST)\n        if form.is_valid():\n            try:\n                form.clean()  # Manually invoke the validation\n                form.save()\n                return render(request, \"success.html\")\n            except ValidationError as e:\n                form.add_error(None, e)\n    else:\n        form = BookingForm()\n    return render(request, \"booking_form.html\", {\"form\": form})",
    "crumbs": [
      "Blog",
      "Django",
      "Validator"
    ]
  },
  {
    "objectID": "Django/validators.html#skipping-validation",
    "href": "Django/validators.html#skipping-validation",
    "title": "Validator",
    "section": "9. Skipping Validation",
    "text": "9. Skipping Validation\nYou can skip validation when saving a model using:\ninstance.save(validate=False)\nUse with caution! It bypasses all validation rules, which may lead to database inconsistencies.",
    "crumbs": [
      "Blog",
      "Django",
      "Validator"
    ]
  },
  {
    "objectID": "Django/validators.html#debugging-validators",
    "href": "Django/validators.html#debugging-validators",
    "title": "Validator",
    "section": "10. Debugging Validators",
    "text": "10. Debugging Validators\nIf a validation error occurs, check: - If the validator function is executed using print statements or logging. - Raise exceptions to test: python   raise ValidationError(\"Custom error message\") - Use Django‚Äôs shell to test manually: bash   python manage.py shell   &gt;&gt;&gt; from myapp.models import Booking   &gt;&gt;&gt; b = Booking(date=\"2025-01-01\", attendees=150)   &gt;&gt;&gt; b.full_clean()  # Manually run all model validation   ValidationError: {'attendees': ['Maximum 100 attendees allowed.']}",
    "crumbs": [
      "Blog",
      "Django",
      "Validator"
    ]
  },
  {
    "objectID": "Django/validators.html#summary-table",
    "href": "Django/validators.html#summary-table",
    "title": "Validator",
    "section": "11. Summary Table",
    "text": "11. Summary Table\n\n\n\n\n\n\n\n\nValidator Type\nExample Use Case\nNotes\n\n\n\n\nBuilt-in Validators\nMinValueValidator(10)\nSimple and efficient\n\n\nFunction-Based Validators\nvalidate_even(value)\nBest for simple conditions\n\n\nClass-Based Validators\nMinWordsValidator(min_words=5)\nBest for reusable rules\n\n\nForm Validation\nforms.CharField(validators=[RegexValidator()])\nEnsures user input is valid before saving\n\n\nSerializer Validation\nserializers.CharField(validators=[MinLengthValidator(5)])\nEnsures API input is correct\n\n\nModel Clean Method\ndef clean(self): ...\nAllows complex, multi-field validation",
    "crumbs": [
      "Blog",
      "Django",
      "Validator"
    ]
  },
  {
    "objectID": "Django/validators.html#final-thoughts",
    "href": "Django/validators.html#final-thoughts",
    "title": "Validator",
    "section": "Final Thoughts",
    "text": "Final Thoughts\n\nUse built-in validators where possible.\nUse function-based or class-based validators for reusable custom rules.\nLeverage clean() in models for multi-field validation.\nDebug issues using Django Shell (python manage.py shell).\n\nDjango validators are a powerful way to enforce data integrity and business rules at different levels.",
    "crumbs": [
      "Blog",
      "Django",
      "Validator"
    ]
  },
  {
    "objectID": "Django/django_mail.html",
    "href": "Django/django_mail.html",
    "title": "Mail Configuration",
    "section": "",
    "text": "1. Basic Email Configuration\nDjango uses the EmailMessage class and provides a simple interface for sending emails. To start, configure your email backend in settings.py:\n# settings.py\n\nEMAIL_BACKEND = 'django.core.mail.backends.smtp.EmailBackend'  # Default backend\nEMAIL_HOST = 'smtp.gmail.com'  # Replace with your email provider's SMTP server\nEMAIL_PORT = 587  # Typically 587 for TLS\nEMAIL_USE_TLS = True\nEMAIL_USE_SSL = False  # Use either TLS or SSL, not both\nEMAIL_HOST_USER = 'your_email@example.com'\nEMAIL_HOST_PASSWORD = 'your_password'\nDEFAULT_FROM_EMAIL = 'your_email@example.com'\n\nEMAIL_BACKEND: Choose an email backend.\n\nsmtp.EmailBackend: Default option for sending real emails.\ndjango.core.mail.backends.console.EmailBackend: Logs emails to the console (useful for testing).\ndjango.core.mail.backends.filebased.EmailBackend: Writes emails to files.\ndjango.core.mail.backends.dummy.EmailBackend: Disables sending emails (useful for development).\nThird-party options like django-ses for AWS SES.\n\n\n\n\nAWS SES\n# Email backend for AWS SES\nEMAIL_BACKEND = 'django_ses.SESBackend'\n\n# AWS SES Configuration\nAWS_ACCESS_KEY_ID = '&lt;your_aws_access_key_id&gt;'\nAWS_SECRET_ACCESS_KEY = '&lt;your_aws_secret_access_key&gt;'\nAWS_SES_REGION_NAME = '&lt;your_region&gt;'  # e.g., 'us-east-1'\nAWS_SES_REGION_ENDPOINT = 'email.&lt;your_region&gt;.amazonaws.com'  # e.g., 'email.us-east-1.amazonaws.com'\n\n# Optional settings for SES\nAWS_SES_AUTO_THROTTLE = 0.5  # Adjust based on your sending rate (0.5 = 50% utilization)\nAWS_SES_RETURN_PATH = 'bounce@example.com'  # Email address for bounce notifications\nwith .env\nimport environ\n\nenv = environ.Env()\nenviron.Env.read_env()\n\nAWS_ACCESS_KEY_ID = env('AWS_ACCESS_KEY_ID')\nAWS_SECRET_ACCESS_KEY = env('AWS_SECRET_ACCESS_KEY')\nAWS_SES_REGION_NAME = env('AWS_SES_REGION_NAME')\nAWS_SES_REGION_ENDPOINT = env('AWS_SES_REGION_ENDPOINT')\n\n\n\n2. Sending Emails\nUse Django‚Äôs built-in send_mail or EmailMessage:\n\nSimple Email\nfrom django.core.mail import send_mail\n\nsend_mail(\n    'Subject here',\n    'Here is the message.',\n    'from@example.com',\n    ['to@example.com'],\n    fail_silently=False,\n)\n\n\nAdvanced Email with Attachments\nfrom django.core.mail import EmailMessage\n\nemail = EmailMessage(\n    'Subject here',\n    'Here is the message.',\n    'from@example.com',\n    ['to@example.com'],\n    cc=['cc@example.com'],\n    bcc=['bcc@example.com'],\n)\nemail.attach_file('/path/to/file.pdf')\nemail.send()\n\n\n\n\n3. HTML Emails\nTo send emails with HTML content:\nfrom django.core.mail import EmailMessage\n\nemail = EmailMessage(\n    'Subject here',\n    'Fallback plain text content.',\n    'from@example.com',\n    ['to@example.com']\n)\nemail.content_subtype = \"html\"  # Specify the email content type as HTML\nemail.body = '&lt;h1&gt;Hello&lt;/h1&gt;&lt;p&gt;This is a test email.&lt;/p&gt;'\nemail.send()\n\n\n\n4. Using Templates for Emails\nUse Django templates for dynamic content:\n\nEmail Template (templates/email.html):\n&lt;h1&gt;Hello {{ name }}&lt;/h1&gt;\n&lt;p&gt;This is your message: {{ message }}&lt;/p&gt;\n\n\nSending the Email:\nfrom django.template.loader import render_to_string\nfrom django.core.mail import EmailMessage\n\ncontext = {'name': 'Ben', 'message': 'Welcome to Django mailing!'}\nhtml_content = render_to_string('email.html', context)\n\nemail = EmailMessage(\n    'Welcome Email',\n    html_content,\n    'from@example.com',\n    ['to@example.com']\n)\nemail.content_subtype = \"html\"\nemail.send()\n\n\n\n\n5. Testing Emails\nDjango offers tools for testing email functionality:\n\nConsole Email Backend:\nEMAIL_BACKEND = 'django.core.mail.backends.console.EmailBackend'\nEmails are printed to the console instead of being sent.\n\n\nFile-Based Email Backend:\nEMAIL_BACKEND = 'django.core.mail.backends.filebased.EmailBackend'\nEMAIL_FILE_PATH = '/tmp/app-messages'  # Directory where emails are saved\n\n\n\n\n6. Email Queues\nIf you have high email volume, use a task queue like Celery:\n\nInstall Celery and a Broker:\npip install celery[redis]\n\n\nCelery Configuration:\n\nConfigure Celery with Redis as the broker.\nUse delay() to send emails asynchronously.\n\n\n\n\n\n7. Third-Party Libraries\n\ndjango-anymail: Integrates with email services like Mailgun, SendGrid, and Amazon SES.\ndjango-ses: For Amazon SES.\ndjango-email-multi-alternatives: Makes it easier to send multi-part emails.\n\n\n\n\n8. Email Signal Example\nYou can use Django signals to send emails on specific actions:\nfrom django.db.models.signals import post_save\nfrom django.dispatch import receiver\nfrom django.core.mail import send_mail\nfrom .models import UserProfile\n\n@receiver(post_save, sender=UserProfile)\ndef send_welcome_email(sender, instance, created, **kwargs):\n    if created:\n        send_mail(\n            'Welcome!',\n            f'Hi {instance.user.username}, welcome to our platform!',\n            'from@example.com',\n            [instance.user.email],\n        )\n\n\n\n9. Best Practices\n\nEnvironment Variables: Store sensitive credentials (e.g., EMAIL_HOST_USER, EMAIL_HOST_PASSWORD) in environment variables using libraries like python-decouple or django-environ.\nError Handling: Use try...except blocks for email failures.\nRate Limits: Be aware of your email provider‚Äôs rate limits.\nSPF, DKIM, DMARC: Configure these DNS records to avoid being flagged as spam.\nUse an Email Service: For production, consider services like Mailgun, SendGrid, or AWS SES for reliability.\n\n\nLet me know if you need examples or help configuring specific email features in Django!\n\n\n\n\n Back to top",
    "crumbs": [
      "Blog",
      "Django",
      "Mail Configuration"
    ]
  },
  {
    "objectID": "Django/1_security.html",
    "href": "Django/1_security.html",
    "title": "Security",
    "section": "",
    "text": "Feature\nDescription\n\n\n\n\nWhat\nOne-way transformation of data\n\n\nUse Case\nSecure password storage, file integrity checks\n\n\nCan be reversed?\n‚ùå No\n\n\nCommon Algorithms\nSHA-256, bcrypt, PBKDF2, Argon2\n\n\n\n\n\n\nStore only the hashed + salted password (e.g.¬†Django uses PBKDF2 by default).\nNever store plain passwords.\nValidate with check_password().",
    "crumbs": [
      "Blog",
      "Django",
      "Security"
    ]
  },
  {
    "objectID": "Django/1_security.html#hashing",
    "href": "Django/1_security.html#hashing",
    "title": "Security",
    "section": "",
    "text": "Feature\nDescription\n\n\n\n\nWhat\nOne-way transformation of data\n\n\nUse Case\nSecure password storage, file integrity checks\n\n\nCan be reversed?\n‚ùå No\n\n\nCommon Algorithms\nSHA-256, bcrypt, PBKDF2, Argon2\n\n\n\n\n\n\nStore only the hashed + salted password (e.g.¬†Django uses PBKDF2 by default).\nNever store plain passwords.\nValidate with check_password().",
    "crumbs": [
      "Blog",
      "Django",
      "Security"
    ]
  },
  {
    "objectID": "Django/1_security.html#encryption",
    "href": "Django/1_security.html#encryption",
    "title": "Security",
    "section": "üîë 2. Encryption",
    "text": "üîë 2. Encryption\n\n\n\nFeature\nDescription\n\n\n\n\nWhat\nReversible encoding using a key\n\n\nUse Case\nSecure transmission (HTTPS), data at rest\n\n\nCan be reversed?\n‚úÖ Yes, with key\n\n\nTypes\nSymmetric (AES), Asymmetric (RSA)\n\n\n\n\nüîß Web Use\n\nTLS/SSL encrypts HTTP traffic (HTTPS).\nEncrypt sensitive database fields (e.g.¬†card details) using Django-encrypted-fields or Fernet.",
    "crumbs": [
      "Blog",
      "Django",
      "Security"
    ]
  },
  {
    "objectID": "Django/1_security.html#keys-symmetric-asymmetric",
    "href": "Django/1_security.html#keys-symmetric-asymmetric",
    "title": "Security",
    "section": "üîë 3. Keys (Symmetric & Asymmetric)",
    "text": "üîë 3. Keys (Symmetric & Asymmetric)\n\n\n\n\n\n\n\n\nType\nUse\nExample\n\n\n\n\nSymmetric\nSame key for encrypt/decrypt\nAES\n\n\nAsymmetric\nPublic key encrypts, private key decrypts\nRSA, HTTPS certificates\n\n\n\n\nüîß Web Use\n\nHTTPS uses TLS with asymmetric keys to establish secure sessions.\nJWTs are signed with private keys (asymmetric) or HMAC secrets (symmetric).",
    "crumbs": [
      "Blog",
      "Django",
      "Security"
    ]
  },
  {
    "objectID": "Django/1_security.html#authentication-vs-authorization",
    "href": "Django/1_security.html#authentication-vs-authorization",
    "title": "Security",
    "section": "üîÑ 4. Authentication vs Authorization",
    "text": "üîÑ 4. Authentication vs Authorization\n\n\n\nTerm\nMeans\nExample\n\n\n\n\nAuthentication\nVerifying identity\nLogin form\n\n\nAuthorization\nVerifying access rights\nAccessing admin page",
    "crumbs": [
      "Blog",
      "Django",
      "Security"
    ]
  },
  {
    "objectID": "Django/1_security.html#jwt-json-web-token",
    "href": "Django/1_security.html#jwt-json-web-token",
    "title": "Security",
    "section": "üîê 5. JWT (JSON Web Token)",
    "text": "üîê 5. JWT (JSON Web Token)\n\nCompact, self-contained token used for stateless authentication.\nContains header, payload, and signature.\n\n\nüîß Web Use\n\nUsed in APIs to authenticate users (Authorization: Bearer &lt;token&gt;).\nMust be signed and verified with a secret.",
    "crumbs": [
      "Blog",
      "Django",
      "Security"
    ]
  },
  {
    "objectID": "Django/1_security.html#cookies",
    "href": "Django/1_security.html#cookies",
    "title": "Security",
    "section": "üç™ 6. Cookies",
    "text": "üç™ 6. Cookies\n\n\n\nAttribute\nUse\n\n\n\n\nHttpOnly\nJS cannot read (safer)\n\n\nSecure\nSent only over HTTPS\n\n\nSameSite\nProtects from CSRF (Lax or Strict)\n\n\n\n\nüîß Web Use\n\nStore session IDs or refresh tokens.\nSet flags: Secure, HttpOnly, SameSite=Lax.",
    "crumbs": [
      "Blog",
      "Django",
      "Security"
    ]
  },
  {
    "objectID": "Django/1_security.html#csrf-cross-site-request-forgery",
    "href": "Django/1_security.html#csrf-cross-site-request-forgery",
    "title": "Security",
    "section": "üß™ 7. CSRF (Cross-Site Request Forgery)",
    "text": "üß™ 7. CSRF (Cross-Site Request Forgery)\nWhat | Attack where logged-in users are tricked into submitting unintended requests |\nPrevent with | CSRF tokens, SameSite cookies, checking Origin headers |\n\nüîß Web Use\n\nDjango includes CSRF protection out of the box.\nYou must use {% csrf_token %} in HTML forms.\nNot needed for stateless JWT APIs.",
    "crumbs": [
      "Blog",
      "Django",
      "Security"
    ]
  },
  {
    "objectID": "Django/1_security.html#xss-cross-site-scripting",
    "href": "Django/1_security.html#xss-cross-site-scripting",
    "title": "Security",
    "section": "üßº 8. XSS (Cross-Site Scripting)",
    "text": "üßº 8. XSS (Cross-Site Scripting)\nWhat | Inject malicious JS into pages |\nTypes | Stored, Reflected, DOM |\nPrevent with | Escaping output, input validation, Content Security Policy (CSP) |\n\nüîß Web Use\n\nNever render raw HTML from users.\nDjango auto-escapes { variable }.",
    "crumbs": [
      "Blog",
      "Django",
      "Security"
    ]
  },
  {
    "objectID": "Django/1_security.html#cors-cross-origin-resource-sharing",
    "href": "Django/1_security.html#cors-cross-origin-resource-sharing",
    "title": "Security",
    "section": "üåê 9. CORS (Cross-Origin Resource Sharing)",
    "text": "üåê 9. CORS (Cross-Origin Resource Sharing)\nWhat | Controls which origins can access your API |\nPrevents | Unauthorized frontend domains from calling your backend |\nHeaders | Access-Control-Allow-Origin, Access-Control-Allow-Credentials |\n\nüîß Web Use\n\nUse django-cors-headers to allow trusted origins (e.g., your React frontend).",
    "crumbs": [
      "Blog",
      "Django",
      "Security"
    ]
  },
  {
    "objectID": "Django/1_security.html#https-and-ssltls",
    "href": "Django/1_security.html#https-and-ssltls",
    "title": "Security",
    "section": "üîê 10. HTTPS and SSL/TLS",
    "text": "üîê 10. HTTPS and SSL/TLS\nWhat | Encrypts traffic between client and server |\nWhy | Prevents MITM (Man-in-the-Middle) attacks |\nImplement with | TLS certificates (e.g., Let‚Äôs Encrypt) |\n\nüîß Web Use\n\nUse HTTPS in production.\nRedirect all HTTP traffic to HTTPS.",
    "crumbs": [
      "Blog",
      "Django",
      "Security"
    ]
  },
  {
    "objectID": "Django/1_security.html#rate-limiting-throttling",
    "href": "Django/1_security.html#rate-limiting-throttling",
    "title": "Security",
    "section": "üö¶ 11. Rate Limiting & Throttling",
    "text": "üö¶ 11. Rate Limiting & Throttling\nWhat | Limits API usage per user/IP |\nPrevents | Abuse, brute force, scraping |\nTools | Django Ratelimit, DRF throttling |\n\nüîß Web Use\nREST_FRAMEWORK = {\n  'DEFAULT_THROTTLE_CLASSES': [\n    'rest_framework.throttling.UserRateThrottle',\n    'rest_framework.throttling.AnonRateThrottle',\n  ],\n  'DEFAULT_THROTTLE_RATES': {\n    'user': '1000/day',\n    'anon': '100/day',\n  }\n}",
    "crumbs": [
      "Blog",
      "Django",
      "Security"
    ]
  },
  {
    "objectID": "Django/1_security.html#secure-http-headers",
    "href": "Django/1_security.html#secure-http-headers",
    "title": "Security",
    "section": "üßæ 12. Secure HTTP Headers",
    "text": "üßæ 12. Secure HTTP Headers\n\n\n\nHeader\nPurpose\n\n\n\n\nX-Frame-Options: DENY\nPrevent clickjacking\n\n\nX-Content-Type-Options: nosniff\nStop MIME-type attacks\n\n\nContent-Security-Policy\nPrevent inline scripts\n\n\nStrict-Transport-Security\nEnforce HTTPS\n\n\n\n\nüîß Web Use\n\nUse Django‚Äôs SecurityMiddleware and tools like django-secure.",
    "crumbs": [
      "Blog",
      "Django",
      "Security"
    ]
  },
  {
    "objectID": "Django/1_security.html#security-practices-for-web-developers",
    "href": "Django/1_security.html#security-practices-for-web-developers",
    "title": "Security",
    "section": "üß† 13. Security Practices for Web Developers",
    "text": "üß† 13. Security Practices for Web Developers\n\n\n\n\n\n\n\nTask\nBest Practice\n\n\n\n\nStore passwords\nUse make_password() and check_password() (Django)\n\n\nStore secrets\nUse .env files or secret managers (e.g., AWS SSM)\n\n\nInput validation\nValidate both client and server-side\n\n\nError handling\nDon‚Äôt expose stack traces to users\n\n\nLogging\nLog auth failures, unusual access patterns\n\n\nDependency checks\nUse pip-audit, safety to check vulnerable packages",
    "crumbs": [
      "Blog",
      "Django",
      "Security"
    ]
  },
  {
    "objectID": "Django/1_security.html#security-checklist-summary",
    "href": "Django/1_security.html#security-checklist-summary",
    "title": "Security",
    "section": "‚úÖ Security Checklist Summary",
    "text": "‚úÖ Security Checklist Summary\n\n\n\nArea\nWhat to Do\n\n\n\n\nPasswords\nHash + salt\n\n\nSessions\nSecure cookies\n\n\nAPIs\nUse tokens (JWT, OAuth)\n\n\nCORS\nAllow only trusted domains\n\n\nCSRF\nProtect forms and cookies\n\n\nXSS\nEscape output\n\n\nHTTPS\nUse TLS and redirect HTTP\n\n\nHeaders\nSet security headers\n\n\nSecrets\nKeep out of codebase\n\n\nLogs\nMonitor failures + suspicious events",
    "crumbs": [
      "Blog",
      "Django",
      "Security"
    ]
  },
  {
    "objectID": "Django/django_constance.html",
    "href": "Django/django_constance.html",
    "title": "Django Constance",
    "section": "",
    "text": "django-constance lets you:\n‚úÖ Define configuration variables in settings.py ‚úÖ Edit them via Django Admin ‚úÖ Store them in the database or Redis ‚úÖ Use them like normal Django settings (e.g.¬†config.FEATURE_ENABLED)",
    "crumbs": [
      "Blog",
      "Django",
      "Django Constance"
    ]
  },
  {
    "objectID": "Django/django_constance.html#what-is-django-constance",
    "href": "Django/django_constance.html#what-is-django-constance",
    "title": "Django Constance",
    "section": "",
    "text": "django-constance lets you:\n‚úÖ Define configuration variables in settings.py ‚úÖ Edit them via Django Admin ‚úÖ Store them in the database or Redis ‚úÖ Use them like normal Django settings (e.g.¬†config.FEATURE_ENABLED)",
    "crumbs": [
      "Blog",
      "Django",
      "Django Constance"
    ]
  },
  {
    "objectID": "Django/django_constance.html#installation",
    "href": "Django/django_constance.html#installation",
    "title": "Django Constance",
    "section": "üì¶ Installation",
    "text": "üì¶ Installation\npip install django-constance\nThen add to settings.py:\nINSTALLED_APPS += [\n    \"constance\",\n    \"constance.backends.database\",  # or \"constance.backends.redisd\"\n]",
    "crumbs": [
      "Blog",
      "Django",
      "Django Constance"
    ]
  },
  {
    "objectID": "Django/django_constance.html#configuration",
    "href": "Django/django_constance.html#configuration",
    "title": "Django Constance",
    "section": "üõ†Ô∏è Configuration",
    "text": "üõ†Ô∏è Configuration\n\n1. Select Backend\nDatabase:\nCONSTANCE_BACKEND = \"constance.backends.database.DatabaseBackend\"\nRedis:\nCONSTANCE_BACKEND = \"constance.backends.redisd.RedisBackend\"\nCONSTANCE_REDIS_CONNECTION = {\n    \"host\": \"localhost\",\n    \"port\": 6379,\n    \"db\": 0,\n}\n\n\n\n2. Define Your Config Variables\nfrom datetime import timedelta\n\nCONSTANCE_CONFIG = {\n    \"FEATURE_X_ENABLED\": (False, \"Enable the new feature X toggle\"),\n    \"MAX_UPLOAD_SIZE_MB\": (5, \"Maximum upload size in MB\"),\n    \"WELCOME_MESSAGE\": (\"Welcome to Recovery Metrics!\", \"Homepage welcome message\"),\n    \"SESSION_TIMEOUT\": (timedelta(minutes=30), \"User session timeout\"),\n}\nYou can also define types and validators:\nCONSTANCE_CONFIG_FIELDSETS = {\n    \"General\": [\"FEATURE_X_ENABLED\", \"WELCOME_MESSAGE\"],\n    \"Limits\": [\"MAX_UPLOAD_SIZE_MB\", \"SESSION_TIMEOUT\"],\n}\n\n\n\n3. Run Migrations\npython manage.py migrate\n\n\n\n4. Use in Code\nfrom constance import config\n\nif config.FEATURE_X_ENABLED:\n    print(\"Feature X is enabled!\")\n\nprint(\"Max upload size:\", config.MAX_UPLOAD_SIZE_MB)\nYou access them like normal settings: config.&lt;SETTING_NAME&gt;\n\n\n\n5. Access via Django Admin\nGo to Django Admin ‚Üí ‚ÄúConfig‚Äù From here, all defined settings will be editable by superusers.",
    "crumbs": [
      "Blog",
      "Django",
      "Django Constance"
    ]
  },
  {
    "objectID": "Django/django_constance.html#advanced-features",
    "href": "Django/django_constance.html#advanced-features",
    "title": "Django Constance",
    "section": "‚ú® Advanced Features",
    "text": "‚ú® Advanced Features\n\n‚úÖ config Is Lazy\nYou don‚Äôt have to worry about startup-time queries‚Äîconfig fetches settings lazily and caches them.\n\n\n\nüß™ Use in Tests\nTo override during tests:\nfrom constance.test import override_config\n\n@override_config(FEATURE_X_ENABLED=True)\ndef test_feature_flag():\n    assert config.FEATURE_X_ENABLED\n\n\n\nüîÑ Override Backend\nWant to override config behavior? You can subclass the backend.",
    "crumbs": [
      "Blog",
      "Django",
      "Django Constance"
    ]
  },
  {
    "objectID": "Django/django_constance.html#security-tip",
    "href": "Django/django_constance.html#security-tip",
    "title": "Django Constance",
    "section": "üîí Security Tip",
    "text": "üîí Security Tip\n\nOnly trusted superusers should have access to the Config admin section.\nAvoid storing sensitive secrets (use django-environ or os.environ for secrets).",
    "crumbs": [
      "Blog",
      "Django",
      "Django Constance"
    ]
  },
  {
    "objectID": "Django/django_constance.html#when-should-you-use-it",
    "href": "Django/django_constance.html#when-should-you-use-it",
    "title": "Django Constance",
    "section": "üìä When Should You Use It?",
    "text": "üìä When Should You Use It?\nUse django-constance when you want to:\n\n\n\nUse Case\nUse? ‚úÖ\n\n\n\n\nFeature toggles\n‚úÖ\n\n\nCustom user-facing text\n‚úÖ\n\n\nThresholds or limits\n‚úÖ\n\n\nSecrets and credentials\n‚ùå\n\n\nPer-user or per-client configs\n‚ùå (use model fields instead)",
    "crumbs": [
      "Blog",
      "Django",
      "Django Constance"
    ]
  },
  {
    "objectID": "Django/django_constance.html#alternative-django-dynamic-preferences",
    "href": "Django/django_constance.html#alternative-django-dynamic-preferences",
    "title": "Django Constance",
    "section": "üß© Alternative: django-dynamic-preferences",
    "text": "üß© Alternative: django-dynamic-preferences\n\nPer-user or per-model settings\nMore complex forms\nSlower performance\n\nBut for global, site-wide config, django-constance is simple and production-ready.",
    "crumbs": [
      "Blog",
      "Django",
      "Django Constance"
    ]
  },
  {
    "objectID": "Django/django_constance.html#example-project",
    "href": "Django/django_constance.html#example-project",
    "title": "Django Constance",
    "section": "üß™ Example Project",
    "text": "üß™ Example Project\n# settings.py\nCONSTANCE_CONFIG = {\n    \"ENABLE_DAILY_SYNC\": (True, \"Toggle daily CRM sync job\"),\n    \"DAILY_SYNC_TIME\": (\"02:00\", \"Time to run daily CRM sync\"),\n}\n\n# Usage\nfrom constance import config\nif config.ENABLE_DAILY_SYNC:\n    print(\"Starting daily sync at\", config.DAILY_SYNC_TIME)\n\nWould you like help setting this up in your project with a feature flag (e.g.¬†\"CRM_BACKFILL_ENABLED\")?",
    "crumbs": [
      "Blog",
      "Django",
      "Django Constance"
    ]
  },
  {
    "objectID": "Django/2_jsonfield.html",
    "href": "Django/2_jsonfield.html",
    "title": "JSONField",
    "section": "",
    "text": "Feature\nDetails\n\n\n\n\nType\nA Django field that stores JSON-formatted data\n\n\nNative Support\nPostgreSQL (native JSON/JSONB support); other databases via Django\n\n\nDjango Version\nAvailable in Django 3.1+ for all supported DBs (previously PostgreSQL only)\n\n\nData Type\nJSON data: dictionaries, lists, strings, numbers, booleans",
    "crumbs": [
      "Blog",
      "Django",
      "JSONField"
    ]
  },
  {
    "objectID": "Django/2_jsonfield.html#what-is-jsonfield",
    "href": "Django/2_jsonfield.html#what-is-jsonfield",
    "title": "JSONField",
    "section": "",
    "text": "Feature\nDetails\n\n\n\n\nType\nA Django field that stores JSON-formatted data\n\n\nNative Support\nPostgreSQL (native JSON/JSONB support); other databases via Django\n\n\nDjango Version\nAvailable in Django 3.1+ for all supported DBs (previously PostgreSQL only)\n\n\nData Type\nJSON data: dictionaries, lists, strings, numbers, booleans",
    "crumbs": [
      "Blog",
      "Django",
      "JSONField"
    ]
  },
  {
    "objectID": "Django/2_jsonfield.html#how-to-use-jsonfield-in-django",
    "href": "Django/2_jsonfield.html#how-to-use-jsonfield-in-django",
    "title": "JSONField",
    "section": "üî® 2. How to Use JSONField in Django",
    "text": "üî® 2. How to Use JSONField in Django\n\nBasic Usage Example\nfrom django.db import models\n\nclass Practitioner(models.Model):\n    name = models.CharField(max_length=255)\n    settings = models.JSONField(default=dict)  # Store flexible settings\n‚úÖ The field accepts Python dictionaries, lists, or JSON serializable objects.",
    "crumbs": [
      "Blog",
      "Django",
      "JSONField"
    ]
  },
  {
    "objectID": "Django/2_jsonfield.html#data-you-can-store-in-jsonfield",
    "href": "Django/2_jsonfield.html#data-you-can-store-in-jsonfield",
    "title": "JSONField",
    "section": "üìù 3. Data You Can Store in JSONField",
    "text": "üìù 3. Data You Can Store in JSONField\n\n\n\nPython Type\nJSON Equivalent\n\n\n\n\ndict\nJSON object\n\n\nlist/tuple\nJSON array\n\n\nstr\nJSON string\n\n\nint/float\nJSON number\n\n\nbool\nJSON boolean\n\n\nNone\nJSON null",
    "crumbs": [
      "Blog",
      "Django",
      "JSONField"
    ]
  },
  {
    "objectID": "Django/2_jsonfield.html#jsonfield-field-arguments",
    "href": "Django/2_jsonfield.html#jsonfield-field-arguments",
    "title": "JSONField",
    "section": "‚öôÔ∏è 4. JSONField Field Arguments",
    "text": "‚öôÔ∏è 4. JSONField Field Arguments\n\n\n\nArgument\nPurpose\n\n\n\n\ndefault\nDefault value (e.g., dict, list)\n\n\nnull\nAllows storing NULL in the database if True\n\n\nblank\nAllows empty form submissions (use with null)\n\n\nvalidators\nList of validator functions for JSON content\n\n\nencoder\nCustom JSON encoder (usually unnecessary)\n\n\ndecoder\nCustom JSON decoder (rare use)",
    "crumbs": [
      "Blog",
      "Django",
      "JSONField"
    ]
  },
  {
    "objectID": "Django/2_jsonfield.html#crud-operations-on-jsonfield",
    "href": "Django/2_jsonfield.html#crud-operations-on-jsonfield",
    "title": "JSONField",
    "section": "‚úÖ 5. CRUD Operations on JSONField",
    "text": "‚úÖ 5. CRUD Operations on JSONField\n\nCreating / Saving JSONField Data\np = Practitioner.objects.create(\n    name=\"Dr. John\",\n    settings={\n        \"theme\": \"dark\",\n        \"notifications\": {\n            \"email\": True,\n            \"sms\": False\n        }\n    }\n)\n\n\nUpdating JSONField Data\np = Practitioner.objects.get(id=1)\np.settings['notifications']['email'] = False\np.save()\n\n\nBe careful: .save() is needed!\nYou must explicitly .save() the model after changing nested JSON data.",
    "crumbs": [
      "Blog",
      "Django",
      "JSONField"
    ]
  },
  {
    "objectID": "Django/2_jsonfield.html#querying-jsonfield-postgresql-and-django-orm",
    "href": "Django/2_jsonfield.html#querying-jsonfield-postgresql-and-django-orm",
    "title": "JSONField",
    "section": "üîé 6. Querying JSONField (PostgreSQL and Django ORM)",
    "text": "üîé 6. Querying JSONField (PostgreSQL and Django ORM)\nDjango allows you to query keys and values inside the JSON directly!\n\nKey Lookup (__contains, __has_key)\n# Get practitioners where settings contain a key 'theme'\nPractitioner.objects.filter(settings__has_key='theme')\n\n# Get practitioners where settings contain a specific key-value pair\nPractitioner.objects.filter(settings__theme='dark')\n\n# Check if JSON contains multiple keys\nPractitioner.objects.filter(settings__has_keys=['theme', 'notifications'])\n\n\nValue Queries (__contains)\n# Practitioners with 'sms': False inside notifications\nPractitioner.objects.filter(settings__notifications__sms=False)\n\n\nExact Match\n# Exact match for the entire JSON blob (rarely useful)\nPractitioner.objects.filter(settings={\n    \"theme\": \"dark\",\n    \"notifications\": {\"email\": True, \"sms\": False}\n})",
    "crumbs": [
      "Blog",
      "Django",
      "JSONField"
    ]
  },
  {
    "objectID": "Django/2_jsonfield.html#indexing-jsonfield-for-speed",
    "href": "Django/2_jsonfield.html#indexing-jsonfield-for-speed",
    "title": "JSONField",
    "section": "‚ö° 7. Indexing JSONField for Speed",
    "text": "‚ö° 7. Indexing JSONField for Speed\nFor PostgreSQL, you can create GIN indexes to speed up JSON lookups.\n\nExample Migration for Index\nfrom django.contrib.postgres.indexes import GinIndex\nfrom django.db import models\n\nclass Practitioner(models.Model):\n    settings = models.JSONField()\n\n    class Meta:\n        indexes = [\n            GinIndex(fields=['settings']),\n        ]\n‚úÖ This boosts query performance for operations like has_key, contains.",
    "crumbs": [
      "Blog",
      "Django",
      "JSONField"
    ]
  },
  {
    "objectID": "Django/2_jsonfield.html#validating-jsonfield-data",
    "href": "Django/2_jsonfield.html#validating-jsonfield-data",
    "title": "JSONField",
    "section": "üß∞ 8. Validating JSONField Data",
    "text": "üß∞ 8. Validating JSONField Data\n\nCustom Validators Example\nfrom django.core.exceptions import ValidationError\n\ndef validate_practitioner_settings(value):\n    if 'theme' not in value:\n        raise ValidationError('Theme is required in settings.')\n\nclass Practitioner(models.Model):\n    settings = models.JSONField(validators=[validate_practitioner_settings])\n‚úÖ Django runs validators on save() or through forms/DRF serializers.",
    "crumbs": [
      "Blog",
      "Django",
      "JSONField"
    ]
  },
  {
    "objectID": "Django/2_jsonfield.html#jsonfield-with-django-rest-framework-drf",
    "href": "Django/2_jsonfield.html#jsonfield-with-django-rest-framework-drf",
    "title": "JSONField",
    "section": "üîå 9. JSONField with Django REST Framework (DRF)",
    "text": "üîå 9. JSONField with Django REST Framework (DRF)\nDRF has built-in support for JSONField.\n\nExample Serializer\nfrom rest_framework import serializers\nfrom .models import Practitioner\n\nclass PractitionerSerializer(serializers.ModelSerializer):\n    class Meta:\n        model = Practitioner\n        fields = '__all__'\n‚úÖ Validates JSON automatically.\n‚úÖ Customize validation in the validate_settings() method:\ndef validate_settings(self, value):\n    if 'theme' not in value:\n        raise serializers.ValidationError('Theme is required!')\n    return value",
    "crumbs": [
      "Blog",
      "Django",
      "JSONField"
    ]
  },
  {
    "objectID": "Django/2_jsonfield.html#complex-structures-nested-access",
    "href": "Django/2_jsonfield.html#complex-structures-nested-access",
    "title": "JSONField",
    "section": "üèóÔ∏è 10. Complex Structures & Nested Access",
    "text": "üèóÔ∏è 10. Complex Structures & Nested Access\n\nNest deeply structured settings:\n\n\n{\n  \"notifications\": {\n    \"email\": {\n      \"enabled\": true,\n      \"frequency\": \"daily\"\n    },\n    \"sms\": {\n      \"enabled\": false\n    }\n  },\n  \"preferences\": {\n    \"theme\": \"dark\",\n    \"dashboard_layout\": \"compact\"\n  }\n}\n\nAccess deep keys in ORM queries is limited; use Raw SQL or F expressions for advanced operations.",
    "crumbs": [
      "Blog",
      "Django",
      "JSONField"
    ]
  },
  {
    "objectID": "Django/2_jsonfield.html#jsonfield-use-cases-in-django",
    "href": "Django/2_jsonfield.html#jsonfield-use-cases-in-django",
    "title": "JSONField",
    "section": "üöÄ 11. JSONField Use Cases in Django",
    "text": "üöÄ 11. JSONField Use Cases in Django\n\n\n\n\n\n\n\nUse Case\nWhy JSONField Works Well\n\n\n\n\nUser/Practitioner Settings\nDynamic, per-user preferences\n\n\nLogging Custom Data\nFlexible schema for event logs\n\n\nE-commerce Product Attributes\nVariable properties per product\n\n\nSurveys & Forms\nSave answers without rigid schema\n\n\nAPI Responses/Cache\nSave external API responses as JSON",
    "crumbs": [
      "Blog",
      "Django",
      "JSONField"
    ]
  },
  {
    "objectID": "Django/2_jsonfield.html#limitations-gotchas",
    "href": "Django/2_jsonfield.html#limitations-gotchas",
    "title": "JSONField",
    "section": "üîí 12. Limitations & Gotchas",
    "text": "üîí 12. Limitations & Gotchas\n\n\n\n\n\n\n\nIssue\nExplanation\n\n\n\n\nNo enforced schema\nJSONField doesn‚Äôt enforce structure\n\n\nQuerying complex nested data\nCan get tricky; limited ORM support\n\n\nValidation responsibility\nYou own it (no automatic schema)\n\n\nPartial updates\nModify the object and .save() fully; no partial ORM updates\n\n\nIndexing not universal\nGIN indexes are PostgreSQL-specific",
    "crumbs": [
      "Blog",
      "Django",
      "JSONField"
    ]
  },
  {
    "objectID": "Django/2_jsonfield.html#best-practices",
    "href": "Django/2_jsonfield.html#best-practices",
    "title": "JSONField",
    "section": "‚úÖ 13. Best Practices",
    "text": "‚úÖ 13. Best Practices\n\n\n\n\n\n\n\nPractice\nWhy?\n\n\n\n\nSet a default (default=dict)\nPrevents null errors\n\n\nValidate JSON structure\nEnforce rules for consistent data\n\n\nIndex fields (Postgres)\nBoost query performance\n\n\nUse JSONField for dynamic data only\nPrefer normal fields for fixed schema\n\n\nCache frequent queries\nJSON queries can be slower on large datasets",
    "crumbs": [
      "Blog",
      "Django",
      "JSONField"
    ]
  },
  {
    "objectID": "Django/2_jsonfield.html#forward-looking-tips",
    "href": "Django/2_jsonfield.html#forward-looking-tips",
    "title": "JSONField",
    "section": "üîÆ 14. Forward-Looking Tips",
    "text": "üîÆ 14. Forward-Looking Tips\n\n\n\n\n\n\n\nGoal\nHow\n\n\n\n\nSchema enforcement\nUse Django validators or 3rd party libraries like jsonschema\n\n\nVersion your settings\nAdd version fields to track JSON format changes\n\n\nAudit trail\nUse Django signals or django-simple-history\n\n\nAPI-first forms\nServe JSON schemas to drive dynamic frontend forms (React, Vue)",
    "crumbs": [
      "Blog",
      "Django",
      "JSONField"
    ]
  },
  {
    "objectID": "Django/2_jsonfield.html#summary-table",
    "href": "Django/2_jsonfield.html#summary-table",
    "title": "JSONField",
    "section": "‚úÖ Summary Table",
    "text": "‚úÖ Summary Table\n\n\n\n\n\n\n\nFeature\nSupported\n\n\n\n\nFlexible Data\n‚úÖ Store any JSON-serializable data\n\n\nDB Support\n‚úÖ PostgreSQL (native); ‚úÖ SQLite/MySQL (Django 3.1+)\n\n\nQuerying\n‚úÖ Key and value lookups (limited for deep queries)\n\n\nIndexing\n‚úÖ GIN indexes (PostgreSQL only)\n\n\nValidation\n‚úÖ Custom Django validators",
    "crumbs": [
      "Blog",
      "Django",
      "JSONField"
    ]
  },
  {
    "objectID": "Django/testing.html",
    "href": "Django/testing.html",
    "title": "Pytesting",
    "section": "",
    "text": "pip install pytest pytest-django\n\n\n[pytest]\nDJANGO_SETTINGS_MODULE = your_project.settings\npython_files = tests.py test_*.py *_tests.py\nfilterwarnings =\n    ignore::DeprecationWarning\n    ignore::django.utils.deprecation.RemovedInDjango50Warning\nor #### pyprojecrt.toml file\n[tool.pytest.ini_options]\ndjango_settings_module = \"myproject.settings\"  # Replace 'myproject' with your actual project name\npython_files = [\"tests.py\", \"test_*.py\", \"*_tests.py\"]\naddopts = \"--reuse-db --tb=short -p no:warnings\"",
    "crumbs": [
      "Blog",
      "Django",
      "Pytesting"
    ]
  },
  {
    "objectID": "Django/testing.html#setup",
    "href": "Django/testing.html#setup",
    "title": "Pytesting",
    "section": "",
    "text": "pip install pytest pytest-django\n\n\n[pytest]\nDJANGO_SETTINGS_MODULE = your_project.settings\npython_files = tests.py test_*.py *_tests.py\nfilterwarnings =\n    ignore::DeprecationWarning\n    ignore::django.utils.deprecation.RemovedInDjango50Warning\nor #### pyprojecrt.toml file\n[tool.pytest.ini_options]\ndjango_settings_module = \"myproject.settings\"  # Replace 'myproject' with your actual project name\npython_files = [\"tests.py\", \"test_*.py\", \"*_tests.py\"]\naddopts = \"--reuse-db --tb=short -p no:warnings\"",
    "crumbs": [
      "Blog",
      "Django",
      "Pytesting"
    ]
  },
  {
    "objectID": "Django/testing.html#basic-concepts",
    "href": "Django/testing.html#basic-concepts",
    "title": "Pytesting",
    "section": "Basic Concepts",
    "text": "Basic Concepts\n\nTest File Structure\n# tests/\n#   ‚îî‚îÄ‚îÄ test_views.py\n#   ‚îî‚îÄ‚îÄ test_models.py\n#   ‚îî‚îÄ‚îÄ test_forms.py\n#   ‚îî‚îÄ‚îÄ test_api.py\n#   ‚îî‚îÄ‚îÄ conftest.py  # shared fixtures\n\n\nSimple Test Example\ndef test_homepage_status(client):\n    response = client.get('/')\n    assert response.status_code == 200",
    "crumbs": [
      "Blog",
      "Django",
      "Pytesting"
    ]
  },
  {
    "objectID": "Django/testing.html#fixtures",
    "href": "Django/testing.html#fixtures",
    "title": "Pytesting",
    "section": "Fixtures",
    "text": "Fixtures\n\nBasic Fixtures\nimport pytest\nfrom django.contrib.auth.models import User\n\n@pytest.fixture\ndef user_data():\n    return {\n        'username': 'testuser',\n        'password': 'testpass123',\n        'email': 'test@example.com'\n    }\n\n@pytest.fixture\ndef user(db, user_data):\n    return User.objects.create_user(**user_data)\n\n@pytest.fixture\ndef admin_user(db):\n    return User.objects.create_superuser(\n        username='admin',\n        password='admin123',\n        email='admin@example.com'\n    )\n\n\nFactory Boy Integration\nimport factory\nfrom myapp.models import Profile\n\nclass UserFactory(factory.django.DjangoModelFactory):\n    class Meta:\n        model = User\n    \n    username = factory.Sequence(lambda n: f'user{n}')\n    email = factory.LazyAttribute(lambda o: f'{o.username}@example.com')\n\nclass ProfileFactory(factory.django.DjangoModelFactory):\n    class Meta:\n        model = Profile\n    \n    user = factory.SubFactory(UserFactory)\n    bio = factory.Faker('text')\n\n@pytest.fixture\ndef user_with_profile():\n    return ProfileFactory()",
    "crumbs": [
      "Blog",
      "Django",
      "Pytesting"
    ]
  },
  {
    "objectID": "Django/testing.html#database-testing",
    "href": "Django/testing.html#database-testing",
    "title": "Pytesting",
    "section": "Database Testing",
    "text": "Database Testing\n\nBasic Model Testing\n@pytest.mark.django_db\ndef test_create_user(user_data):\n    user = User.objects.create_user(**user_data)\n    assert User.objects.count() == 1\n    assert user.username == user_data['username']\n\n@pytest.mark.django_db\ndef test_profile_creation():\n    user = UserFactory()\n    profile = ProfileFactory(user=user)\n    assert profile.user == user\n\n\nQuery Testing\n@pytest.mark.django_db\nclass TestUserQueries:\n    def test_user_filter(self):\n        UserFactory.create_batch(3)\n        assert User.objects.count() == 3\n        assert User.objects.filter(username__startswith='user').count() == 3\n\n    def test_user_order(self):\n        users = UserFactory.create_batch(3)\n        ordered = User.objects.order_by('-date_joined')\n        assert list(ordered) == sorted(users, key=lambda x: x.date_joined, reverse=True)",
    "crumbs": [
      "Blog",
      "Django",
      "Pytesting"
    ]
  },
  {
    "objectID": "Django/testing.html#client-testing",
    "href": "Django/testing.html#client-testing",
    "title": "Pytesting",
    "section": "Client Testing",
    "text": "Client Testing\n\nURL Testing\ndef test_homepage(client):\n    response = client.get('/')\n    assert response.status_code == 200\n    assert 'Welcome' in str(response.content)\n\ndef test_protected_view(client, user):\n    client.force_login(user)\n    response = client.get('/protected/')\n    assert response.status_code == 200\n\ndef test_post_request(client):\n    response = client.post('/submit/', {\n        'title': 'Test',\n        'content': 'Content'\n    })\n    assert response.status_code == 302  # redirect after success\n\n\nTemplate Testing\ndef test_template_rendering(client):\n    response = client.get('/profile/')\n    assert 'profile.html' in [t.name for t in response.templates]\n    assert 'Profile Page' in str(response.content)",
    "crumbs": [
      "Blog",
      "Django",
      "Pytesting"
    ]
  },
  {
    "objectID": "Django/testing.html#authentication-testing",
    "href": "Django/testing.html#authentication-testing",
    "title": "Pytesting",
    "section": "Authentication Testing",
    "text": "Authentication Testing\n\nLogin Testing\n@pytest.mark.django_db\nclass TestAuth:\n    def test_login(self, client, user, user_data):\n        response = client.post('/login/', {\n            'username': user_data['username'],\n            'password': user_data['password']\n        })\n        assert response.status_code == 302\n        assert '_auth_user_id' in client.session\n\n    def test_logout(self, client, user):\n        client.force_login(user)\n        response = client.get('/logout/')\n        assert '_auth_user_id' not in client.session\n\n\nPermission Testing\nfrom django.contrib.auth.models import Permission\n\n@pytest.mark.django_db\ndef test_user_permissions(user):\n    permission = Permission.objects.get(codename='add_user')\n    user.user_permissions.add(permission)\n    assert user.has_perm('auth.add_user')",
    "crumbs": [
      "Blog",
      "Django",
      "Pytesting"
    ]
  },
  {
    "objectID": "Django/testing.html#form-testing",
    "href": "Django/testing.html#form-testing",
    "title": "Pytesting",
    "section": "Form Testing",
    "text": "Form Testing\n\nForm Validation\nfrom myapp.forms import UserProfileForm\n\ndef test_valid_form():\n    form = UserProfileForm(data={\n        'name': 'John Doe',\n        'email': 'john@example.com',\n        'bio': 'Test bio'\n    })\n    assert form.is_valid()\n\ndef test_invalid_form():\n    form = UserProfileForm(data={})\n    assert not form.is_valid()\n    assert 'name' in form.errors\n\n\nFile Upload Testing\nimport tempfile\nfrom django.core.files.uploadedfile import SimpleUploadedFile\n\ndef test_file_upload(client, user):\n    client.force_login(user)\n    with tempfile.NamedTemporaryFile() as tmp:\n        tmp.write(b'test content')\n        tmp.seek(0)\n        response = client.post('/upload/', {\n            'file': SimpleUploadedFile(tmp.name, tmp.read())\n        })\n    assert response.status_code == 302",
    "crumbs": [
      "Blog",
      "Django",
      "Pytesting"
    ]
  },
  {
    "objectID": "Django/testing.html#api-testing",
    "href": "Django/testing.html#api-testing",
    "title": "Pytesting",
    "section": "API Testing",
    "text": "API Testing\n\nREST Framework Testing\nfrom rest_framework.test import APIClient\nimport pytest\n\n@pytest.fixture\ndef api_client():\n    return APIClient()\n\n@pytest.mark.django_db\nclass TestUserAPI:\n    def test_list_users(self, api_client, admin_user):\n        api_client.force_authenticate(admin_user)\n        response = api_client.get('/api/users/')\n        assert response.status_code == 200\n        assert len(response.json()) &gt; 0\n\n    def test_create_user(self, api_client, admin_user):\n        api_client.force_authenticate(admin_user)\n        response = api_client.post('/api/users/', {\n            'username': 'newuser',\n            'email': 'new@example.com',\n            'password': 'secret123'\n        })\n        assert response.status_code == 201",
    "crumbs": [
      "Blog",
      "Django",
      "Pytesting"
    ]
  },
  {
    "objectID": "Django/testing.html#mocking",
    "href": "Django/testing.html#mocking",
    "title": "Pytesting",
    "section": "Mocking",
    "text": "Mocking\n\nBasic Mocking\nfrom unittest.mock import patch\n\ndef test_external_api_call():\n    with patch('requests.get') as mock_get:\n        mock_get.return_value.status_code = 200\n        mock_get.return_value.json.return_value = {'data': 'test'}\n        # Test your function that uses requests.get\n        assert your_function() == expected_result\n\n@patch('myapp.services.external_api.make_request')\ndef test_service(mock_request):\n    mock_request.return_value = {'status': 'success'}\n    # Test your service\n\n\nEmail Mocking\nfrom django.core import mail\n\ndef test_send_email(client):\n    response = client.post('/send-email/')\n    assert len(mail.outbox) == 1\n    assert mail.outbox[0].subject == 'Expected Subject'",
    "crumbs": [
      "Blog",
      "Django",
      "Pytesting"
    ]
  },
  {
    "objectID": "Django/testing.html#best-practices",
    "href": "Django/testing.html#best-practices",
    "title": "Pytesting",
    "section": "Best Practices",
    "text": "Best Practices\n\n1. Use Fixtures Effectively\n\nKeep fixtures focused and small\nUse factory boy for complex object creation\nShare fixtures in conftest.py\n\n\n\n2. Test Organization\n@pytest.mark.django_db\nclass TestUser:\n    \"\"\"Group related tests in classes\"\"\"\n    \n    def test_create(self):\n        # test user creation\n        pass\n    \n    def test_update(self):\n        # test user update\n        pass\n\n\n3. Parametrize Tests\n@pytest.mark.parametrize('username,expected', [\n    ('valid_user', True),\n    ('inv@lid', False),\n    ('', False),\n])\ndef test_username_validation(username, expected):\n    form = UserForm(data={'username': username})\n    assert form.is_valid() == expected\n\n\n4. Use Markers\n@pytest.mark.slow\ndef test_expensive_operation():\n    # long running test\n    pass\n\n# Run with: pytest -m \"not slow\"\n\n\n5. Debug Tips\ndef test_with_debug(client):\n    response = client.get('/view/')\n    import pdb; pdb.set_trace()  # Debug point\n    # or use pytest --pdb\n\n\n6. Coverage\npytest --cov=myapp\npytest --cov=myapp --cov-report=html\n\n\n7. Configuration Best Practices\n# conftest.py\nimport pytest\nfrom django.conf import settings\n\n@pytest.fixture(autouse=True)\ndef media_storage(settings, tmpdir):\n    settings.MEDIA_ROOT = tmpdir.strpath\n\n@pytest.fixture\ndef enable_debug(settings):\n    settings.DEBUG = True\nRemember to: - Write tests first (TDD when possible) - Keep tests simple and focused - Use meaningful test names - Test edge cases and error conditions - Use appropriate assertions - Keep test data minimal - Clean up after tests - Use continuous integration",
    "crumbs": [
      "Blog",
      "Django",
      "Pytesting"
    ]
  },
  {
    "objectID": "Django/testing.html#common-testing-scenarios",
    "href": "Django/testing.html#common-testing-scenarios",
    "title": "Pytesting",
    "section": "Common Testing Scenarios",
    "text": "Common Testing Scenarios\n\n1. Testing Signals\n@pytest.mark.django_db\ndef test_profile_signal():\n    user = User.objects.create_user(username='test')\n    assert hasattr(user, 'profile')\n    assert user.profile is not None\n\n\n2. Testing Management Commands\nfrom django.core.management import call_command\nfrom io import StringIO\n\ndef test_command_output():\n    out = StringIO()\n    call_command('my_command', stdout=out)\n    assert 'Expected output' in out.getvalue()\n\n\n3. Testing Custom Template Tags\nfrom django.template import Template, Context\n\ndef test_custom_tag():\n    template = Template('{% load custom_tags %}{{ \"test\"|my_filter }}')\n    context = Context({})\n    assert template.render(context) == 'expected result'\n\n\n4. Testing Middlewares\ndef test_middleware(client):\n    response = client.get('/')\n    assert response['Custom-Header'] == 'Expected Value'\n\n\n5. Testing Admin\nfrom django.contrib.admin.sites import AdminSite\nfrom myapp.admin import UserAdmin\nfrom myapp.models import User\n\n@pytest.mark.django_db\ndef test_admin_view(admin_client):\n    response = admin_client.get('/admin/myapp/user/')\n    assert response.status_code == 200\n\ndef test_admin_action():\n    site = AdminSite()\n    user_admin = UserAdmin(User, site)\n    # Test admin actions",
    "crumbs": [
      "Blog",
      "Django",
      "Pytesting"
    ]
  },
  {
    "objectID": "Django/1_django_commands.html",
    "href": "Django/1_django_commands.html",
    "title": "Djando and Django-extension Commands",
    "section": "",
    "text": "These commands are provided by the Django framework itself.\n\n\n\n\nstartproject &lt;project_name&gt;: Creates a new Django project with the specified name.\ndjango-admin startproject my_project\n\nStructure:\n\nmanage.py: Entry point for project commands.\nProject folder with settings, URLs, and ASGI/WSGI files.\n\n\n\n\n\n\n\nstartapp &lt;app_name&gt;: Creates a new Django app within your project.\npython manage.py startapp my_app\n\n\n\n\n\nmigrate: Applies database migrations for installed apps.\npython manage.py migrate\nmakemigrations: Creates migration files for model changes.\npython manage.py makemigrations\nsqlmigrate &lt;app_name&gt; &lt;migration_number&gt;: Displays the SQL commands Django would run for a migration.\npython manage.py sqlmigrate my_app 0001\n\n\n\n\n\nrunserver: Starts the development server.\npython manage.py runserver\n\nDefault: Runs on localhost:8000.\nSpecify IP/port: python manage.py runserver 0.0.0.0:8080.\n\ncheck: Validates the project for issues.\npython manage.py check\n\n\n\n\n\ncreatesuperuser: Creates an admin user for the project.\npython manage.py createsuperuser\nchangepassword &lt;username&gt;: Changes the password for a user.\npython manage.py changepassword admin\n\n\n\n\n\ntest: Runs all test cases in the project.\npython manage.py test\n\n\n\n\n\nshowmigrations: Displays migrations and their status.\npython manage.py showmigrations",
    "crumbs": [
      "Blog",
      "Django",
      "Djando and Django-extension Commands"
    ]
  },
  {
    "objectID": "Django/1_django_commands.html#core-django-commands",
    "href": "Django/1_django_commands.html#core-django-commands",
    "title": "Djando and Django-extension Commands",
    "section": "",
    "text": "These commands are provided by the Django framework itself.\n\n\n\n\nstartproject &lt;project_name&gt;: Creates a new Django project with the specified name.\ndjango-admin startproject my_project\n\nStructure:\n\nmanage.py: Entry point for project commands.\nProject folder with settings, URLs, and ASGI/WSGI files.\n\n\n\n\n\n\n\nstartapp &lt;app_name&gt;: Creates a new Django app within your project.\npython manage.py startapp my_app\n\n\n\n\n\nmigrate: Applies database migrations for installed apps.\npython manage.py migrate\nmakemigrations: Creates migration files for model changes.\npython manage.py makemigrations\nsqlmigrate &lt;app_name&gt; &lt;migration_number&gt;: Displays the SQL commands Django would run for a migration.\npython manage.py sqlmigrate my_app 0001\n\n\n\n\n\nrunserver: Starts the development server.\npython manage.py runserver\n\nDefault: Runs on localhost:8000.\nSpecify IP/port: python manage.py runserver 0.0.0.0:8080.\n\ncheck: Validates the project for issues.\npython manage.py check\n\n\n\n\n\ncreatesuperuser: Creates an admin user for the project.\npython manage.py createsuperuser\nchangepassword &lt;username&gt;: Changes the password for a user.\npython manage.py changepassword admin\n\n\n\n\n\ntest: Runs all test cases in the project.\npython manage.py test\n\n\n\n\n\nshowmigrations: Displays migrations and their status.\npython manage.py showmigrations",
    "crumbs": [
      "Blog",
      "Django",
      "Djando and Django-extension Commands"
    ]
  },
  {
    "objectID": "Django/1_django_commands.html#django-extensions-commands",
    "href": "Django/1_django_commands.html#django-extensions-commands",
    "title": "Djando and Django-extension Commands",
    "section": "Django Extensions Commands",
    "text": "Django Extensions Commands\n\nDjango Extensions adds powerful custom commands to extend functionality beyond the core Django commands.\n\n\n1. Shell and Debugging\n\nshell_plus: An enhanced shell command that auto-imports models and settings.\npython manage.py shell_plus\nshell_plus --notebook: Integrates with Jupyter Notebook for a better debugging interface.\n\n\n\n2. Model Visualization\n\ngraph_models: Generates a diagram of your models and relationships.\n\npython manage.py graph_models my_app -o models.png\npython manage.py graph_models budget --dot -o dot.txt\n\nRequires Graphviz.\n\n\n\n3. URL Management\n\nshow_urls: Lists all registered URLs in your project.\npython manage.py show_urls\n\n\n\n4. Profiler and Performance\n\nrunprofileserver: Profiles your project to detect performance bottlenecks.\npython manage.py runprofileserver\n\n\n\n5. Jobs and Background Tasks\n\ncreate_jobs: Creates job templates for background tasks.\npython manage.py create_jobs my_job\n\n\n\n6. Database Commands\n\nsqlcreate: Outputs SQL for creating a database.\npython manage.py sqlcreate\n\n\n\n7. Random Data Generation\n\ngenerate_password: Generates a random secure password.\npython manage.py generate_password\n\n\n\n8. Command Enhancements\n\nprint_settings: Displays project settings for debugging.\npython manage.py print_settings\n\n\n\n9. Logging and Testing\n\ntest_with_coverage: Runs tests with coverage analysis.\npython manage.py test_with_coverage\n\n\n\n\nComparison\n\n\n\n\n\n\n\n\nCategory\nDjango Commands\nDjango Extensions Commands\n\n\n\n\nDebugging\nrunserver, check\nshell_plus, runprofileserver\n\n\nDatabase\nmigrate, makemigrations\nsqlcreate, graph_models\n\n\nModel Management\nshowmigrations, sqlmigrate\ngraph_models\n\n\nPerformance\nNot Available\nrunprofileserver\n\n\nURL Insights\nNot Available\nshow_urls\n\n\nTesting\ntest\ntest_with_coverage\n\n\n\n\n\n\nHow to Explore All Commands\nTo list all available commands in your project:\npython manage.py help\nFor Django Extensions commands:\npython manage.py help | grep django_extensions\n\n\n\nTips for Effective Use\n\nUse shell_plus for fast prototyping and debugging.\nLeverage graph_models to understand model relationships visually.\nCombine runprofileserver with test cases for performance tuning.\nUse show_urls for insights into the URL structure.\n\nBoth Django and Django Extensions commands are designed to make development efficient and organized!",
    "crumbs": [
      "Blog",
      "Django",
      "Djando and Django-extension Commands"
    ]
  },
  {
    "objectID": "Django/drf_spectacular.html",
    "href": "Django/drf_spectacular.html",
    "title": "DRF Spectacular",
    "section": "",
    "text": "1. What is DRF Spectacular?\nDRF Spectacular is a schema generation tool for Django REST Framework (DRF) that creates OpenAPI 3.0-compliant API documentation. It provides an out-of-the-box solution for generating and maintaining API documentation with minimal configuration, and it integrates well with DRF‚Äôs serializers, views, and routers.\n\nKey Features:\n\nOpenAPI 3.0 Support: Full OpenAPI 3.0-compliant schema generation.\nSchema Generation: Automatically generates schema documentation for all your API endpoints.\nCustomization: Fine-grained customization options for views, endpoints, and fields.\nSwagger & ReDoc Integration: Easily integrates with Swagger UI and ReDoc for interactive documentation.\nComponent Reuse: Reuses schema components (e.g., serializers, response formats) to reduce duplication in the schema.\n\n\n\n\n2. Installation and Setup\nTo use DRF Spectacular, you‚Äôll need to install the package and configure it in your Django project.\n\na. Install DRF Spectacular\nYou can install DRF Spectacular using pip:\npip install drf-spectacular\n\n\nb. Add Spectacular to Installed Apps\nIn your settings.py, add drf_spectacular to the INSTALLED_APPS:\nINSTALLED_APPS = [\n    # Other apps\n    'drf_spectacular',\n]\n\n\nc.¬†Configure DRF Settings\nAdd DRF Spectacular to the DEFAULT_SCHEMA_CLASS setting in Django REST Framework‚Äôs settings:\nREST_FRAMEWORK = {\n    'DEFAULT_SCHEMA_CLASS': 'drf_spectacular.openapi.AutoSchema',\n}\nThis tells DRF to use DRF Spectacular‚Äôs schema generator.\n\n\nd.¬†Add URLs for Schema and UI\nYou‚Äôll need to add URLs for the OpenAPI schema and the documentation UI in your urls.py:\nfrom drf_spectacular.views import SpectacularAPIView, SpectacularSwaggerView, SpectacularRedocView\n\nurlpatterns = [\n    # API schema and documentation views\n    path('api/schema/', SpectacularAPIView.as_view(), name='schema'),\n    path('api/schema/swagger-ui/', SpectacularSwaggerView.as_view(url_name='schema'), name='swagger-ui'),\n    path('api/schema/redoc/', SpectacularRedocView.as_view(url_name='schema'), name='redoc'),\n]\nNow, the following URLs will be available in your Django app: - /api/schema/ ‚Äì OpenAPI schema in JSON format. - /api/schema/swagger-ui/ ‚Äì Interactive API documentation using Swagger UI. - /api/schema/redoc/ ‚Äì Interactive API documentation using ReDoc.\n\n\n\n3. Basic Usage of DRF Spectacular\nOnce you have DRF Spectacular set up, it will automatically generate an OpenAPI 3.0-compliant schema for your API endpoints based on your DRF views, serializers, and routers.\n\na. Default Schema Generation\nDRF Spectacular will introspect your DRF views and serializers to automatically generate the OpenAPI schema.\nFor example, if you have a DRF ViewSet:\nfrom rest_framework import viewsets\nfrom .models import Book\nfrom .serializers import BookSerializer\n\nclass BookViewSet(viewsets.ModelViewSet):\n    queryset = Book.objects.all()\n    serializer_class = BookSerializer\nAnd the following router setup in urls.py:\nfrom rest_framework.routers import DefaultRouter\n\nrouter = DefaultRouter()\nrouter.register(r'books', BookViewSet)\n\nurlpatterns = [\n    path('api/', include(router.urls)),\n]\nThe generated schema will automatically include the BookViewSet with all its CRUD operations.\n\n\nb. Schema Viewing\n\nSwagger UI: Visit /api/schema/swagger-ui/ to view the Swagger UI for the API.\nReDoc: Visit /api/schema/redoc/ to view the ReDoc documentation.\n\nThese interactive docs allow you to visualize and test your API endpoints.\n\n\n\n4. Customizing the Schema\nDRF Spectacular offers a wide range of customization options to fine-tune the generated schema. You can customize global settings, individual views, serializers, and fields.\n\na. Global Settings\nIn your settings.py, you can customize DRF Spectacular‚Äôs behavior with the SPECTACULAR_SETTINGS dictionary.\nExample:\nSPECTACULAR_SETTINGS = {\n    'TITLE': 'My API',\n    'DESCRIPTION': 'This is the API documentation for my Django project.',\n    'VERSION': '1.0.0',\n    'SERVE_INCLUDE_SCHEMA': False,\n    'COMPONENT_SPLIT_REQUEST': True,  # Separate request and response serializers\n    'SCHEMA_PATH_PREFIX': '/api/v1',\n    'SERVERS': [\n        {'url': 'https://api.example.com/v1', 'description': 'Production Server'},\n        {'url': 'https://staging.example.com/v1', 'description': 'Staging Server'},\n    ],\n}\n\nTITLE: The title of the API (used in the documentation UI).\nDESCRIPTION: A description of the API (used in the documentation UI).\nVERSION: The version of the API (used in the schema).\nSERVERS: Allows you to define multiple server URLs (e.g., production, staging).\nCOMPONENT_SPLIT_REQUEST: Separates request and response serializers in the schema.\nSCHEMA_PATH_PREFIX: Specifies the API path prefix to exclude common URL patterns.\n\n\n\nb. Per-View Customization\nYou can customize the schema for individual views using DRF Spectacular‚Äôs @extend_schema decorator. This allows you to override or specify certain aspects of the schema for a particular view.\nExample:\nfrom drf_spectacular.utils import extend_schema\nfrom rest_framework import generics\nfrom .models import Book\nfrom .serializers import BookSerializer\n\nclass BookListView(generics.ListCreateAPIView):\n    queryset = Book.objects.all()\n    serializer_class = BookSerializer\n\n    @extend_schema(\n        description='List all books or create a new one',\n        summary='Books List',\n        responses={200: BookSerializer(many=True)},\n    )\n    def get(self, request, *args, **kwargs):\n        return super().get(request, *args, **kwargs)\nThis allows you to: - Set custom descriptions: Provide detailed descriptions for each endpoint. - Define response types: Specify the response format, such as lists of serializers or custom response messages. - Add summary: Provide short summaries for specific views.\n\n\nc.¬†Custom Serializer Components\nDRF Spectacular can automatically generate schema components from your serializers. However, you can customize how serializers are represented using the @extend_schema_serializer decorator.\nExample:\nfrom drf_spectacular.utils import extend_schema_serializer\n\n@extend_schema_serializer(\n    exclude_fields=['internal_field'],  # Exclude certain fields from the schema\n)\nclass BookSerializer(serializers.ModelSerializer):\n    class Meta:\n        model = Book\n        fields = '__all__'\nThis allows you to: - Exclude specific fields: Hide sensitive fields from the schema. - Add custom examples: Provide examples of how the data looks in requests and responses.\n\n\nd.¬†Field-Level Customization\nAt the field level, you can provide custom OpenAPI parameters using @extend_schema_field.\nExample:\nfrom drf_spectacular.utils import extend_schema_field\n\nclass CustomSerializer(serializers.Serializer):\n    field = serializers.CharField()\n\n    @extend_schema_field(OpenApiTypes.STR)\n    def get_custom_field(self, obj):\n        return \"custom value\"\n\n\n\n5. Using @extend_schema for Fine-Grained Control\nThe @extend_schema decorator provides fine-grained control over each view‚Äôs schema.\n\na. Custom Parameters\nYou can add or override parameters in the schema, such as query parameters or headers:\n@extend_schema(\n    parameters=[\n        OpenApiParameter(\"search\", OpenApiTypes.STR, OpenApiParameter.QUERY, description=\"Search for books\")\n    ],\n)\nclass BookListView(generics.ListAPIView):\n    queryset = Book.objects.all()\n    serializer_class = BookSerializer\n\n\nb. Custom Responses\nYou can specify custom response types, including different status codes:\n@extend_schema(\n    responses={200: BookSerializer, 400: OpenApiResponse(description=\"Invalid request\")}\n)\nclass BookDetailView(generics.RetrieveAPIView):\n    queryset = Book.objects.all()\n    serializer_class = BookSerializer\n\n\nc.¬†Custom Request Bodies\nIf you want to specify a custom request body that differs from the default serializer representation, you can do so:\n@extend_schema(request=BookCreateSerializer)\nclass BookCreateView(generics.CreateAPIView):\n    queryset = Book.objects.all()\n    serializer_class = BookSerializer\n\n\n\n6. OpenAPI Security Schemes\nDRF Spectacular allows you\nto define security schemes, such as JWT authentication or OAuth2, for your API.\n\na. Basic Security Example\nIn SPECTACULAR_SETTINGS, you can define security schemes like so:\nSPECTACULAR_SETTINGS = {\n    'TITLE': 'My API',\n    'VERSION': '1.0.0',\n    'AUTHENTICATION_WHITELIST': [\n        'rest_framework.authentication.BasicAuthentication',\n    ],\n    'SECURITY': [{'basicAuth': []}],\n}\nThis adds HTTP Basic Authentication to your schema.\n\n\nb. JWT Authentication Example\nIf you‚Äôre using JWT authentication, you can configure the security scheme for JWT tokens like this:\nSPECTACULAR_SETTINGS = {\n    'TITLE': 'My API',\n    'VERSION': '1.0.0',\n    'SECURITY': [{'bearerAuth': []}],\n    'SWAGGER_UI_SETTINGS': {\n        'supportedSubmitMethods': ['get', 'post', 'put', 'patch', 'delete'],\n    },\n}\nIn this case, bearerAuth will be used in your OpenAPI schema to handle JWT tokens in requests.\n\n\n\n7. Component Reuse\nDRF Spectacular reuses components wherever possible to reduce schema size and increase consistency.\n\na. Shared Serializers\nIf multiple views use the same serializer, DRF Spectacular will generate a shared component for that serializer, making the schema cleaner.\n\n\nb. Component Naming\nYou can customize component names by using @extend_schema_serializer and @extend_schema.\nExample:\n@extend_schema_serializer(component_name='BookDetailSerializer')\nclass BookSerializer(serializers.ModelSerializer):\n    class Meta:\n        model = Book\n        fields = '__all__'\n\n\n\n8. Debugging and Troubleshooting\nIf you run into issues with your schema, DRF Spectacular provides a debugging view to help troubleshoot.\nYou can enable it by visiting /api/schema/?format=openapi or /api/schema/?format=debug.\n\n\n\n\n Back to top",
    "crumbs": [
      "Blog",
      "Django",
      "DRF Spectacular"
    ]
  },
  {
    "objectID": "Django/1_save_objects.html",
    "href": "Django/1_save_objects.html",
    "title": "Saving objects in Django",
    "section": "",
    "text": "Here‚Äôs a table showing which methods internally use the save() method and which do not:\n\n\n\n\n\n\n\n\nMethod\nUses save()?\nExplanation\n\n\n\n\nModel.save()\n‚úÖ Yes\nDirectly calls save() to persist changes.\n\n\nQuerySet.create()\n‚úÖ Yes\nCreates an object and calls save() internally.\n\n\nQuerySet.update()\n‚ùå No\nDirectly executes an SQL UPDATE query without calling save().\n\n\nupdate_or_create()\n‚úÖ Yes (for creation) / ‚ùå No (for update)\nCalls save() for new objects but uses update() for existing objects.\n\n\nget_or_create()\n‚úÖ Yes (for creation)\nCalls save() if a new object is created.\n\n\nbulk_create()\n‚ùå No\nDirectly inserts objects into the database without calling save().\n\n\nbulk_update()\n‚ùå No\nDirectly executes an SQL UPDATE query without calling save().\n\n\nRaw SQL Queries\n‚ùå No\nBypasses Django ORM and executes SQL directly.\n\n\nSignals\n‚úÖ Depends\nsave() is typically called by the triggering event, which may then trigger signals.\n\n\nF() Expressions\n‚ùå No\nWorks directly at the database level with update() or queries.\n\n\nCustom Managers\n‚úÖ Depends\nCustom logic can call save() depending on implementation.\n\n\nDjango Admin\n‚úÖ Yes\nUses save() when saving objects through the admin interface.\n\n\nDjango Forms\n‚úÖ Yes\nCalls save() when a valid form instance saves an object.\n\n\nFixtures\n‚ùå No\nData is loaded directly into the database without calling save().\n\n\nMigrations\n‚úÖ Depends\nIf the migration script uses ORM methods like create() or save(), then save() is used.\n\n\n\n\nKey Insights\n\nMethods like save(), create(), and get_or_create() call save().\nBulk operations like bulk_create() and update() do not call save(), making them faster but skipping custom logic or signal triggers.\nCertain methods (e.g., update_or_create()) conditionally call save() depending on whether the object is being created or updated.\n\nHere‚Äôs a table showing which Django signals are triggered when different object creation and update methods are used:\n\n\n\n\n\n\n\n\n\n\n\n\n\nMethod\npre_save\npost_save\npre_init\npost_init\npre_delete\npost_delete\nExplanation\n\n\n\n\nModel.save()\n‚úÖ Yes\n‚úÖ Yes\n‚ùå No\n‚ùå No\n‚ùå No\n‚ùå No\nBoth pre_save and post_save are triggered.\n\n\nQuerySet.create()\n‚úÖ Yes\n‚úÖ Yes\n‚ùå No\n‚ùå No\n‚ùå No\n‚ùå No\nInternally calls save() on the object, triggering pre_save and post_save.\n\n\nQuerySet.update()\n‚ùå No\n‚ùå No\n‚ùå No\n‚ùå No\n‚ùå No\n‚ùå No\nDirect SQL UPDATE query; no signals are triggered.\n\n\nupdate_or_create()\n‚úÖ Yes (if created)\n‚úÖ Yes (if created)\n‚ùå No\n‚ùå No\n‚ùå No\n‚ùå No\nSignals are triggered only if a new object is created (via save()). Updates bypass signals.\n\n\nget_or_create()\n‚úÖ Yes (if created)\n‚úÖ Yes (if created)\n‚ùå No\n‚ùå No\n‚ùå No\n‚ùå No\nSignals are triggered only if a new object is created (via save()).\n\n\nbulk_create()\n‚ùå No\n‚ùå No\n‚ùå No\n‚ùå No\n‚ùå No\n‚ùå No\nDirect SQL INSERT query; no signals are triggered.\n\n\nbulk_update()\n‚ùå No\n‚ùå No\n‚ùå No\n‚ùå No\n‚ùå No\n‚ùå No\nDirect SQL UPDATE query; no signals are triggered.\n\n\nRaw SQL\n‚ùå No\n‚ùå No\n‚ùå No\n‚ùå No\n‚ùå No\n‚ùå No\nNo Django signals are triggered; database operations are manual.\n\n\nSignals (save())\n‚úÖ Yes\n‚úÖ Yes\n‚ùå No\n‚ùå No\n‚ùå No\n‚ùå No\nSignals are triggered when save() is explicitly called.\n\n\nF() Expressions\n‚ùå No\n‚ùå No\n‚ùå No\n‚ùå No\n‚ùå No\n‚ùå No\nUpdates using F() are performed directly in the database and bypass signals.\n\n\nCustom Managers\nDepends on implementation\nDepends on implementation\n‚ùå No\n‚ùå No\n‚ùå No\n‚ùå No\nSignals are triggered only if the manager explicitly calls save().\n\n\nDjango Admin\n‚úÖ Yes\n‚úÖ Yes\n‚ùå No\n‚ùå No\n‚ùå No\n‚ùå No\nUses the save() method internally, triggering pre_save and post_save.\n\n\nDjango Forms\n‚úÖ Yes\n‚úÖ Yes\n‚ùå No\n‚ùå No\n‚ùå No\n‚ùå No\nWhen form.save() is invoked, pre_save and post_save are triggered.\n\n\nFixtures\n‚ùå No\n‚ùå No\n‚ùå No\n‚ùå No\n‚ùå No\n‚ùå No\nInserts data directly into the database; no signals are triggered.\n\n\nMigrations\nDepends on implementation\nDepends on implementation\n‚ùå No\n‚ùå No\n‚ùå No\n‚ùå No\nSignals are triggered only if the migration code explicitly calls save().\n\n\n\n\n\n\nKey Points\n\nTriggered Signals:\n\npre_save and post_save are triggered when save() is called directly or indirectly (e.g., QuerySet.create(), update_or_create() during creation).\npre_delete and post_delete are triggered when an object is deleted explicitly using delete().\n\nNot Triggered:\n\nMethods like bulk_create(), bulk_update(), and QuerySet.update() bypass Django‚Äôs ORM logic and perform raw SQL operations, so no signals are triggered.\n\nConditional Signal Triggering:\n\nupdate_or_create() and get_or_create() trigger signals only when creating a new object.\n\nCustom Managers and Migrations:\n\nSignals depend on whether save() is explicitly called in custom logic.\n\n\nThis table helps you understand when signals are fired for various methods in Django.\n\n\n\n\n Back to top",
    "crumbs": [
      "Blog",
      "Django",
      "Saving objects in Django"
    ]
  },
  {
    "objectID": "Django/1_querysets.html",
    "href": "Django/1_querysets.html",
    "title": "QuerySet",
    "section": "",
    "text": "1. The Role of QuerySets in Django\nA QuerySet represents a collection of database queries that return a set of results. QuerySets are lazily evaluated, meaning that the database query is only executed when the QuerySet is evaluated (e.g., when iterating over it or converting it to a list).\n\na. Basic QuerySet Operations\nQuerySets allow you to filter, order, and retrieve data from the database.\n# Retrieving all objects\nbooks = Book.objects.all()\n\n# Filtering objects\nfiltered_books = Book.objects.filter(author=\"George Orwell\")\n\n# Chaining filters (AND logic)\nrecent_books = Book.objects.filter(published_date__year=2020).filter(author=\"George Orwell\")\n\n# Retrieving a single object\nbook = Book.objects.get(id=1)\n\n# Exclude objects\nnon_orwell_books = Book.objects.exclude(author=\"George Orwell\")\n\n# Ordering results\nordered_books = Book.objects.order_by('published_date')\n\n# Limit number of results (slicing)\nfirst_ten_books = Book.objects.all()[:10]\n\n\nb. QuerySet Evaluation\nA QuerySet is lazily evaluated, meaning the query is not actually executed in the database until the QuerySet is iterated over or explicitly evaluated.\nExamples of when QuerySets are evaluated: - Iterating over the QuerySet. - Slicing the QuerySet. - Serializing the QuerySet (e.g., converting it to a list or calling len()).\n# Query is not executed yet\nbooks = Book.objects.filter(author=\"George Orwell\")\n\n# Query is executed when you evaluate the QuerySet\nfor book in books:\n    print(book.title)\n\n\n\n2. Custom QuerySets\nInstead of overriding the manager, you can create a custom QuerySet and use it directly in your model manager. This method allows you to chain custom QuerySet methods.\n\na. Creating a Custom QuerySet\nclass BookQuerySet(models.QuerySet):\n    def published(self):\n        return self.filter(published_date__isnull=False)\n\n    def by_author(self, author_name):\n        return self.filter(author=author_name)\n\n# Use the custom QuerySet in a manager\nclass BookManager(models.Manager):\n    def get_queryset(self):\n        return BookQuerySet(self.model, using=self._db)\n\n# Use the manager in the model\nclass Book(models.Model):\n    title = models.CharField(max_length=100)\n    author = models.CharField(max_length=100)\n    published_date = models.DateField()\n\n    objects = BookManager()\nNow you can chain custom QuerySet methods together:\nbooks = Book.objects.published().by_author(\"George Orwell\")\n\n\nb. Chaining Custom QuerySet Methods\nCustom QuerySet methods allow you to chain operations and write more readable and reusable query logic:\nbooks = Book.objects.published().by_author(\"J.K. Rowling\").order_by('published_date')\n\n\nc.¬†Combining Managers and QuerySets\nA common pattern is to define both custom QuerySets and managers, allowing you to use manager-level logic while preserving the ability to chain QuerySet methods.\nclass BookQuerySet(models.QuerySet):\n    def published(self):\n        return self.filter(published_date__isnull=False)\n\nclass BookManager(models.Manager):\n    def get_queryset(self):\n        return BookQuerySet(self.model, using=self._db)\n\n    def published_last_year(self):\n        last_year = timezone.now().year - 1\n        return self.get_queryset().published().filter(published_date__year=last_year)\n\n\n\n3. QuerySet Methods\nDjango‚Äôs QuerySet API provides numerous built-in methods to filter, manipulate, and aggregate data. Some of the most commonly used methods are:\n\n1. Retrieval Methods\n\nall(): Returns a new QuerySet containing all objects in the database.\nfilter(**kwargs): Returns a new QuerySet containing objects that match the given lookup parameters.\nexclude(**kwargs): Returns a new QuerySet excluding objects that match the given lookup parameters.\nget(**kwargs): Returns a single object matching the given lookup parameters. Raises DoesNotExist if no object is found and MultipleObjectsReturned if more than one object matches.\nfirst(): Returns the first object in the QuerySet, or None if the QuerySet is empty.\nlast(): Returns the last object in the QuerySet, or None if the QuerySet is empty.\nearliest(field_name=None): Returns the earliest object according to a given field or Meta ordering.\nlatest(field_name=None): Returns the latest object according to a given field or Meta ordering.\ncount(): Returns the number of objects in the QuerySet.\nexists(): Returns True if the QuerySet contains any results, and False if it is empty.\n\n\n\n2. Aggregation and Annotation\n\naggregate(**kwargs): Returns a dictionary with the results of aggregating over the QuerySet.\nannotate(**kwargs): Adds annotations to each object in the QuerySet based on the provided aggregate functions.\n\n\n\n3. Ordering Methods\n\norder_by(*field_names): Returns a new QuerySet with the objects ordered by the given fields.\nreverse(): Reverses the order of the QuerySet.\n\n\n\n4. Limiting Methods\n\ndistinct(): Returns a new QuerySet with distinct results.\nvalues(*fields): Returns a QuerySet that returns dictionaries when iterated over, each representing an object with the specified fields as keys.\nvalues_list(*fields, flat=False): Returns a QuerySet that yields tuples when iterated over. If flat=True, it returns single values.\nonly(*fields): Limits the fields that are loaded to the ones specified.\ndefer(*fields): Defers the loading of the specified fields until they are accessed.\n\n\n\n5. Modification Methods\n\nupdate(**kwargs): Updates fields in the database for all objects in the QuerySet (returns the number of rows affected).\ndelete(): Deletes all objects in the QuerySet (returns the number of objects deleted and a dictionary with details).\ncreate(**kwargs): Creates a new object, saves it, and returns it.\nbulk_create(objs, batch_size=None, ignore_conflicts=False): Inserts multiple objects into the database in a single query.\nbulk_update(objs, fields, batch_size=None): Updates multiple objects with new field values in a single query.\n\n\n\n6. Chaining and Combining Methods\n\nunion(*other_qs, all=False): Combines QuerySet objects by performing an SQL UNION.\nintersection(*other_qs): Combines QuerySet objects by performing an SQL INTERSECT.\ndifference(*other_qs): Combines QuerySet objects by performing an SQL EXCEPT.\n\n\n\n7. Boolean and Existence Methods\n\nexists(): Returns True if the QuerySet contains any results, False if not.\nnone(): Returns an empty QuerySet.\n\n\n\n8. Caching and Evaluation\n\niterator(): Uses an iterator to loop over the QuerySet without caching results.\nselect_related(*fields): Creates an SQL join and includes related objects in the QuerySet.\nprefetch_related(*lookups): Prefetches related objects to reduce the number of database queries.\n\n\n\n9. Date and Time Methods\n\ndates(field_name, kind, order='ASC'): Returns a QuerySet of all available dates.\ndatetimes(field_name, kind, order='ASC', tzinfo=None): Returns a QuerySet of all available datetimes.\n\n\n\n10. Advanced Querying\n\nextra(select=None, where=None, params=None, tables=None, order_by=None, select_params=None): Adds extra SQL fragments to the query.\nraw(raw_query, params=None, translations=None): Executes a raw SQL query.\n\nThese methods make it easy to create powerful, flexible queries in Django.\n\n\n\n\n\n Back to top",
    "crumbs": [
      "Blog",
      "Django",
      "QuerySet"
    ]
  },
  {
    "objectID": "Django/celery.html",
    "href": "Django/celery.html",
    "title": "Celery",
    "section": "",
    "text": "1. What is Celery?\nCelery is a distributed system to process messages asynchronously by running tasks in the background. It uses a message broker to deliver messages between the main application and worker nodes. It is designed to handle distributed task processing at scale.\n\n\nKey Features:\n\nAsynchronous Task Execution: Run tasks in the background, freeing up your main application.\nTask Scheduling: Execute tasks at specific intervals or after certain delays (like cron jobs).\nDistributed Processing: Run tasks across multiple worker nodes for scalability and fault tolerance.\nTask Retrying: Tasks can be automatically retried if they fail.\n\n\n\n2. Celery Architecture\n\na. Workers\nWorkers are background processes that execute tasks. You can have multiple workers across different machines to handle tasks in parallel.\n\n\nb. Message Broker\nA message broker (such as Redis, RabbitMQ, or Amazon SQS) is used to send messages from your main application to Celery workers. The broker handles task queuing and routing.\n\n\nc.¬†Result Backend\nThe result backend stores the results of tasks. Celery supports several backends like Redis, Django ORM, AMQP, Memcached, and SQLAlchemy.\n\n\n\n3. Installation and Setup\n\na. Install Celery\nTo install Celery in your project, use pip:\npip install celery\n\n\nb. Basic Celery Setup for a Django Project\n\nCreate a celery.py file in your Django project directory (where settings.py resides):\n# project/celery.py\nfrom __future__ import absolute_import, unicode_literals\nimport os\nfrom celery import Celery\n\n# set the default Django settings module for the 'celery' program.\nos.environ.setdefault('DJANGO_SETTINGS_MODULE', 'project.settings')\n\napp = Celery('project')\n\n# Using a string here means the worker doesn‚Äôt have to serialize\n# the configuration object to child processes.\napp.config_from_object('django.conf:settings', namespace='CELERY')\n\n# Load task modules from all registered Django app configs.\napp.autodiscover_tasks()\nUpdate __init__.py to ensure that Celery is imported when Django starts.\n# project/__init__.py\n\nfrom __future__ import absolute_import, unicode_literals\n\n# This will make sure the app is always imported when\n# Django starts so that shared_task will use this app.\nfrom .celery import app as celery_app\n\n__all__ = ('celery_app',)\nConfigure Celery in settings.py:\nAdd the configuration for the message broker (for example, Redis):\n# project/settings.py\n\n# Celery settings\nCELERY_BROKER_URL = 'redis://localhost:6379/0'  # Redis as message broker\nCELERY_RESULT_BACKEND = 'redis://localhost:6379/0'  # Redis to store task results\nCELERY_ACCEPT_CONTENT = ['json']\nCELERY_TASK_SERIALIZER = 'json'\nCELERY_RESULT_SERIALIZER = 'json'\nCELERY_TIMEZONE = 'UTC'\n\n\n\nc.¬†Starting Celery Workers\nOnce you‚Äôve configured Celery, you need to run the Celery workers to process the tasks. Run this command from the Django project root:\ncelery -A project worker --loglevel=info\nThis command starts a Celery worker that will process tasks defined in your project. The --loglevel=info flag ensures you see task output.\n\n\n\n4. Defining and Executing Tasks\nTasks in Celery are just Python functions that you register as tasks using the @task decorator. You can create tasks in any app within the Django project.\n\na. Defining a Task\n# tasks.py in any Django app\n\nfrom celery import shared_task\nfrom time import sleep\n\n@shared_task\ndef add(x, y):\n    sleep(10)  # Simulate a time-consuming task\n    return x + y\n\n@shared_task: This decorator marks the function as a Celery task, meaning it can be executed asynchronously.\n\n\n\nb. Calling a Task\nTo execute a Celery task asynchronously, you use the delay() method:\nfrom .tasks import add\n\n# Call the task asynchronously\nresult = add.delay(4, 6)\n\n# You can also retrieve the result (if needed)\nprint(result.get())  # This will block until the task is done\nThis will queue the add task, and Celery workers will execute it in the background.\n\n\nc.¬†Task Results\nYou can track task execution status and retrieve the result using the task‚Äôs ID:\n# Retrieve the result using the task ID\nfrom celery.result import AsyncResult\n\nresult = AsyncResult(task_id)\nif result.successful():\n    print(result.result)\n\n\n\n5. Task Retries and Error Handling\nCelery allows you to automatically retry tasks that fail due to transient errors.\n\na. Retrying a Task\nTo make a task retryable, use the retry() method in the task function:\n@shared_task(bind=True, max_retries=3)\ndef example_task(self):\n    try:\n        # Simulate a task that may fail\n        risky_operation()\n    except SomeError as exc:\n        raise self.retry(exc=exc, countdown=5)\n\nmax_retries=3: The task will be retried a maximum of 3 times.\ncountdown=5: The task will wait 5 seconds before retrying.\n\n\n\nb. Error Handling\nIf a task raises an exception, it can be caught and retried or handled with a fallback:\n@shared_task(bind=True)\ndef risky_task(self):\n    try:\n        risky_operation()\n    except Exception as exc:\n        self.update_state(state='FAILURE', meta={'error': str(exc)})\n        raise exc\n\nself.update_state(): Updates the task‚Äôs state manually. You can store custom error metadata using the meta argument.\n\n\n\n\n6. Periodic and Scheduled Tasks\nYou can schedule tasks to run at specific times or intervals, similar to cron jobs.\n\na. Using Celery Beat\nCelery Beat is a scheduler that kicks off tasks at regular intervals. It works alongside your Celery workers.\n\nInstall the necessary package:\npip install django-celery-beat\nAdd django_celery_beat to your INSTALLED_APPS in settings.py:\nINSTALLED_APPS = [\n    # other apps\n    'django_celery_beat',\n]\nRun migrations for Celery Beat:\npython manage.py migrate django_celery_beat\nConfigure a Periodic Task using the Django Admin or in code:\nExample of a periodic task running every 10 minutes:\nfrom django_celery_beat.models import PeriodicTask, IntervalSchedule\n\n# Create an interval schedule (every 10 minutes)\nschedule, created = IntervalSchedule.objects.get_or_create(\n    every=10,\n    period=IntervalSchedule.MINUTES,\n)\n\n# Create the periodic task\nPeriodicTask.objects.create(\n    interval=schedule,                  # Use the schedule created above\n    name='My periodic task',\n    task='myapp.tasks.my_task',  # The name of the task function\n)\nStart the Celery Beat Scheduler:\ncelery -A project beat --loglevel=info\nThis command will run the scheduler, which triggers periodic tasks based on your schedule.\n\n\n\nb. Using the crontab Scheduler\nYou can also configure tasks to run at specific times using cron-like syntax:\nfrom celery.schedules import crontab\n\napp.conf.beat_schedule = {\n    'task_name': {\n        'task': 'myapp.tasks.my_task',\n        'schedule': crontab(hour=7, minute=30, day_of_week=1),  # Every Monday at 7:30 AM\n    },\n}\n\n\n\n7. Optimizing Celery for Production\n\na. Concurrency\nYou can control how many worker processes or threads Celery spawns using the --concurrency option when starting workers:\ncelery -A project worker --concurrency=4\nThis will start 4 worker processes.\n\n\nb. Prefetch Limit\nCelery workers can fetch multiple tasks in advance, but this may overload workers in some cases. You can limit the number of prefetched tasks with CELERYD_PREFETCH_MULTIPLIER:\napp.conf.worker_prefetch_multiplier = 1  # Pref\n\netch only 1 task at a time\n\n\nc.¬†Task Time Limits\nIf a task takes too long, you can set time limits to prevent worker exhaustion:\napp.conf.task_soft_time_limit = 60  # Raise exception after 60 seconds\napp.conf.task_time_limit = 120      # Hard limit (kill task after 120 seconds)\n\n\nd.¬†Monitoring and Admin\nUse Flower, a web-based tool to monitor Celery workers and tasks:\n\nInstall Flower:\npip install flower\nStart Flower:\ncelery -A project flower\nFlower provides a web interface that shows the current status of workers, tasks, and queues. You can view task progress, task failures, and retry counts.\n\n\n\n\n8. Broker Options\nCelery supports a wide range of message brokers, including:\n\nRedis: A simple key-value store that can act as a message broker.\nRabbitMQ: A robust, feature-rich message broker that supports advanced features like routing and exchanges.\nAmazon SQS: A scalable message queue service.\n\n\nRedis Example:\nCELERY_BROKER_URL = 'redis://localhost:6379/0'\nCELERY_RESULT_BACKEND = 'redis://localhost:6379/0'\n\n\nRabbitMQ Example:\nCELERY_BROKER_URL = 'amqp://guest:guest@localhost:5672//'\n\n\n\n9. Best Practices\n\nUse Task Queues: Use task queues to categorize and separate different types of tasks, especially if they have different priority or resource requirements.\nExample:\ncelery -A project worker -Q queue_name\nIdempotent Tasks: Ensure tasks are idempotent, meaning they can run multiple times without unintended side effects. This is essential because Celery retries tasks after failures.\nError Handling: Always handle potential errors inside tasks using try/except and consider using retry() for transient issues.\nMonitor Tasks: Use monitoring tools like Flower or Prometheus to track worker health and task performance.\n\n\n\n\n\n Back to top",
    "crumbs": [
      "Blog",
      "Django",
      "Celery"
    ]
  },
  {
    "objectID": "Django/1_allauth_users.html",
    "href": "Django/1_allauth_users.html",
    "title": "Allauth Users Models",
    "section": "",
    "text": "poetry add django-allauth",
    "crumbs": [
      "Blog",
      "Django",
      "Allauth Users Models"
    ]
  },
  {
    "objectID": "Django/1_allauth_users.html#install",
    "href": "Django/1_allauth_users.html#install",
    "title": "Allauth Users Models",
    "section": "",
    "text": "poetry add django-allauth",
    "crumbs": [
      "Blog",
      "Django",
      "Allauth Users Models"
    ]
  },
  {
    "objectID": "Django/1_allauth_users.html#create-accounts-app",
    "href": "Django/1_allauth_users.html#create-accounts-app",
    "title": "Allauth Users Models",
    "section": "Create accounts app",
    "text": "Create accounts app\npython manage.py startapp accounts",
    "crumbs": [
      "Blog",
      "Django",
      "Allauth Users Models"
    ]
  },
  {
    "objectID": "Django/1_allauth_users.html#create-a-custom-user-model",
    "href": "Django/1_allauth_users.html#create-a-custom-user-model",
    "title": "Allauth Users Models",
    "section": "Create a Custom User Model",
    "text": "Create a Custom User Model\nfrom django.contrib.auth.models import AbstractBaseUser, BaseUserManager, PermissionsMixin\nfrom django.db import models\nfrom django.utils import timezone\n\nclass CustomUserManager(BaseUserManager):\n    def create_user(self, email, password=None, **extra_fields):\n        if not email:\n            raise ValueError('The Email field must be set')\n        email = self.normalize_email(email)\n        user = self.model(email=email, **extra_fields)\n        user.set_password(password)\n        user.save(using=self._db)\n        return user\n\n    def create_superuser(self, email, password=None, **extra_fields):\n        extra_fields.setdefault('is_staff', True)\n        extra_fields.setdefault('is_superuser', True)\n\n        return self.create_user(email, password, **extra_fields)\n\nclass CustomUser(AbstractBaseUser, PermissionsMixin):\n    email = models.EmailField(unique=True)\n    first_name = models.CharField(max_length=30)\n    last_name = models.CharField(max_length=30)\n    is_active = models.BooleanField(default=True)\n    is_staff = models.BooleanField(default=False)\n    date_joined = models.DateTimeField(default=timezone.now)\n\n    objects = CustomUserManager()\n\n    USERNAME_FIELD = 'email'\n    REQUIRED_FIELDS = ['first_name', 'last_name']\n\n    def __str__(self):\n        return self.email",
    "crumbs": [
      "Blog",
      "Django",
      "Allauth Users Models"
    ]
  },
  {
    "objectID": "Django/1_allauth_users.html#update-settings.py",
    "href": "Django/1_allauth_users.html#update-settings.py",
    "title": "Allauth Users Models",
    "section": "Update settings.py",
    "text": "Update settings.py\n\nin myproject/settings.py:\n\nINSTALLED_APPS = [\n    # Django apps...\n    'django.contrib.sites',  # Required by django-allauth\n\n    'allauth',\n    'allauth.account',\n    'allauth.socialaccount',\n\n    'accounts',  # Your custom app\n]\n\nAUTH_USER_MODEL = 'accounts.CustomUser'\n\nSITE_ID = 1\n\n# Authentication backends\nAUTHENTICATION_BACKENDS = (\n    'django.contrib.auth.backends.ModelBackend',\n    'allauth.account.auth_backends.AuthenticationBackend',\n)\n\nLOGIN_REDIRECT_URL = '/'\nLOGOUT_REDIRECT_URL = '/'\n\n# Optional: Email configuration for allauth\nEMAIL_BACKEND = 'django.core.mail.backends.console.EmailBackend'\n\n# Custom allauth forms\nACCOUNT_AUTHENTICATION_METHOD = 'email'\nACCOUNT_EMAIL_REQUIRED = True\nACCOUNT_EMAIL_VERIFICATION = 'mandatory'\nACCOUNT_USERNAME_REQUIRED = False\nACCOUNT_USER_MODEL_USERNAME_FIELD = None\nACCOUNT_SIGNUP_FORM_CLASS = 'accounts.forms.CustomSignupForm'",
    "crumbs": [
      "Blog",
      "Django",
      "Allauth Users Models"
    ]
  },
  {
    "objectID": "Django/1_allauth_users.html#create-a-custom-signup-form",
    "href": "Django/1_allauth_users.html#create-a-custom-signup-form",
    "title": "Allauth Users Models",
    "section": "Create a Custom Signup Form",
    "text": "Create a Custom Signup Form\n\nIn accounts/forms.py\n\nfrom django import forms\nfrom allauth.account.forms import SignupForm\n\nclass CustomSignupForm(SignupForm):\n    first_name = forms.CharField(max_length=30, label='First Name')\n    last_name = forms.CharField(max_length=30, label='Last Name')\n\n    def save(self, request):\n        user = super(CustomSignupForm, self).save(request)\n        user.first_name = self.cleaned_data['first_name']\n        user.last_name = self.cleaned_data['last_name']\n        user.save()\n        return user",
    "crumbs": [
      "Blog",
      "Django",
      "Allauth Users Models"
    ]
  },
  {
    "objectID": "Django/1_allauth_users.html#create-forms",
    "href": "Django/1_allauth_users.html#create-forms",
    "title": "Allauth Users Models",
    "section": "Create Forms",
    "text": "Create Forms\n\nIn accounts/forms.py\n\nfrom django import forms\nfrom django.contrib.auth.forms import UserCreationForm, UserChangeForm\nfrom .models import CustomUser\n\nclass CustomUserCreationForm(UserCreationForm):\n    class Meta:\n        model = CustomUser\n        fields = ('email', 'first_name', 'last_name', 'password1', 'password2')\n\nclass CustomUserChangeForm(UserChangeForm):\n    class Meta:\n        model = CustomUser\n        fields = ('email', 'first_name', 'last_name', 'password', 'is_active', 'is_staff')",
    "crumbs": [
      "Blog",
      "Django",
      "Allauth Users Models"
    ]
  },
  {
    "objectID": "Django/1_allauth_users.html#register-the-custom-user-model-in-the-admin",
    "href": "Django/1_allauth_users.html#register-the-custom-user-model-in-the-admin",
    "title": "Allauth Users Models",
    "section": "Register the Custom User Model in the Admin",
    "text": "Register the Custom User Model in the Admin\n\nIn accounts/admin.py\n\nfrom django.contrib import admin\nfrom django.contrib.auth.admin import UserAdmin\nfrom .models import CustomUser\nfrom .forms import CustomUserCreationForm, CustomUserChangeForm\n\nclass CustomUserAdmin(UserAdmin):\n    add_form = CustomUserCreationForm\n    form = CustomUserChangeForm\n    model = CustomUser\n\n    list_display = ('email', 'first_name', 'last_name', 'is_staff', 'is_active')\n    list_filter = ('is_staff', 'is_active')\n    search_fields = ('email', 'first_name', 'last_name')\n    ordering = ('email',)\n\n    fieldsets = (\n        (None, {'fields': ('email', 'password')}),\n        ('Personal Info', {'fields': ('first_name', 'last_name')}),\n        ('Permissions', {'fields': ('is_staff', 'is_active', 'is_superuser')}),\n        ('Important dates', {'fields': ('last_login', 'date_joined')}),\n    )\n    add_fieldsets = (\n        (None, {\n            'classes': ('wide',),\n            'fields': ('email', 'first_name', 'last_name', 'password1', 'password2', 'is_staff', 'is_active')}\n        ),\n    )\n\nadmin.site.register(CustomUser, CustomUserAdmin)",
    "crumbs": [
      "Blog",
      "Django",
      "Allauth Users Models"
    ]
  },
  {
    "objectID": "Django/1_allauth_users.html#set-up-urls",
    "href": "Django/1_allauth_users.html#set-up-urls",
    "title": "Allauth Users Models",
    "section": "Set Up URLs",
    "text": "Set Up URLs\n\nmyproject/urls.py\n\nfrom django.contrib import admin\nfrom django.urls import path, include\n\nurlpatterns = [\n    path('admin/', admin.site.urls),\n    path('accounts/', include('allauth.urls')),  # allauth URLs\n]",
    "crumbs": [
      "Blog",
      "Django",
      "Allauth Users Models"
    ]
  },
  {
    "objectID": "Django/1_allauth_users.html#run-migrations",
    "href": "Django/1_allauth_users.html#run-migrations",
    "title": "Allauth Users Models",
    "section": "Run Migrations",
    "text": "Run Migrations\n\nMay need to recreate the database",
    "crumbs": [
      "Blog",
      "Django",
      "Allauth Users Models"
    ]
  },
  {
    "objectID": "Django/django_x.html",
    "href": "Django/django_x.html",
    "title": "DjangoX",
    "section": "",
    "text": "Use template\n\nTODO: update template\n\n\n\n Back to top",
    "crumbs": [
      "Blog",
      "Django",
      "DjangoX"
    ]
  },
  {
    "objectID": "Django/1_admin_unfold.html",
    "href": "Django/1_admin_unfold.html",
    "title": "Admin Unfold",
    "section": "",
    "text": "Modern Look & Feel: Provides an updated design over the default Django Admin.\n\nCollapsible Sections & Tabs: Makes large or complex forms more manageable.\n\nBetter Layout & Navigation: Simplifies admin pages to reduce clutter.\n\nConfigurable & Extensible: Easily override templates or add custom CSS/JS.\n\nIntegration with Default Admin: Minimal disruption to your existing admin code.",
    "crumbs": [
      "Blog",
      "Django",
      "Admin Unfold"
    ]
  },
  {
    "objectID": "Django/1_admin_unfold.html#what-is-django-unfold",
    "href": "Django/1_admin_unfold.html#what-is-django-unfold",
    "title": "Admin Unfold",
    "section": "",
    "text": "Modern Look & Feel: Provides an updated design over the default Django Admin.\n\nCollapsible Sections & Tabs: Makes large or complex forms more manageable.\n\nBetter Layout & Navigation: Simplifies admin pages to reduce clutter.\n\nConfigurable & Extensible: Easily override templates or add custom CSS/JS.\n\nIntegration with Default Admin: Minimal disruption to your existing admin code.",
    "crumbs": [
      "Blog",
      "Django",
      "Admin Unfold"
    ]
  },
  {
    "objectID": "Django/1_admin_unfold.html#installation-setup",
    "href": "Django/1_admin_unfold.html#installation-setup",
    "title": "Admin Unfold",
    "section": "2. Installation & Setup",
    "text": "2. Installation & Setup\n\nInstall the Package:\npip install django-unfold\nOr if you use Poetry:\npoetry add django-unfold\nAdd to INSTALLED_APPS:\n# settings.py\nINSTALLED_APPS = [\n    # ...\n    'django_unfold',\n]\nRun Migrations (if prompted, though Unfold typically doesn‚Äôt add models):\npython manage.py migrate\nCollect Static:\npython manage.py collectstatic\nThis ensures all static files related to Django Unfold‚Äôs styling and scripts are in place.\nTest:\npython manage.py runserver\nLog into your admin. You should notice a more refined UI.",
    "crumbs": [
      "Blog",
      "Django",
      "Admin Unfold"
    ]
  },
  {
    "objectID": "Django/1_admin_unfold.html#using-unfold-in-your-admin",
    "href": "Django/1_admin_unfold.html#using-unfold-in-your-admin",
    "title": "Admin Unfold",
    "section": "3. Using Unfold in Your Admin",
    "text": "3. Using Unfold in Your Admin\n\nA. Subclass the Unfold Admin\nBy default, you can get many enhancements just by using UnfoldAdmin instead of Django‚Äôs ModelAdmin:\n# myapp/admin.py\nfrom django_unfold.admin import UnfoldAdmin\nfrom django.contrib import admin\nfrom .models import MyModel\n\n@admin.register(MyModel)\nclass MyModelAdmin(UnfoldAdmin):\n    list_display = ('id', 'name', 'created_at')\n    search_fields = ('name',)\nThis typically gives you: - A cleaner form layout - Improved inlines handling - Enhanced styling out of the box\n\n\nB. Collapsible Fieldsets\nSimilar to Django‚Äôs default fieldsets, you can make them collapsible for better organization:\nclass MyModelAdmin(UnfoldAdmin):\n    fieldsets = [\n        ('Basic Info', {\n            'fields': ('name', 'description'),\n            'classes': ('collapse',),\n        }),\n        ('Additional Info', {\n            'fields': ('some_other_field',),\n        }),\n    ]\n\n\nC. Using Tabs\nUnfold provides a tabbed layout option to group fields:\nclass MyModelAdmin(UnfoldAdmin):\n    tabs = [\n        ('General', {\n            'fields': ('name', 'description'),\n        }),\n        ('Details', {\n            'fields': ('some_other_field', 'another_field'),\n        }),\n    ]\nWhen you load the change form page in the admin, the fields appear under tabbed sections instead of a single vertical form.\n\n\nD. Custom List Displays\nLeverage Unfold‚Äôs enhanced list views (e.g., improved table responsiveness):\nclass MyModelAdmin(UnfoldAdmin):\n    list_display = ('id', 'name', 'status')\n    list_filter = ('status', 'created_at')\n    search_fields = ('name',)\n\n\nE. Admin-Site-Wide Settings\nIf you want to override the admin site headers or site titles:\n# myproject/admin.py\nfrom django.contrib import admin\nadmin.site.site_header = \"My Unfold Admin\"\nadmin.site.site_title = \"Unfold Admin Portal\"\nadmin.site.index_title = \"Welcome to My Unfold Admin\"",
    "crumbs": [
      "Blog",
      "Django",
      "Admin Unfold"
    ]
  },
  {
    "objectID": "Django/1_admin_unfold.html#advanced-customization",
    "href": "Django/1_admin_unfold.html#advanced-customization",
    "title": "Admin Unfold",
    "section": "4. Advanced Customization",
    "text": "4. Advanced Customization\n\nA. Extending UnfoldAdmin\nIf you want a custom base admin for all your models:\n# myapp/admin_bases.py\nfrom django_unfold.admin import UnfoldAdmin\n\nclass BaseUnfoldAdmin(UnfoldAdmin):\n    # e.g. add custom media, override default behaviors\n    class Media:\n        css = {\n            'all': ('css/custom_admin.css',)\n        }\n        js = ('js/custom_admin.js',)\n\n    # You can override built-in methods or add custom logic here\n    def some_custom_method(self, obj):\n        return \"Custom Display\"\nThen in admin.py:\nfrom .admin_bases import BaseUnfoldAdmin\nfrom .models import MyModel\n\n@admin.register(MyModel)\nclass MyModelAdmin(BaseUnfoldAdmin):\n    pass\n\n\nB. Template Overrides\nDjango Unfold references certain admin templates like admin/base.html or admin/change_form.html. You can override these by creating templates in your project:\nmyproject/\n    templates/\n        admin/\n            base.html\n            change_form.html\n            ...\nIf you want to specifically override Unfold‚Äôs template logic, check the Unfold documentation or source to see which template names it‚Äôs using. Usually, it‚Äôs the same structure as Django‚Äôs admin templates, so standard overrides typically apply.\n\n\nC. Enhanced Inlines\nInline forms for related models can also benefit from Unfold‚Äôs layout. Simply swap admin.TabularInline or admin.StackedInline with the equivalents from Unfold if provided, or keep them as is‚ÄîUnfold‚Äôs CSS typically styles them automatically.",
    "crumbs": [
      "Blog",
      "Django",
      "Admin Unfold"
    ]
  },
  {
    "objectID": "Django/1_admin_unfold.html#configuration-settings",
    "href": "Django/1_admin_unfold.html#configuration-settings",
    "title": "Admin Unfold",
    "section": "5. Configuration & Settings",
    "text": "5. Configuration & Settings\nSome versions of Unfold might expose settings in settings.py to enable or disable specific features. For example:\n# settings.py\nUNFOLD_SETTINGS = {\n    'ENABLE_RESPONSIVE_TABLES': True,\n    'USE_TABS': True,\n    'THEME': 'default',  # or 'dark', etc., if multiple themes are available\n}\nCheck the project‚Äôs documentation for the exact keys and possible values. (Not all releases of Unfold have these settings, so it depends on your version.)",
    "crumbs": [
      "Blog",
      "Django",
      "Admin Unfold"
    ]
  },
  {
    "objectID": "Django/1_admin_unfold.html#combining-unfold-with-other-admin-tools",
    "href": "Django/1_admin_unfold.html#combining-unfold-with-other-admin-tools",
    "title": "Admin Unfold",
    "section": "6. Combining Unfold with Other Admin Tools",
    "text": "6. Combining Unfold with Other Admin Tools\nDjango Unfold can coexist with other admin enhancements like: - django-extensions: Greatly expands your management commands. - django-import-export: Enables data import/export from the admin. - django-grappelli or django-suit: However, mixing admin UI frameworks often causes conflicts in CSS or JavaScript. Generally, you pick one UI library (Unfold, Grappelli, Suit, etc.) to avoid collisions.\nIf you do combine them, be sure to test thoroughly and override CSS if needed to prevent style conflicts.",
    "crumbs": [
      "Blog",
      "Django",
      "Admin Unfold"
    ]
  },
  {
    "objectID": "Django/1_admin_unfold.html#potential-limitations",
    "href": "Django/1_admin_unfold.html#potential-limitations",
    "title": "Admin Unfold",
    "section": "7. Potential Limitations",
    "text": "7. Potential Limitations\n\nLess Common: It‚Äôs not as widely used as Grappelli or Django Suit, so there might be fewer community snippets.\nVersion Compatibility: Always check if the Unfold version supports your Django version (especially if you‚Äôre on newer Django releases).\nTemplate Collisions: If you have heavy template customizations for the admin, you may need to reconcile them with Unfold‚Äôs approach.\nDevelopment Activity: Check the repository‚Äôs activity for updates or potential issues with stale code.",
    "crumbs": [
      "Blog",
      "Django",
      "Admin Unfold"
    ]
  },
  {
    "objectID": "Django/1_admin_unfold.html#quick-reference-table",
    "href": "Django/1_admin_unfold.html#quick-reference-table",
    "title": "Admin Unfold",
    "section": "8. Quick Reference Table",
    "text": "8. Quick Reference Table\n\n\n\n\n\n\n\nFeature\nUsage\n\n\n\n\nInstallation\npip install django-unfold\n\n\nAdmin Import\nfrom django_unfold.admin import UnfoldAdmin\n\n\nBasic Usage\nclass MyModelAdmin(UnfoldAdmin): ...\n\n\nCollapsible Fieldsets\nfieldsets = [(... {'classes': ('collapse',)})]\n\n\nTabbed Layout\ntabs = [(\"Tab1\", {...}), (\"Tab2\", {...})]\n\n\nTemplate Overrides\nPlace overrides in templates/admin/ (same as default Django admin)\n\n\nCustom Theme\nAdjust UNFOLD_SETTINGS in settings.py or override CSS via Media class\n\n\nRegistration\n@admin.register(MyModel) or admin.site.register(MyModel, MyModelAdmin)",
    "crumbs": [
      "Blog",
      "Django",
      "Admin Unfold"
    ]
  },
  {
    "objectID": "Django/1_admin_unfold.html#conclusion-best-practices",
    "href": "Django/1_admin_unfold.html#conclusion-best-practices",
    "title": "Admin Unfold",
    "section": "9. Conclusion & Best Practices",
    "text": "9. Conclusion & Best Practices\n\nStart Simple\n\nSwap in UnfoldAdmin for your existing ModelAdmin to see immediate UI improvements.\n\nOrganize Fields\n\nUse collapsible fieldsets or tabs to manage complex models with many fields.\n\nOverride Responsibly\n\nUse the standard Django approach to override admin templates only if you need deep layout changes.\n\nMaintain Code Consistency\n\nIf you adopt Unfold, consider making it the default for all your ModelAdmins to have a consistent admin UI.\n\nCheck Documentation\n\nIf you run into styling issues or need advanced features, consult the official GitHub/Docs for up-to-date instructions.\n\n\nBy following these steps and guidelines, you can transform your Django Admin into a more modern, user-friendly, and efficient environment using Django Unfold.",
    "crumbs": [
      "Blog",
      "Django",
      "Admin Unfold"
    ]
  },
  {
    "objectID": "Django/0_query_filters.html",
    "href": "Django/0_query_filters.html",
    "title": "Query Filters",
    "section": "",
    "text": "Filters are applied using .filter(), .exclude(), and .get() on Django QuerySets.\n\n\n\n\n\n\n\nMethod\nDescription\n\n\n\n\nfilter(**conditions)\nReturns records matching the conditions.\n\n\nexclude(**conditions)\nReturns records not matching the conditions.\n\n\nget(**conditions)\nReturns a single object matching the condition (raises MultipleObjectsReturned or DoesNotExist).\n\n\n\n\n\nfrom myapp.models import Employee\n\n# Get all employees with age 30\nemployees = Employee.objects.filter(age=30)\n\n# Get all employees EXCEPT those with age 30\nemployees_exclude = Employee.objects.exclude(age=30)\n\n# Get a single employee with a unique field (e.g., email)\nemployee = Employee.objects.get(email=\"john@example.com\")",
    "crumbs": [
      "Blog",
      "Django",
      "Query Filters"
    ]
  },
  {
    "objectID": "Django/0_query_filters.html#basic-query-filtering",
    "href": "Django/0_query_filters.html#basic-query-filtering",
    "title": "Query Filters",
    "section": "",
    "text": "Filters are applied using .filter(), .exclude(), and .get() on Django QuerySets.\n\n\n\n\n\n\n\nMethod\nDescription\n\n\n\n\nfilter(**conditions)\nReturns records matching the conditions.\n\n\nexclude(**conditions)\nReturns records not matching the conditions.\n\n\nget(**conditions)\nReturns a single object matching the condition (raises MultipleObjectsReturned or DoesNotExist).\n\n\n\n\n\nfrom myapp.models import Employee\n\n# Get all employees with age 30\nemployees = Employee.objects.filter(age=30)\n\n# Get all employees EXCEPT those with age 30\nemployees_exclude = Employee.objects.exclude(age=30)\n\n# Get a single employee with a unique field (e.g., email)\nemployee = Employee.objects.get(email=\"john@example.com\")",
    "crumbs": [
      "Blog",
      "Django",
      "Query Filters"
    ]
  },
  {
    "objectID": "Django/0_query_filters.html#field-lookups-operators",
    "href": "Django/0_query_filters.html#field-lookups-operators",
    "title": "Query Filters",
    "section": "2. Field Lookups (Operators)",
    "text": "2. Field Lookups (Operators)\nDjango provides lookup expressions to perform SQL-like queries.\n\n2.1 Exact Match (exact, iexact)\n\n\n\n\n\n\n\n\nLookup\nExample\nSQL Equivalent\n\n\n\n\nexact\n.filter(name__exact=\"John\")\nWHERE name = 'John'\n\n\niexact (case-insensitive)\n.filter(name__iexact=\"john\")\nWHERE LOWER(name) = 'john'\n\n\n\nEmployee.objects.filter(name__exact=\"John\")\nEmployee.objects.filter(name__iexact=\"john\")  # Case-insensitive\n\n\n\n2.2 Partial Match (contains, icontains, startswith, endswith)\n\n\n\n\n\n\n\n\nLookup\nExample\nSQL Equivalent\n\n\n\n\ncontains\n.filter(name__contains=\"Jo\")\nWHERE name LIKE '%Jo%'\n\n\nicontains (case-insensitive)\n.filter(name__icontains=\"jo\")\nWHERE LOWER(name) LIKE '%jo%'\n\n\nstartswith\n.filter(name__startswith=\"Jo\")\nWHERE name LIKE 'Jo%'\n\n\nendswith\n.filter(name__endswith=\"son\")\nWHERE name LIKE '%son'\n\n\n\nEmployee.objects.filter(name__icontains=\"jo\")  # Matches \"John\", \"Jordan\"\n\n\n\n2.3 Comparison Operators (gt, gte, lt, lte)\n\n\n\n\n\n\n\n\nLookup\nExample\nSQL Equivalent\n\n\n\n\ngt (greater than)\n.filter(age__gt=30)\nWHERE age &gt; 30\n\n\ngte (greater than or equal)\n.filter(age__gte=30)\nWHERE age &gt;= 30\n\n\nlt (less than)\n.filter(age__lt=30)\nWHERE age &lt; 30\n\n\nlte (less than or equal)\n.filter(age__lte=30)\nWHERE age &lt;= 30\n\n\n\nEmployee.objects.filter(salary__gte=50000)\n\n\n\n2.4 Multiple Values (in)\n\n\n\n\n\n\n\n\nLookup\nExample\nSQL Equivalent\n\n\n\n\nin\n.filter(department__in=[\"HR\", \"IT\"])\nWHERE department IN ('HR', 'IT')\n\n\n\nEmployee.objects.filter(department__in=[\"HR\", \"IT\"])\n\n\n\n2.5 Null and Empty Values (isnull, exact=\"\")\n\n\n\n\n\n\n\n\nLookup\nExample\nSQL Equivalent\n\n\n\n\nisnull=True\n.filter(manager__isnull=True)\nWHERE manager IS NULL\n\n\nexact=\"\"\n.filter(name=\"\")\nWHERE name = ''\n\n\n\nEmployee.objects.filter(manager__isnull=True)\n\n\n\n2.6 Date and Time Filters (year, month, day, week_day, hour, minute, second)\n\n\n\n\n\n\n\n\nLookup\nExample\nSQL Equivalent\n\n\n\n\nyear\n.filter(join_date__year=2024)\nWHERE YEAR(join_date) = 2024\n\n\nmonth\n.filter(join_date__month=6)\nWHERE MONTH(join_date) = 6\n\n\nday\n.filter(join_date__day=15)\nWHERE DAY(join_date) = 15\n\n\nweek_day\n.filter(join_date__week_day=2)\nWHERE DAYOFWEEK(join_date) = 2\n\n\n\nEmployee.objects.filter(join_date__year=2024, join_date__month=1)",
    "crumbs": [
      "Blog",
      "Django",
      "Query Filters"
    ]
  },
  {
    "objectID": "Django/0_query_filters.html#combining-filters",
    "href": "Django/0_query_filters.html#combining-filters",
    "title": "Query Filters",
    "section": "3. Combining Filters",
    "text": "3. Combining Filters\n\n3.1 AND Condition (filter())\n# Employees in HR department with age &gt; 30\nEmployee.objects.filter(department=\"HR\", age__gt=30)\n\n\n\n3.2 OR Condition (Q objects)\nfrom django.db.models import Q\n\n# Employees in HR OR IT department\nEmployee.objects.filter(Q(department=\"HR\") | Q(department=\"IT\"))\n\n\n\n3.3 NOT Condition (~Q)\n# Employees NOT in HR department\nEmployee.objects.filter(~Q(department=\"HR\"))",
    "crumbs": [
      "Blog",
      "Django",
      "Query Filters"
    ]
  },
  {
    "objectID": "Django/0_query_filters.html#ordering-and-limiting-results",
    "href": "Django/0_query_filters.html#ordering-and-limiting-results",
    "title": "Query Filters",
    "section": "4. Ordering and Limiting Results",
    "text": "4. Ordering and Limiting Results\n\n\n\nMethod\nDescription\nExample\n\n\n\n\norder_by()\nOrders by field\n.order_by(\"age\")\n\n\norder_by(\"-field\")\nOrders in descending\n.order_by(\"-salary\")\n\n\nreverse()\nReverses existing order\n.order_by(\"age\").reverse()\n\n\ndistinct()\nRemoves duplicate records\n.distinct()\n\n\ncount()\nCounts total rows\n.count()\n\n\nfirst()\nFirst object\n.first()\n\n\nlast()\nLast object\n.last()\n\n\nvalues()\nReturns a dictionary\n.values(\"name\", \"age\")\n\n\n\n# Get first 10 employees ordered by salary (descending)\nEmployee.objects.order_by(\"-salary\")[:10]",
    "crumbs": [
      "Blog",
      "Django",
      "Query Filters"
    ]
  },
  {
    "objectID": "Django/0_query_filters.html#query-aggregation-sum-avg-min-max-count",
    "href": "Django/0_query_filters.html#query-aggregation-sum-avg-min-max-count",
    "title": "Query Filters",
    "section": "5. Query Aggregation (Sum, Avg, Min, Max, Count)",
    "text": "5. Query Aggregation (Sum, Avg, Min, Max, Count)\nfrom django.db.models import Avg, Sum, Count, Min, Max\n\n# Average salary\nEmployee.objects.aggregate(Avg(\"salary\"))\n\n# Total salary\nEmployee.objects.aggregate(Sum(\"salary\"))\n\n# Count employees in IT department\nEmployee.objects.filter(department=\"IT\").count()",
    "crumbs": [
      "Blog",
      "Django",
      "Query Filters"
    ]
  },
  {
    "objectID": "Django/0_query_filters.html#prefetching-and-optimizing-queries",
    "href": "Django/0_query_filters.html#prefetching-and-optimizing-queries",
    "title": "Query Filters",
    "section": "6. Prefetching and Optimizing Queries",
    "text": "6. Prefetching and Optimizing Queries\n\n6.1 Select Related (One-to-One, ForeignKey)\n# Optimized query (joins related tables)\nEmployee.objects.select_related(\"department\").all()\n\n\n6.2 Prefetch Related (Many-to-Many, Reverse Relations)\n# Optimized query for many-to-many fields\nEmployee.objects.prefetch_related(\"projects\").all()",
    "crumbs": [
      "Blog",
      "Django",
      "Query Filters"
    ]
  },
  {
    "objectID": "Django/0_query_filters.html#raw-sql-queries-when-filters-are-not-enough",
    "href": "Django/0_query_filters.html#raw-sql-queries-when-filters-are-not-enough",
    "title": "Query Filters",
    "section": "7. Raw SQL Queries (When Filters Are Not Enough)",
    "text": "7. Raw SQL Queries (When Filters Are Not Enough)\nfrom django.db import connection\n\nquery = \"SELECT * FROM myapp_employee WHERE age &gt; %s\"\nwith connection.cursor() as cursor:\n    cursor.execute(query, [30])\n    results = cursor.fetchall()",
    "crumbs": [
      "Blog",
      "Django",
      "Query Filters"
    ]
  },
  {
    "objectID": "Django/0_query_filters.html#common-mistakes-and-best-practices",
    "href": "Django/0_query_filters.html#common-mistakes-and-best-practices",
    "title": "Query Filters",
    "section": "8. Common Mistakes and Best Practices",
    "text": "8. Common Mistakes and Best Practices\n\nAvoid fetching all records unnecessarily\n\n# BAD: Loads entire table into memory\nemployees = Employee.objects.all()\nfor e in employees:\n    print(e.name)\n\nUse efficient filtering\n\n# GOOD: Filters data in the database\nemployees = Employee.objects.filter(age__gt=30)\n\nAvoid multiple queries inside loops\n\nfor emp in Employee.objects.all():\n    print(emp.department.name)  # Triggers multiple DB queries\n\nUse select_related to optimize joins\n\nfor emp in Employee.objects.select_related(\"department\").all():\n    print(emp.department.name)  # Reduces queries",
    "crumbs": [
      "Blog",
      "Django",
      "Query Filters"
    ]
  },
  {
    "objectID": "Django/0_query_filters.html#final-thoughts",
    "href": "Django/0_query_filters.html#final-thoughts",
    "title": "Query Filters",
    "section": "Final Thoughts",
    "text": "Final Thoughts\n\nUse filter() for precise queries.\nUse Q for OR conditions.\nUse select_related() and prefetch_related() for optimized queries.\nUse values() and only() to fetch only required fields.\nUse .count() instead of len(queryset) to avoid unnecessary loading.\n\nMastering Django filters enhances database efficiency and performance! üöÄ",
    "crumbs": [
      "Blog",
      "Django",
      "Query Filters"
    ]
  },
  {
    "objectID": "Django/migrations.html",
    "href": "Django/migrations.html",
    "title": "Migrations",
    "section": "",
    "text": "Migrations are:\n\nAuto-generated files that store changes to your models.\nApplied to the database to create/update/delete tables and fields.\nVersion-controlled so changes can be tracked over time.\nState-aware: Django keeps both a model state (from migration files) and a DB state (via the django_migrations table).\n\nThey ensure consistency between the database and Django models.",
    "crumbs": [
      "Blog",
      "Django",
      "Migrations"
    ]
  },
  {
    "objectID": "Django/migrations.html#understanding-migrations",
    "href": "Django/migrations.html#understanding-migrations",
    "title": "Migrations",
    "section": "",
    "text": "Migrations are:\n\nAuto-generated files that store changes to your models.\nApplied to the database to create/update/delete tables and fields.\nVersion-controlled so changes can be tracked over time.\nState-aware: Django keeps both a model state (from migration files) and a DB state (via the django_migrations table).\n\nThey ensure consistency between the database and Django models.",
    "crumbs": [
      "Blog",
      "Django",
      "Migrations"
    ]
  },
  {
    "objectID": "Django/migrations.html#key-migration-commands",
    "href": "Django/migrations.html#key-migration-commands",
    "title": "Migrations",
    "section": "üîπ 2. Key Migration Commands",
    "text": "üîπ 2. Key Migration Commands\n\n\n\n\n\n\n\nCommand\nDescription\n\n\n\n\npython manage.py makemigrations\nGenerates migration files based on model changes.\n\n\npython manage.py migrate\nApplies migrations to the database.\n\n\npython manage.py showmigrations\nDisplays a list of applied and unapplied migrations.\n\n\npython manage.py sqlmigrate &lt;app&gt; &lt;migration_number&gt;\nShows the raw SQL for a migration.\n\n\npython manage.py migrate &lt;app&gt; zero\nRolls back all migrations for an app.\n\n\npython manage.py makemigrations --dry-run --check\nCheck if new migrations are needed (CI safe).\n\n\npython manage.py migrate --plan\nPreview what will run in order.\n\n\npython manage.py migrate --fake-initial\nMark initial migrations as applied without running them.\n\n\npython manage.py makemigrations --merge\nMerge conflicting migration histories.",
    "crumbs": [
      "Blog",
      "Django",
      "Migrations"
    ]
  },
  {
    "objectID": "Django/migrations.html#how-migrations-work",
    "href": "Django/migrations.html#how-migrations-work",
    "title": "Migrations",
    "section": "üîπ 3. How Migrations Work",
    "text": "üîπ 3. How Migrations Work\n\nDetect model changes ‚Üí makemigrations generates migration files (operations).\nMigration files form a DAG ‚Üí dependencies define order.\nApply with migrate ‚Üí runs SQL + records applied migrations in django_migrations.\nState sync ‚Üí Django assumes DB matches its recorded state.\n\nüëâ Drift (manual DB edits) breaks this. Use --fake, SeparateDatabaseAndState, or fresh migrations to realign.",
    "crumbs": [
      "Blog",
      "Django",
      "Migrations"
    ]
  },
  {
    "objectID": "Django/migrations.html#common-migration-operations",
    "href": "Django/migrations.html#common-migration-operations",
    "title": "Migrations",
    "section": "üîπ 4. Common Migration Operations",
    "text": "üîπ 4. Common Migration Operations\n\nCreateModel ‚Üí new table\nAddField ‚Üí new column (with default or null=True)\nRenameField / RenameModel ‚Üí keeps data\nRemoveField ‚Üí drops column\nAlterField ‚Üí type/option changes (may warn if risky)\nRunPython / RunSQL ‚Üí data or schema logic\nAddIndex, AddConstraint, CreateExtension (Postgres-specific)\n\n‚úÖ Django usually detects renames vs.¬†add/remove if done in isolation.",
    "crumbs": [
      "Blog",
      "Django",
      "Migrations"
    ]
  },
  {
    "objectID": "Django/migrations.html#rolling-back-migrations",
    "href": "Django/migrations.html#rolling-back-migrations",
    "title": "Migrations",
    "section": "üîπ 5. Rolling Back Migrations",
    "text": "üîπ 5. Rolling Back Migrations\n\nTo a previous migration:\npython manage.py migrate app_name 0002\nReset an app:\npython manage.py migrate app_name zero\nFake back:\npython manage.py migrate app_name 0005 --fake",
    "crumbs": [
      "Blog",
      "Django",
      "Migrations"
    ]
  },
  {
    "objectID": "Django/migrations.html#handling-migration-issues",
    "href": "Django/migrations.html#handling-migration-issues",
    "title": "Migrations",
    "section": "üîπ 6. Handling Migration Issues",
    "text": "üîπ 6. Handling Migration Issues\n\n\n\n\n\n\n\nIssue\nFix\n\n\n\n\nMissing migrations error\nRun makemigrations + migrate\n\n\nTable already exists\nmigrate --fake-initial\n\n\nFK constraint fails\nEnsure related app migrated first\n\n\nCorrupt migration\nRoll back ‚Üí delete bad file ‚Üí regenerate\n\n\nDrift (manual DB change)\nUse SeparateDatabaseAndState or --fake",
    "crumbs": [
      "Blog",
      "Django",
      "Migrations"
    ]
  },
  {
    "objectID": "Django/migrations.html#state-only-vs-db-only-migrations",
    "href": "Django/migrations.html#state-only-vs-db-only-migrations",
    "title": "Migrations",
    "section": "üîπ 7. State-only vs DB-only Migrations",
    "text": "üîπ 7. State-only vs DB-only Migrations\nUse SeparateDatabaseAndState:\nmigrations.SeparateDatabaseAndState(\n    database_operations=[],\n    state_operations=[\n        migrations.RenameField(\"customer\", \"name\", \"full_name\")\n    ]\n)\nüëâ Useful when the DB is already correct, but Django‚Äôs state is not (or vice versa).",
    "crumbs": [
      "Blog",
      "Django",
      "Migrations"
    ]
  },
  {
    "objectID": "Django/migrations.html#large-tables-zero-downtime",
    "href": "Django/migrations.html#large-tables-zero-downtime",
    "title": "Migrations",
    "section": "üîπ 8. Large Tables & Zero-Downtime",
    "text": "üîπ 8. Large Tables & Zero-Downtime\n\nAdd column: always nullable or with default.\nTwo-step change for non-null:\n\nAdd nullable ‚Üí backfill ‚Üí update app code to write both.\nMake column required ‚Üí drop old.\n\nIndexes:\nfrom django.contrib.postgres.operations import CreateIndexConcurrently\nclass Migration(migrations.Migration):\n    atomic = False\n    operations = [\n        CreateIndexConcurrently(\n            model_name=\"order\",\n            index=models.Index(fields=[\"created_at\"], name=\"order_created_idx\")\n        )\n    ]\nSet atomic = False if long ops (Postgres concurrent indexes can‚Äôt run in a transaction).",
    "crumbs": [
      "Blog",
      "Django",
      "Migrations"
    ]
  },
  {
    "objectID": "Django/migrations.html#migrating-models-between-apps",
    "href": "Django/migrations.html#migrating-models-between-apps",
    "title": "Migrations",
    "section": "üîπ 9. Migrating Models Between Apps",
    "text": "üîπ 9. Migrating Models Between Apps\n\nKeep same DB table via db_table.\nRun makemigrations app_b.\nApply with --fake-initial.\n\nüëâ Ensures Django points at the new app, but DB untouched.",
    "crumbs": [
      "Blog",
      "Django",
      "Migrations"
    ]
  },
  {
    "objectID": "Django/migrations.html#custom-data-migrations",
    "href": "Django/migrations.html#custom-data-migrations",
    "title": "Migrations",
    "section": "üîπ 10. Custom Data Migrations",
    "text": "üîπ 10. Custom Data Migrations\ndef forwards(apps, schema_editor):\n    Product = apps.get_model(\"shop\", \"Product\")\n    Product.objects.filter(category=\"\").update(category=\"General\")\n\ndef backwards(apps, schema_editor):\n    Product = apps.get_model(\"shop\", \"Product\")\n    Product.objects.update(category=\"\")\n\nclass Migration(migrations.Migration):\n    operations = [migrations.RunPython(forwards, backwards)]\n‚ö†Ô∏è Always use apps.get_model (historical models), never direct imports.",
    "crumbs": [
      "Blog",
      "Django",
      "Migrations"
    ]
  },
  {
    "objectID": "Django/migrations.html#squashing-merging",
    "href": "Django/migrations.html#squashing-merging",
    "title": "Migrations",
    "section": "üîπ 11. Squashing & Merging",
    "text": "üîπ 11. Squashing & Merging\n\nSquash long histories:\npython manage.py squashmigrations app 0001 0050\nMerge conflicts:\npython manage.py makemigrations --merge",
    "crumbs": [
      "Blog",
      "Django",
      "Migrations"
    ]
  },
  {
    "objectID": "Django/migrations.html#best-practices",
    "href": "Django/migrations.html#best-practices",
    "title": "Migrations",
    "section": "üîπ 12. Best Practices",
    "text": "üîπ 12. Best Practices\n\n\n\n\n\n\n\n‚úÖ Do\n‚ùå Avoid\n\n\n\n\nCommit migration files\nIgnoring migrations in VCS\n\n\nUse --check --dry-run in CI\nEditing old migrations after release\n\n\nReview SQL with sqlmigrate\nManual DB edits without aligning\n\n\nWrite reverse functions\nRunPython without rollback\n\n\nKeep them small & atomic\nHuge multi-change migrations",
    "crumbs": [
      "Blog",
      "Django",
      "Migrations"
    ]
  },
  {
    "objectID": "Django/migrations.html#quick-cheat-sheet",
    "href": "Django/migrations.html#quick-cheat-sheet",
    "title": "Migrations",
    "section": "üîπ 13. Quick Cheat Sheet",
    "text": "üîπ 13. Quick Cheat Sheet\n# Generate migrations\npython manage.py makemigrations\n\n# Apply migrations\npython manage.py migrate\n\n# Roll back app\npython manage.py migrate app_name zero\n\n# Preview SQL\npython manage.py sqlmigrate app 0005\n\n# Preview plan\npython manage.py migrate --plan",
    "crumbs": [
      "Blog",
      "Django",
      "Migrations"
    ]
  },
  {
    "objectID": "Django/channels.html",
    "href": "Django/channels.html",
    "title": "Channels",
    "section": "",
    "text": "Django Channels allows Django to support: - WebSockets: For real-time communication between server and client. - Long-lived connections: Such as HTTP2 or custom protocols. - Background tasks: Offload tasks to background workers.\nIt integrates Django‚Äôs standard request/response cycle with asynchronous communication protocols, enabling you to build real-time applications.",
    "crumbs": [
      "Blog",
      "Django",
      "Channels"
    ]
  },
  {
    "objectID": "Django/channels.html#what-is-django-channels",
    "href": "Django/channels.html#what-is-django-channels",
    "title": "Channels",
    "section": "",
    "text": "Django Channels allows Django to support: - WebSockets: For real-time communication between server and client. - Long-lived connections: Such as HTTP2 or custom protocols. - Background tasks: Offload tasks to background workers.\nIt integrates Django‚Äôs standard request/response cycle with asynchronous communication protocols, enabling you to build real-time applications.",
    "crumbs": [
      "Blog",
      "Django",
      "Channels"
    ]
  },
  {
    "objectID": "Django/channels.html#why-use-django-channels",
    "href": "Django/channels.html#why-use-django-channels",
    "title": "Channels",
    "section": "2. Why Use Django Channels?",
    "text": "2. Why Use Django Channels?\n\nReal-Time Features: Chat applications, live notifications, collaborative editing, etc.\nAsynchronous Tasks: Run background tasks without blocking the main request/response cycle.\nWebSocket Support: Full-duplex communication channel.",
    "crumbs": [
      "Blog",
      "Django",
      "Channels"
    ]
  },
  {
    "objectID": "Django/channels.html#how-django-channels-works",
    "href": "Django/channels.html#how-django-channels-works",
    "title": "Channels",
    "section": "3. How Django Channels Works",
    "text": "3. How Django Channels Works\n\nASGI (Asynchronous Server Gateway Interface): Django Channels uses ASGI, which is the asynchronous counterpart to WSGI.\nChannels and Consumers:\n\nChannels: Queues for messages.\nConsumers: Handlers for messages that run asynchronously.\n\nRouting: Similar to Django‚Äôs URL routing but for WebSocket connections.\nLayer: Channels uses a ‚Äúlayer‚Äù (e.g., Redis) for cross-process communication.",
    "crumbs": [
      "Blog",
      "Django",
      "Channels"
    ]
  },
  {
    "objectID": "Django/channels.html#key-components",
    "href": "Django/channels.html#key-components",
    "title": "Channels",
    "section": "4. Key Components",
    "text": "4. Key Components\n\nASGI Application: Entry point for asynchronous communication.\nConsumers: Async functions or classes that handle WebSocket connections.\nRouting: Maps WebSocket paths to Consumers.\nChannel Layers: Manages message communication between consumers (commonly using Redis).\nMiddleware: Similar to Django‚Äôs middleware but for ASGI.",
    "crumbs": [
      "Blog",
      "Django",
      "Channels"
    ]
  },
  {
    "objectID": "Django/channels.html#installation-and-setup",
    "href": "Django/channels.html#installation-and-setup",
    "title": "Channels",
    "section": "5. Installation and Setup",
    "text": "5. Installation and Setup\nRequirements: - Django 3.0+ - Channels 4.0+ (latest) - ASGI server (e.g., Daphne, Uvicorn)\n\n1. Install Channels and Redis:\npip install channels channels-redis\n\n\n2. Update Django Settings:\n# settings.py\nINSTALLED_APPS = [\n    ...,\n    'channels',\n]\n\n# Point to the ASGI application\nASGI_APPLICATION = 'myproject.asgi.application'\n\n# Channel Layer Configuration\nCHANNEL_LAYERS = {\n    'default': {\n        'BACKEND': 'channels_redis.core.RedisChannelLayer',\n        'CONFIG': {\n            'hosts': [('127.0.0.1', 6379)],  # Redis server location\n        },\n    },\n}\n\n\n3. Create ASGI Configuration:\n# asgi.py\nimport os\nfrom django.core.asgi import get_asgi_application\nfrom channels.routing import ProtocolTypeRouter, URLRouter\nfrom channels.auth import AuthMiddlewareStack\nfrom myapp.routing import websocket_urlpatterns\n\nos.environ.setdefault('DJANGO_SETTINGS_MODULE', 'myproject.settings')\n\napplication = ProtocolTypeRouter({\n    \"http\": get_asgi_application(),\n    \"websocket\": AuthMiddlewareStack(\n        URLRouter(\n            websocket_urlpatterns\n        )\n    ),\n})\n\n\n4. Create Routing:\n# myapp/routing.py\nfrom django.urls import path\nfrom .consumers import ChatConsumer\n\nwebsocket_urlpatterns = [\n    path('ws/chat/&lt;str:room_name&gt;/', ChatConsumer.as_asgi()),\n]\n\n\n5. Create Consumer:\n# myapp/consumers.py\nimport json\nfrom channels.generic.websocket import AsyncWebsocketConsumer\n\nclass ChatConsumer(AsyncWebsocketConsumer):\n    async def connect(self):\n        self.room_name = self.scope['url_route']['kwargs']['room_name']\n        self.room_group_name = f\"chat_{self.room_name}\"\n\n        # Join room group\n        await self.channel_layer.group_add(\n            self.room_group_name,\n            self.channel_name\n        )\n        await self.accept()\n\n    async def disconnect(self, close_code):\n        # Leave room group\n        await self.channel_layer.group_discard(\n            self.room_group_name,\n            self.channel_name\n        )\n\n    async def receive(self, text_data):\n        text_data_json = json.loads(text_data)\n        message = text_data_json['message']\n\n        # Send message to room group\n        await self.channel_layer.group_send(\n            self.room_group_name,\n            {\n                'type': 'chat_message',\n                'message': message\n            }\n        )\n\n    async def chat_message(self, event):\n        message = event['message']\n\n        # Send message to WebSocket\n        await self.send(text_data=json.dumps({\n            'message': message\n        }))\n\n\n6. Frontend WebSocket Connection (JavaScript):\nconst roomName = JSON.parse(document.getElementById('room-name').textContent);\nconst chatSocket = new WebSocket(\n    'ws://' + window.location.host + '/ws/chat/' + roomName + '/'\n);\n\nchatSocket.onmessage = function(e) {\n    const data = JSON.parse(e.data);\n    document.querySelector('#chat-log').value += (data.message + '\\n');\n};\n\nchatSocket.onclose = function(e) {\n    console.error('Chat socket closed unexpectedly');\n};\n\ndocument.querySelector('#chat-message-input').focus();\ndocument.querySelector('#chat-message-input').onkeyup = function(e) {\n    if (e.keyCode === 13) {  // Enter key\n        const messageInputDom = document.querySelector('#chat-message-input');\n        const message = messageInputDom.value;\n        chatSocket.send(JSON.stringify({\n            'message': message\n        }));\n        messageInputDom.value = '';\n    }\n};\n\n\n7. Run the ASGI Server:\ndaphne -b 0.0.0.0 -p 8000 myproject.asgi:application",
    "crumbs": [
      "Blog",
      "Django",
      "Channels"
    ]
  },
  {
    "objectID": "Django/channels.html#key-concepts-in-channels",
    "href": "Django/channels.html#key-concepts-in-channels",
    "title": "Channels",
    "section": "6. Key Concepts in Channels",
    "text": "6. Key Concepts in Channels\n\n1. Consumers:\n\nWebSocketConsumer: Synchronous consumer for WebSocket connections.\nAsyncWebsocketConsumer: Asynchronous version for non-blocking connections.\nJsonWebsocketConsumer: Extends AsyncWebsocketConsumer to work with JSON messages.\n\n\n\n2. Routing:\n\nSimilar to Django‚Äôs URL routing but for WebSocket connections.\nSupports path converters like &lt;str:room_name&gt;.\n\n\n\n3. Channel Layers:\n\nBackends: Redis, In-memory (for development/testing).\nUse Case: Pub/Sub messaging between consumers.\nExample: python     await self.channel_layer.group_send(         'group_name',         {             'type': 'chat_message',             'message': message         }     )\n\n\n\n4. Authentication:\n\nAuthMiddlewareStack: Adds user authentication to WebSocket connections.\nWorks with Django‚Äôs authentication system.",
    "crumbs": [
      "Blog",
      "Django",
      "Channels"
    ]
  },
  {
    "objectID": "Django/channels.html#deployment-considerations",
    "href": "Django/channels.html#deployment-considerations",
    "title": "Channels",
    "section": "7. Deployment Considerations",
    "text": "7. Deployment Considerations\n\nASGI Servers: Daphne or Uvicorn.\nRedis Server: For production-ready Channel Layers.\nScaling:\n\nUse multiple Daphne/Uvicorn instances behind a load balancer.\nHorizontal scaling with Redis as the message broker.\n\n\nExample using Daphne with Daphne and Redis:\ndaphne -b 0.0.0.0 -p 8000 myproject.asgi:application",
    "crumbs": [
      "Blog",
      "Django",
      "Channels"
    ]
  },
  {
    "objectID": "Django/channels.html#debugging-tips",
    "href": "Django/channels.html#debugging-tips",
    "title": "Channels",
    "section": "8. Debugging Tips:",
    "text": "8. Debugging Tips:\n\nCommon Issues:\n\nConnection closed before receiving handshake response.\nError 403: CSRF token missing or incorrect.\n\nSolutions:\n\nCheck CORS and CSRF settings in Django.\nEnsure Redis server is running and accessible.\nUse channels.layers.get_channel_layer() to debug channel layers.",
    "crumbs": [
      "Blog",
      "Django",
      "Channels"
    ]
  },
  {
    "objectID": "Django/channels.html#real-world-use-cases",
    "href": "Django/channels.html#real-world-use-cases",
    "title": "Channels",
    "section": "9. Real-World Use Cases",
    "text": "9. Real-World Use Cases\n\nChat Applications: Real-time messaging between users.\nLive Notifications: Push notifications for events.\nCollaborative Editing: Real-time document editing.\nOnline Games: Real-time multiplayer games.\nLive Data Feeds: Stock prices, sports scores, etc.",
    "crumbs": [
      "Blog",
      "Django",
      "Channels"
    ]
  },
  {
    "objectID": "Django/nested_routers.html",
    "href": "Django/nested_routers.html",
    "title": "Nested Routers",
    "section": "",
    "text": "Routers in Django REST Framework are classes that automatically generate URL configurations for your API views. They simplify the process of mapping HTTP methods to view actions, reducing boilerplate code and ensuring consistency across your API.\n\n\n\nViewSets: Classes that combine the logic for multiple related views (e.g., list, create, retrieve, update, delete).\nRouter Classes: Handle the URL routing by registering ViewSets and generating the appropriate URL patterns.\n\n\n\n\n# urls.py\nfrom django.urls import path, include\nfrom rest_framework.routers import DefaultRouter\nfrom .views import AuthorViewSet, BookViewSet\n\nrouter = DefaultRouter()\nrouter.register(r'authors', AuthorViewSet)\nrouter.register(r'books', BookViewSet)\n\nurlpatterns = [\n    path('', include(router.urls)),\n]\nThis setup automatically creates routes like:\n\n/authors/ (GET, POST)\n/authors/{id}/ (GET, PUT, DELETE)\n/books/ (GET, POST)\n/books/{id}/ (GET, PUT, DELETE)",
    "crumbs": [
      "Blog",
      "Django",
      "Nested Routers"
    ]
  },
  {
    "objectID": "Django/nested_routers.html#introduction-to-routers-in-drf",
    "href": "Django/nested_routers.html#introduction-to-routers-in-drf",
    "title": "Nested Routers",
    "section": "",
    "text": "Routers in Django REST Framework are classes that automatically generate URL configurations for your API views. They simplify the process of mapping HTTP methods to view actions, reducing boilerplate code and ensuring consistency across your API.\n\n\n\nViewSets: Classes that combine the logic for multiple related views (e.g., list, create, retrieve, update, delete).\nRouter Classes: Handle the URL routing by registering ViewSets and generating the appropriate URL patterns.\n\n\n\n\n# urls.py\nfrom django.urls import path, include\nfrom rest_framework.routers import DefaultRouter\nfrom .views import AuthorViewSet, BookViewSet\n\nrouter = DefaultRouter()\nrouter.register(r'authors', AuthorViewSet)\nrouter.register(r'books', BookViewSet)\n\nurlpatterns = [\n    path('', include(router.urls)),\n]\nThis setup automatically creates routes like:\n\n/authors/ (GET, POST)\n/authors/{id}/ (GET, PUT, DELETE)\n/books/ (GET, POST)\n/books/{id}/ (GET, PUT, DELETE)",
    "crumbs": [
      "Blog",
      "Django",
      "Nested Routers"
    ]
  },
  {
    "objectID": "Django/nested_routers.html#what-are-nested-routers",
    "href": "Django/nested_routers.html#what-are-nested-routers",
    "title": "Nested Routers",
    "section": "2. What Are Nested Routers?",
    "text": "2. What Are Nested Routers?\nNested Routers extend the functionality of standard routers by allowing you to create nested URL patterns that reflect the relationships between different resources (models) in your application. This is particularly useful when you have related models, such as a Client having multiple Treatments.\n\nBenefits of Nested Routers:\n\nHierarchical URL Structure: Reflects the relationships between resources, making the API more intuitive.\nScoped Access: Ensures that nested resources are accessed within the context of their parent resource.\nOrganized Codebase: Keeps URL configurations clean and manageable, especially in large projects.\n\n\n\nExample of Nested Routes:\nGiven models Client and Treatment, where a Client has many Treatments:\n\n/clients/ (List/Create Clients)\n/clients/{client_id}/ (Retrieve/Update/Delete a Client)\n/clients/{client_id}/treatments/ (List/Create Treatments for a Client)\n/clients/{client_id}/treatments/{treatment_id}/ (Retrieve/Update/Delete a Treatment for a Client)",
    "crumbs": [
      "Blog",
      "Django",
      "Nested Routers"
    ]
  },
  {
    "objectID": "Django/nested_routers.html#when-to-use-nested-routers",
    "href": "Django/nested_routers.html#when-to-use-nested-routers",
    "title": "Nested Routers",
    "section": "3. When to Use Nested Routers",
    "text": "3. When to Use Nested Routers\nUse Nested Routers When:\n\nHierarchical Relationships: Models have parent-child relationships (e.g., Authors and Books, Users and Posts).\nScoped Operations: Operations on child resources should be scoped to a specific parent (e.g., adding a comment to a specific post).\nImproved Readability: You want your API endpoints to clearly represent the relationships between resources.\n\nAvoid Nested Routers When:\n\nDeep Nesting: Excessive nesting can lead to complex and unwieldy URLs. Limit nesting to 1-2 levels.\nNo Clear Hierarchy: Models are not directly related or the relationship does not require nested access.\nAlternative Structures Suffice: Flat structures with query parameters or filters can achieve similar results without nesting.",
    "crumbs": [
      "Blog",
      "Django",
      "Nested Routers"
    ]
  },
  {
    "objectID": "Django/nested_routers.html#installing-and-setting-up-nested-routers",
    "href": "Django/nested_routers.html#installing-and-setting-up-nested-routers",
    "title": "Nested Routers",
    "section": "4. Installing and Setting Up Nested Routers",
    "text": "4. Installing and Setting Up Nested Routers\nTo implement nested routers in DRF, you typically use the drf-nested-routers package, which extends DRF‚Äôs router classes to support nested URL patterns.\n\nInstallation:\nUse pip to install drf-nested-routers:\npip install drf-nested-routers\n\n\nVerify Installation:\nEnsure that drf-nested-routers is installed correctly by checking the package list:\npip list | grep drf-nested-routers",
    "crumbs": [
      "Blog",
      "Django",
      "Nested Routers"
    ]
  },
  {
    "objectID": "Django/nested_routers.html#basic-implementation-with-drf-nested-routers",
    "href": "Django/nested_routers.html#basic-implementation-with-drf-nested-routers",
    "title": "Nested Routers",
    "section": "5. Basic Implementation with drf-nested-routers",
    "text": "5. Basic Implementation with drf-nested-routers\nLet‚Äôs walk through a basic implementation of nested routers using drf-nested-routers.\n\nScenario:\nYou have two models: Author and Book. Each Author can have multiple Books.\n\n\nModels:\n# models.py\nfrom django.db import models\n\nclass Author(models.Model):\n    name = models.CharField(max_length=100)\n    bio = models.TextField(blank=True)\n\n    def __str__(self):\n        return self.name\n\nclass Book(models.Model):\n    author = models.ForeignKey(Author, related_name='books', on_delete=models.CASCADE)\n    title = models.CharField(max_length=200)\n    published_date = models.DateField()\n\n    def __str__(self):\n        return self.title\n\n\nSerializers:\n# serializers.py\nfrom rest_framework import serializers\nfrom .models import Author, Book\n\nclass BookSerializer(serializers.ModelSerializer):\n    class Meta:\n        model = Book\n        fields = ['id', 'title', 'published_date', 'author']\n\nclass AuthorSerializer(serializers.ModelSerializer):\n    books = BookSerializer(many=True, read_only=True)  # Nested representation\n\n    class Meta:\n        model = Author\n        fields = ['id', 'name', 'bio', 'books']\n\n\nViewSets:\n# views.py\nfrom rest_framework import viewsets\nfrom .models import Author, Book\nfrom .serializers import AuthorSerializer, BookSerializer\n\nclass AuthorViewSet(viewsets.ModelViewSet):\n    \"\"\"\n    A viewset for viewing and editing author instances.\n    \"\"\"\n    queryset = Author.objects.all()\n    serializer_class = AuthorSerializer\n\nclass BookViewSet(viewsets.ModelViewSet):\n    \"\"\"\n    A viewset for viewing and editing book instances.\n    \"\"\"\n    serializer_class = BookSerializer\n\n    def get_queryset(self):\n        \"\"\"\n        Optionally restricts the returned books to a given author,\n        by filtering against a `author_pk` query parameter in the URL.\n        \"\"\"\n        queryset = Book.objects.all()\n        author_pk = self.kwargs.get('author_pk')\n        if author_pk is not None:\n            queryset = queryset.filter(author_id=author_pk)\n        return queryset\n\n    def perform_create(self, serializer):\n        \"\"\"\n        Associates the book with the given author.\n        \"\"\"\n        author_pk = self.kwargs.get('author_pk')\n        serializer.save(author_id=author_pk)\n\n\nURL Configuration with Nested Routers:\n# urls.py\nfrom django.urls import path, include\nfrom rest_framework_nested import routers\nfrom .views import AuthorViewSet, BookViewSet\n\n# Create the main router and register the AuthorViewSet\nrouter = routers.DefaultRouter()\nrouter.register(r'authors', AuthorViewSet, basename='authors')\n\n# Create a nested router for books under authors\nauthors_router = routers.NestedDefaultRouter(router, r'authors', lookup='author')\nauthors_router.register(r'books', BookViewSet, basename='author-books')\n\n# Include both routers in the URL patterns\nurlpatterns = [\n    path('', include(router.urls)),\n    path('', include(authors_router.urls)),\n]\n\n\nGenerated URL Patterns:\n\n/authors/ - List/Create Authors\n/authors/{author_id}/ - Retrieve/Update/Delete a Specific Author\n/authors/{author_id}/books/ - List/Create Books for a Specific Author\n/authors/{author_id}/books/{book_id}/ - Retrieve/Update/Delete a Specific Book for an Author\n\n\n\nTesting the Endpoints:\nUsing tools like Postman or cURL, you can interact with the API:\n\nList Authors:\nGET /authors/\nRetrieve a Specific Author:\nGET /authors/1/\nList Books for an Author:\nGET /authors/1/books/\nCreate a Book for an Author:\nPOST /authors/1/books/\nContent-Type: application/json\n\n{\n    \"title\": \"New Book Title\",\n    \"published_date\": \"2024-01-01\"\n}\nRetrieve a Specific Book for an Author:\nGET /authors/1/books/2/",
    "crumbs": [
      "Blog",
      "Django",
      "Nested Routers"
    ]
  },
  {
    "objectID": "Django/nested_routers.html#advanced-usage-and-customization",
    "href": "Django/nested_routers.html#advanced-usage-and-customization",
    "title": "Nested Routers",
    "section": "6. Advanced Usage and Customization",
    "text": "6. Advanced Usage and Customization\nWhile basic nested routing is straightforward, you might encounter scenarios that require more advanced configurations.\n\na. Multiple Levels of Nesting\nYou can nest routers to multiple levels, but it‚Äôs generally recommended to keep nesting to a reasonable depth (typically 2 levels) to avoid overly complex URLs.\nExample:\nModels: Author, Book, Chapter\n# urls.py\nfrom rest_framework_nested import routers\nfrom .views import AuthorViewSet, BookViewSet, ChapterViewSet\n\nrouter = routers.DefaultRouter()\nrouter.register(r'authors', AuthorViewSet, basename='authors')\n\nauthors_router = routers.NestedDefaultRouter(router, r'authors', lookup='author')\nauthors_router.register(r'books', BookViewSet, basename='author-books')\n\nbooks_router = routers.NestedDefaultRouter(authors_router, r'books', lookup='book')\nbooks_router.register(r'chapters', ChapterViewSet, basename='book-chapters')\n\nurlpatterns = [\n    path('', include(router.urls)),\n    path('', include(authors_router.urls)),\n    path('', include(books_router.urls)),\n]\nGenerated URLs:\n\n/authors/{author_id}/books/{book_id}/chapters/ - List/Create Chapters for a Book\n/authors/{author_id}/books/{book_id}/chapters/{chapter_id}/ - Retrieve/Update/Delete a Specific Chapter\n\n\n\nb. Using trailing_slash=False\nBy default, DRF routers append a trailing slash to URLs. If you prefer URLs without a trailing slash, you can configure it globally or per router.\nExample:\nrouter = routers.DefaultRouter(trailing_slash=False)\nrouter.register(r'authors', AuthorViewSet, basename='authors')\n\nauthors_router = routers.NestedDefaultRouter(router, r'authors', lookup='author', trailing_slash=False)\nauthors_router.register(r'books', BookViewSet, basename='author-books')\n\n\nc.¬†Custom Lookup Fields\nBy default, DRF uses the pk (primary key) for URL lookups. You can customize this to use other fields, such as slug.\nExample:\n# views.py\nclass AuthorViewSet(viewsets.ModelViewSet):\n    queryset = Author.objects.all()\n    serializer_class = AuthorSerializer\n    lookup_field = 'slug'\n\n# urls.py\nrouter.register(r'authors', AuthorViewSet, basename='authors')\nauthors_router = routers.NestedDefaultRouter(router, r'authors', lookup='author', lookup_field='slug')\n\n\nd.¬†Handling Permissions and Access Control\nNested routers don‚Äôt inherently handle permissions differently. However, you can leverage the nested context in your ViewSets to enforce permissions based on the parent resource.\nExample:\n# views.py\nfrom rest_framework import permissions\n\nclass BookViewSet(viewsets.ModelViewSet):\n    serializer_class = BookSerializer\n    permission_classes = [permissions.IsAuthenticated]\n\n    def get_queryset(self):\n        author_pk = self.kwargs.get('author_pk')\n        return Book.objects.filter(author_id=author_pk)\n\n    def perform_create(self, serializer):\n        author_pk = self.kwargs.get('author_pk')\n        author = get_object_or_404(Author, pk=author_pk)\n        serializer.save(author=author)\n\n\ne. Custom Actions in Nested ViewSets\nYou can define custom actions (e.g., additional endpoints) within nested ViewSets to handle specific operations.\nExample: Adding a custom action to retrieve books published after a certain date:\n# views.py\nfrom rest_framework.decorators import action\nfrom rest_framework.response import Response\nfrom django.utils.dateparse import parse_date\n\nclass BookViewSet(viewsets.ModelViewSet):\n    # ... existing methods ...\n\n    @action(detail=False, methods=['get'])\n    def published_after(self, request, author_pk=None):\n        date_str = request.query_params.get('date')\n        if not date_str:\n            return Response({\"error\": \"Date parameter is required.\"}, status=400)\n        date = parse_date(date_str)\n        if not date:\n            return Response({\"error\": \"Invalid date format.\"}, status=400)\n        books = self.get_queryset().filter(published_date__gt=date)\n        serializer = self.get_serializer(books, many=True)\n        return Response(serializer.data)\nAccessing the Custom Action:\nGET /authors/{author_id}/books/published_after/?date=2024-01-01",
    "crumbs": [
      "Blog",
      "Django",
      "Nested Routers"
    ]
  },
  {
    "objectID": "Django/nested_routers.html#common-use-cases-and-examples",
    "href": "Django/nested_routers.html#common-use-cases-and-examples",
    "title": "Nested Routers",
    "section": "7. Common Use Cases and Examples",
    "text": "7. Common Use Cases and Examples\n\na. E-commerce Application\nModels:\n\nCategory\nProduct\nReview\n\nURL Structure:\n\n/categories/\n/categories/{category_id}/products/\n/categories/{category_id}/products/{product_id}/reviews/\n\nImplementation:\n# urls.py\nrouter = routers.DefaultRouter()\nrouter.register(r'categories', CategoryViewSet, basename='categories')\n\ncategories_router = routers.NestedDefaultRouter(router, r'categories', lookup='category')\ncategories_router.register(r'products', ProductViewSet, basename='category-products')\n\nproducts_router = routers.NestedDefaultRouter(categories_router, r'products', lookup='product')\nproducts_router.register(r'reviews', ReviewViewSet, basename='product-reviews')\n\nurlpatterns = [\n    path('', include(router.urls)),\n    path('', include(categories_router.urls)),\n    path('', include(products_router.urls)),\n]\n\n\nb. Blogging Platform\nModels:\n\nAuthor\nPost\nComment\n\nURL Structure:\n\n/authors/\n/authors/{author_id}/posts/\n/authors/{author_id}/posts/{post_id}/comments/\n\nImplementation:\n# urls.py\nrouter = routers.DefaultRouter()\nrouter.register(r'authors', AuthorViewSet, basename='authors')\n\nauthors_router = routers.NestedDefaultRouter(router, r'authors', lookup='author')\nauthors_router.register(r'posts', PostViewSet, basename='author-posts')\n\nposts_router = routers.NestedDefaultRouter(authors_router, r'posts', lookup='post')\nposts_router.register(r'comments', CommentViewSet, basename='post-comments')\n\nurlpatterns = [\n    path('', include(router.urls)),\n    path('', include(authors_router.urls)),\n    path('', include(posts_router.urls)),\n]",
    "crumbs": [
      "Blog",
      "Django",
      "Nested Routers"
    ]
  },
  {
    "objectID": "Django/nested_routers.html#potential-pitfalls-and-how-to-avoid-them",
    "href": "Django/nested_routers.html#potential-pitfalls-and-how-to-avoid-them",
    "title": "Nested Routers",
    "section": "8. Potential Pitfalls and How to Avoid Them",
    "text": "8. Potential Pitfalls and How to Avoid Them\nWhile nested routers are powerful, they can introduce complexity if not used judiciously. Here are common pitfalls and strategies to avoid them:\n\na. Over-Nesting\nIssue: Excessive nesting leads to deeply hierarchical URLs, making them hard to manage and understand.\nSolution: Limit nesting to 1-2 levels. For deeper relationships, consider alternative approaches like query parameters or flattening the URL structure.\n\n\nb. Complex URL Patterns\nIssue: Managing multiple nested routers can result in complex URL configurations.\nSolution: Organize your urls.py logically, possibly splitting into multiple modules if necessary. Use consistent naming conventions and documentation.\n\n\nc.¬†Handling Lookup Fields\nIssue: Incorrect or inconsistent lookup fields can lead to broken URLs and failed lookups.\nSolution: Ensure that lookup_field is consistently defined across ViewSets and routers. Use meaningful and unique fields like slug if necessary.\n\n\nd.¬†Performance Concerns\nIssue: Nested queries can lead to increased database hits, affecting performance.\nSolution: Optimize your ViewSets by using select_related and prefetch_related to minimize database queries. Implement pagination where appropriate.\n\n\ne. Permissions and Access Control\nIssue: Inconsistent permissions across nested resources can lead to security vulnerabilities.\nSolution: Define and enforce permissions within each ViewSet, considering the context provided by nested relationships. Use DRF‚Äôs permission classes effectively.\n\n\nf.¬†Cache Invalidation\nIssue: When using caching mechanisms, nested resources might require careful cache invalidation strategies.\nSolution: Implement cache invalidation rules that account for changes in parent resources affecting child resources.",
    "crumbs": [
      "Blog",
      "Django",
      "Nested Routers"
    ]
  },
  {
    "objectID": "Django/nested_routers.html#best-practices",
    "href": "Django/nested_routers.html#best-practices",
    "title": "Nested Routers",
    "section": "9. Best Practices",
    "text": "9. Best Practices\nAdhering to best practices ensures that your use of nested routers is effective and maintainable.\n\na. Keep Nesting Shallow\nLimit nesting to avoid overly complex URLs. A common guideline is to nest no more than 1-2 levels deep.\n\n\nb. Use Meaningful Lookup Fields\nPrefer using unique and meaningful fields like slug over numeric IDs when appropriate, enhancing the readability of URLs.\n\n\nc.¬†Optimize Querysets\nLeverage Django‚Äôs ORM capabilities (select_related, prefetch_related) to optimize database access and reduce query counts.\n\n\nd.¬†Consistent Naming Conventions\nUse consistent naming for routers, ViewSets, and URL patterns to improve code readability and maintainability.\n\n\ne. Implement Proper Permissions\nEnsure that each ViewSet has appropriate permission classes to secure access to resources, especially in nested contexts.\n\n\nf.¬†Document Your API\nUse tools like Swagger or DRF-YASG to generate API documentation, making it easier for developers to understand and use your nested endpoints.\n\n\ng. Handle Errors Gracefully\nImplement robust error handling in your ViewSets to manage scenarios where parent resources do not exist or access is unauthorized.\n\n\nh. Consider Alternative Approaches When Necessary\nIf nesting becomes too complex, explore alternative structures such as:\n\nQuery Parameters: Filter resources based on query parameters without nesting.\nSeparate Endpoints: Provide separate endpoints for related resources without hierarchical URLs.",
    "crumbs": [
      "Blog",
      "Django",
      "Nested Routers"
    ]
  },
  {
    "objectID": "Django/nested_routers.html#alternatives-to-nested-routers",
    "href": "Django/nested_routers.html#alternatives-to-nested-routers",
    "title": "Nested Routers",
    "section": "10. Alternatives to Nested Routers",
    "text": "10. Alternatives to Nested Routers\nWhile nested routers are useful, they aren‚Äôt always the best solution. Here are some alternatives:\n\na. Flat Routers with Query Parameters\nInstead of nesting, use flat URLs and filter child resources based on query parameters.\nExample:\n\n/books/?author_id=1/\n\nPros:\n\nSimpler URL structure.\nEasier to manage and understand.\n\nCons:\n\nLess intuitive in reflecting relationships.\nMay require more complex filtering logic.\n\n\n\nb. Hyperlinked Relationships\nUse hyperlinked serializers to include links to related resources without nesting URLs.\nPros:\n\nDecouples URL structure from resource relationships.\nFlexible and RESTful.\n\nCons:\n\nLess intuitive browsing through related resources via URL.\n\n\n\nc.¬†Custom URL Patterns\nDefine custom URL patterns tailored to specific needs rather than relying solely on nested routers.\nPros:\n\nGreater control over URL structure.\nCan cater to complex or unique routing requirements.\n\nCons:\n\nMore manual configuration.\nPotential for inconsistency.\n\n\n\nd.¬†Use DRF‚Äôs ViewSet Without Routers\nManually map URLs to ViewSet actions without using routers.\nPros:\n\nFull control over URL patterns.\nAvoids potential complexities of nested routers.\n\nCons:\n\nIncreased boilerplate code.\nPotentially less scalable for large APIs.",
    "crumbs": [
      "Blog",
      "Django",
      "Nested Routers"
    ]
  },
  {
    "objectID": "Django/0_admin.html",
    "href": "Django/0_admin.html",
    "title": "Admin",
    "section": "",
    "text": "Purpose: The built-in admin is Django‚Äôs default administrative interface for managing models and their data.\nReady out of the box: After adding models in models.py and running migrations, the admin panel is automatically available for those models once registered.\n\n\n\n\n\nCreate an admin.py in your app (if it doesn‚Äôt already exist).\nImport both the models you want to manage and admin from django.contrib.\nRegister your model.\n\n# myapp/admin.py\n\nfrom django.contrib import admin\nfrom .models import Book\n\nadmin.site.register(Book)\nResult: You can now manage Book objects in the admin interface.",
    "crumbs": [
      "Blog",
      "Django",
      "Admin"
    ]
  },
  {
    "objectID": "Django/0_admin.html#basic-setup-and-registration",
    "href": "Django/0_admin.html#basic-setup-and-registration",
    "title": "Admin",
    "section": "",
    "text": "Purpose: The built-in admin is Django‚Äôs default administrative interface for managing models and their data.\nReady out of the box: After adding models in models.py and running migrations, the admin panel is automatically available for those models once registered.\n\n\n\n\n\nCreate an admin.py in your app (if it doesn‚Äôt already exist).\nImport both the models you want to manage and admin from django.contrib.\nRegister your model.\n\n# myapp/admin.py\n\nfrom django.contrib import admin\nfrom .models import Book\n\nadmin.site.register(Book)\nResult: You can now manage Book objects in the admin interface.",
    "crumbs": [
      "Blog",
      "Django",
      "Admin"
    ]
  },
  {
    "objectID": "Django/0_admin.html#customizing-the-modeladmin",
    "href": "Django/0_admin.html#customizing-the-modeladmin",
    "title": "Admin",
    "section": "2. Customizing the ModelAdmin",
    "text": "2. Customizing the ModelAdmin\nTo unlock powerful customizations, you use the ModelAdmin class. This class controls nearly every aspect of how your model is displayed and managed in the admin.\n\n2.1 Basic Customizations\n\n2.1.1 list_display\n\nDefinition: Shows specific fields (columns) of your model in the list view.\nUsage:\n\nclass BookAdmin(admin.ModelAdmin):\n    list_display = ('title', 'author', 'publication_date')\n\n\n2.1.2 list_filter\n\nDefinition: Adds a filter sidebar to filter by certain fields.\nUsage:\n\nclass BookAdmin(admin.ModelAdmin):\n    list_filter = ('author', 'publication_date', 'genre')\n\n\n2.1.3 search_fields\n\nDefinition: Adds a search box to filter the list view.\nUsage:\n\nclass BookAdmin(admin.ModelAdmin):\n    search_fields = ('title', 'author__name')\n\n\n2.1.4 ordering\n\nDefinition: Sets default ordering in list view.\nUsage:\n\nclass BookAdmin(admin.ModelAdmin):\n    ordering = ('-publication_date',)\n\n\n2.1.5 list_per_page\n\nDefinition: Defines how many items are displayed per page.\nUsage:\n\nclass BookAdmin(admin.ModelAdmin):\n    list_per_page = 25\n\n\n\n2.2 Form Layout\n\n2.2.1 fields\n\nDefinition: Controls the order in which fields appear in the edit form.\nUsage:\n\nclass BookAdmin(admin.ModelAdmin):\n    fields = ('title', 'author', 'description', 'publication_date')\n\n\n2.2.2 fieldsets\n\nDefinition: Groups fields into sections with their own headings and instructions.\nUsage:\n\nclass BookAdmin(admin.ModelAdmin):\n    fieldsets = (\n        ('Basic Information', {\n            'fields': ('title', 'author')\n        }),\n        ('Additional Details', {\n            'fields': ('description', 'publication_date'),\n            'description': 'You can provide more details here.'\n        }),\n    )\n\n\n2.2.3 readonly_fields\n\nDefinition: Makes certain fields read-only in the edit form.\nUsage:\n\nclass BookAdmin(admin.ModelAdmin):\n    readonly_fields = ('slug',)\n\n\n\n2.3 ModelAdmin Methods\n\n2.3.1 get_queryset\n\nDefinition: Dynamically filters which objects appear in the admin.\nExample: Show only books published in the last 5 years.\n\nfrom django.utils import timezone\nfrom django.db.models import Q\n\nclass BookAdmin(admin.ModelAdmin):\n    def get_queryset(self, request):\n        qs = super().get_queryset(request)\n        five_years_ago = timezone.now().year - 5\n        return qs.filter(publication_date__year__gte=five_years_ago)\n\n\n2.3.2 save_model\n\nDefinition: Customize save logic, e.g., auto-populate fields or update related objects.\nExample: Automatically set a slug when saving.\n\nclass BookAdmin(admin.ModelAdmin):\n    def save_model(self, request, obj, form, change):\n        if not obj.slug:\n            obj.slug = generate_slug(obj.title)\n        super().save_model(request, obj, form, change)\n\n\n2.3.3 delete_model\n\nDefinition: Customize what happens when a model is deleted (e.g., log an event, cleanup related data).\nUsage:\n\nclass BookAdmin(admin.ModelAdmin):\n    def delete_model(self, request, obj):\n        # Custom logic before deletion\n        super().delete_model(request, obj)\n        # Custom logic after deletion",
    "crumbs": [
      "Blog",
      "Django",
      "Admin"
    ]
  },
  {
    "objectID": "Django/0_admin.html#working-with-inlines",
    "href": "Django/0_admin.html#working-with-inlines",
    "title": "Admin",
    "section": "3. Working with Inlines",
    "text": "3. Working with Inlines\n\n3.1 What Are Inlines?\n\nPurpose: Allows you to include related models directly on a parent model‚Äôs edit page.\nExample: A Book has multiple Chapters.\n\n\n\n3.2 Example Setup\n# models.py\nclass Chapter(models.Model):\n    title = models.CharField(max_length=200)\n    book = models.ForeignKey(Book, on_delete=models.CASCADE)\n\n# admin.py\nclass ChapterInline(admin.TabularInline):\n    model = Chapter\n    extra = 1  # how many blank forms to display\n\nclass BookAdmin(admin.ModelAdmin):\n    inlines = [ChapterInline]\n\nInline Types:\n\nadmin.TabularInline ‚Äì table layout\nadmin.StackedInline ‚Äì stacked form layout",
    "crumbs": [
      "Blog",
      "Django",
      "Admin"
    ]
  },
  {
    "objectID": "Django/0_admin.html#admin-actions",
    "href": "Django/0_admin.html#admin-actions",
    "title": "Admin",
    "section": "4. Admin Actions",
    "text": "4. Admin Actions\n\n4.1 Custom Admin Actions\n\nDefinition: Bulk operations that can be performed on multiple selected objects in the list view.\nExample: Mark selected books as ‚ÄúPublished‚Äù.\n\ndef mark_published(modeladmin, request, queryset):\n    queryset.update(status='PUBLISHED')\n\nmark_published.short_description = \"Mark selected books as published\"\n\nclass BookAdmin(admin.ModelAdmin):\n    actions = [mark_published]\n\n\n4.2 Built-In Actions\n\nDelete Selected Objects: Provided by default, but can be disabled or customized.",
    "crumbs": [
      "Blog",
      "Django",
      "Admin"
    ]
  },
  {
    "objectID": "Django/0_admin.html#overriding-admin-templates",
    "href": "Django/0_admin.html#overriding-admin-templates",
    "title": "Admin",
    "section": "5. Overriding Admin Templates",
    "text": "5. Overriding Admin Templates\n\n5.1 Why Override?\n\nReasons: Change admin site‚Äôs look and feel, add branding, or incorporate custom UI logic.\n\n\n\n5.2 Directory Structure\nBy default, Django looks for admin templates in:\n[project_root]/templates/admin/\nYou can override any template by matching Django‚Äôs template path. For example, to override the base admin template:\ntemplates/admin/base_site.html\n\n\n5.3 Example: Adding a Custom Header\n{% extends \"admin/base.html\" %}\n{% block title %}My Custom Admin{% endblock %}\n\n{% block branding %}\n&lt;h1&gt;My Company Admin&lt;/h1&gt;\n{% endblock %}",
    "crumbs": [
      "Blog",
      "Django",
      "Admin"
    ]
  },
  {
    "objectID": "Django/0_admin.html#customizing-the-adminsite-object",
    "href": "Django/0_admin.html#customizing-the-adminsite-object",
    "title": "Admin",
    "section": "6. Customizing the AdminSite Object",
    "text": "6. Customizing the AdminSite Object\n\n6.1 Use Cases\n\nCustom Admin Instances: If you need multiple admin sites or want to fully customize global admin behavior, you can subclass AdminSite.\n\n\n\n6.2 Example\n# myapp/admin_site.py\nfrom django.contrib.admin import AdminSite\n\nclass MyAdminSite(AdminSite):\n    site_header = \"My Project Admin\"\n    site_title = \"Project Admin Portal\"\n    index_title = \"Welcome to the Admin\"\n\nmy_admin_site = MyAdminSite(name='myadmin')\n\n# Then register models with this custom site\nfrom .models import Book\nmy_admin_site.register(Book)\n\nIn urls.py, point to your custom admin site:\n\n# project/urls.py\nfrom django.urls import path\nfrom myapp.admin_site import my_admin_site\n\nurlpatterns = [\n    path('myadmin/', my_admin_site.urls),\n]",
    "crumbs": [
      "Blog",
      "Django",
      "Admin"
    ]
  },
  {
    "objectID": "Django/0_admin.html#performance-considerations",
    "href": "Django/0_admin.html#performance-considerations",
    "title": "Admin",
    "section": "7. Performance Considerations",
    "text": "7. Performance Considerations\n\n7.1 Handling Large Datasets\n\nlist_select_related: Prefetch related data in list view to minimize queries.\npagination: Use list_per_page to reduce memory usage.\ndatabase indexing: Ensure frequently filtered or searched fields are indexed.\n\n\n\n7.2 Caching\n\nTemplate Fragment Caching: Potentially cache expensive admin pages if they involve complex computations (though less common for default CRUD setups).",
    "crumbs": [
      "Blog",
      "Django",
      "Admin"
    ]
  },
  {
    "objectID": "Django/0_admin.html#security-and-permissions",
    "href": "Django/0_admin.html#security-and-permissions",
    "title": "Admin",
    "section": "8. Security and Permissions",
    "text": "8. Security and Permissions\n\n8.1 Permissions\n\nModel-Level: Django uses add, change, delete, view permissions by default.\nCustom Permissions: Add your own rules in models.py and reference them in ModelAdmin.\n\nclass Book(models.Model):\n    class Meta:\n        permissions = [\n            (\"can_approve_books\", \"Can approve books\"),\n        ]\n\n\n8.2 Row-Level Permissions\n\nDjango Guardian or custom logic in get_queryset can help you implement per-object permissions.\n\n\n\n8.3 Admin Hardening\n\nUse HTTPS: Always secure admin with an SSL certificate.\nLimit Access: Potentially restrict admin routes to internal networks or specific user groups.",
    "crumbs": [
      "Blog",
      "Django",
      "Admin"
    ]
  },
  {
    "objectID": "Django/0_admin.html#third-party-tools-for-admin-customization",
    "href": "Django/0_admin.html#third-party-tools-for-admin-customization",
    "title": "Admin",
    "section": "9. Third-Party Tools for Admin Customization",
    "text": "9. Third-Party Tools for Admin Customization\n\n9.1 django-grappelli\n\nFeatures: Enhanced UI, sortable tabular inlines, and a polished user experience.\n\n\n\n9.2 django-import-export\n\nFeatures: Allows import/export of data through CSV, Excel, etc. Integrates seamlessly with ModelAdmin.\n\n\n\n9.3 django-admin-interface\n\nFeatures: A set of theme customization and admin color schemes.",
    "crumbs": [
      "Blog",
      "Django",
      "Admin"
    ]
  },
  {
    "objectID": "Django/0_admin.html#future-trends-and-best-practices",
    "href": "Django/0_admin.html#future-trends-and-best-practices",
    "title": "Admin",
    "section": "10. Future Trends and Best Practices",
    "text": "10. Future Trends and Best Practices\n\nDjango 4+ Updates: Keep track of new features in Django‚Äôs minor and major releases, such as potential enhancements to the admin UI or new ModelAdmin hooks.\nAsynchronous Admin?: There‚Äôs ongoing community discussion about making parts of Django‚Äôs admin async-friendly to handle real-time data updates. This is still largely experimental.\nComponent-based Admin Extensions: Expect more frameworks that allow you to create React or Vue components in the admin while still leveraging Django‚Äôs robust backend.\nAPI-Driven Admin: Tools like django-rest-framework might integrate more closely with the admin to provide a combined CRUD and API experience.",
    "crumbs": [
      "Blog",
      "Django",
      "Admin"
    ]
  },
  {
    "objectID": "Django/0_admin.html#summary-table-of-key-customization-options",
    "href": "Django/0_admin.html#summary-table-of-key-customization-options",
    "title": "Admin",
    "section": "11. Summary Table of Key Customization Options",
    "text": "11. Summary Table of Key Customization Options\n\n\n\n\n\n\n\n\nFeature\nAdmin Class Attribute/Method\nExample\n\n\n\n\nDisplay fields in list view\nlist_display\nlist_display = ('title', 'author')\n\n\nFilter options\nlist_filter\nlist_filter = ('genre', 'author')\n\n\nSearch functionality\nsearch_fields\nsearch_fields = ('title', 'author__name')\n\n\nInline forms\ninlines (with Inline classes)\ninlines = [ChapterInline]\n\n\nCustom actions\nactions / custom function\nactions = [mark_published]\n\n\nOrdering\nordering\nordering = ('-publication_date', )\n\n\nFieldsets\nfieldsets\nfieldsets = (('Basic Info', {'fields': ('title',)}), ...)\n\n\nSave logic override\nsave_model\ndef save_model(...): ...\n\n\nDelete logic override\ndelete_model\ndef delete_model(...): ...\n\n\nQuery overrides\nget_queryset\ndef get_queryset(...): return super().get_queryset(...).filter(...)\n\n\nRead-only fields\nreadonly_fields\nreadonly_fields = ('slug',)\n\n\nTheme/Template override\nOverride admin templates\ntemplates/admin/*.html\n\n\nCustom admin site\nSubclass AdminSite\nclass MyAdminSite(AdminSite): ...",
    "crumbs": [
      "Blog",
      "Django",
      "Admin"
    ]
  },
  {
    "objectID": "Django/0_admin.html#visualizing-a-custom-admin-flow",
    "href": "Django/0_admin.html#visualizing-a-custom-admin-flow",
    "title": "Admin",
    "section": "12. Visualizing a Custom Admin Flow",
    "text": "12. Visualizing a Custom Admin Flow\nBelow is a conceptual diagram showing how Django processes admin requests and where you can hook in customizations:\n   ‚îå‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê\n   ‚îÇ    Request     ‚îÇ\n   ‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò\n           ‚Üì\n   ‚îå‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê\n   ‚îÇ URL Configuration  ‚îÇ\n   ‚îÇ (urls.py)          ‚îÇ\n   ‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò\n           ‚Üì\n   ‚îå‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê\n   ‚îÇ AdminSite (subclass)    ‚îÇ\n   ‚îÇ - site_header           ‚îÇ\n   ‚îÇ - index_title           ‚îÇ\n   ‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò\n           ‚Üì\n   ‚îå‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê\n   ‚îÇ ModelAdmin (subclass)   ‚îÇ\n   ‚îÇ - list_display          ‚îÇ\n   ‚îÇ - fieldsets            ‚îÇ\n   ‚îÇ - get_queryset          ‚îÇ\n   ‚îÇ - save_model            ‚îÇ\n   ‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò\n           ‚Üì\n   ‚îå‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê\n   ‚îÇ Admin Templates Override‚îÇ\n   ‚îÇ  (base_site.html, etc.) ‚îÇ\n   ‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò\n           ‚Üì\n   ‚îå‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê\n   ‚îÇ Database Models         ‚îÇ\n   ‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò",
    "crumbs": [
      "Blog",
      "Django",
      "Admin"
    ]
  },
  {
    "objectID": "Django/0_admin.html#final-thoughts",
    "href": "Django/0_admin.html#final-thoughts",
    "title": "Admin",
    "section": "Final Thoughts",
    "text": "Final Thoughts\nDjango‚Äôs admin framework offers incredible flexibility with relatively little code. Whether you need a simple CRUD interface or a fully branded, access-controlled management panel, the Django admin can be extended to meet most needs:\n\nStart simple: Register models and play with list_display and search_fields.\nAdvance gradually: Use inlines, custom actions, and template overrides for a richer user experience.\nKeep performance and security in mind: Optimize queries, use caching, and employ secure deployment practices.\n\nBy combining these techniques, you‚Äôll be able to craft an admin interface that‚Äôs both powerful for administrators and maintainable for developers‚Äîwell into the future of Django‚Äôs evolving ecosystem.",
    "crumbs": [
      "Blog",
      "Django",
      "Admin"
    ]
  },
  {
    "objectID": "Django/0_models_design.html",
    "href": "Django/0_models_design.html",
    "title": "Model Design",
    "section": "",
    "text": "Django models are defined as Python classes that inherit from django.db.models.Model. Each attribute of the class represents a database field.\n\nfrom django.db import models\n\nclass MyModel(models.Model):\n    my_field = models.CharField(max_length=100)\n    my_number = models.IntegerField()",
    "crumbs": [
      "Blog",
      "Django",
      "Model Design"
    ]
  },
  {
    "objectID": "Django/0_models_design.html#basic-model-definition",
    "href": "Django/0_models_design.html#basic-model-definition",
    "title": "Model Design",
    "section": "",
    "text": "Django models are defined as Python classes that inherit from django.db.models.Model. Each attribute of the class represents a database field.\n\nfrom django.db import models\n\nclass MyModel(models.Model):\n    my_field = models.CharField(max_length=100)\n    my_number = models.IntegerField()",
    "crumbs": [
      "Blog",
      "Django",
      "Model Design"
    ]
  },
  {
    "objectID": "Django/0_models_design.html#field-types",
    "href": "Django/0_models_design.html#field-types",
    "title": "Model Design",
    "section": "Field Types",
    "text": "Field Types\n\nThis is a comprehensive table of Django model fields, grouped by category, including their parameters, description, and usage.\n\n\nüèóÔ∏è Django Model Field Types\n\n\n\n\n\n\n\n\n\nField Type\nField Class\nDescription\nCommon Arguments\n\n\n\n\nAutoField\nmodels.AutoField\nAuto-incrementing primary key (default for id fields).\nprimary_key\n\n\nBigAutoField\nmodels.BigAutoField\n64-bit auto-incrementing primary key.\nprimary_key\n\n\nSmallAutoField\nmodels.SmallAutoField\nSmall integer auto-incrementing field.\nprimary_key\n\n\n\n\n\n\nüìù Text-Based Fields\n\n\n\n\n\n\n\n\n\nField Type\nField Class\nDescription\nCommon Arguments\n\n\n\n\nCharField\nmodels.CharField\nFixed-length text field. Requires max_length.\nmax_length, blank, null, default\n\n\nTextField\nmodels.TextField\nVariable-length, large text field.\nblank, null, default\n\n\nSlugField\nmodels.SlugField\nShort label for URLs, typically used for slugs.\nmax_length, unique, blank\n\n\nEmailField\nmodels.EmailField\nText field that validates email addresses.\nmax_length, blank, null\n\n\nURLField\nmodels.URLField\nValidates URLs.\nmax_length, blank, null\n\n\nUUIDField\nmodels.UUIDField\nStores UUIDs as strings.\nprimary_key, default\n\n\n\n\n\n\nüî¢ Numeric Fields\n\n\n\n\n\n\n\n\n\nField Type\nField Class\nDescription\nCommon Arguments\n\n\n\n\nIntegerField\nmodels.IntegerField\nInteger values.\nblank, null, default\n\n\nBigIntegerField\nmodels.BigIntegerField\n64-bit integer values.\nblank, null, default\n\n\nPositiveIntegerField\nmodels.PositiveIntegerField\nPositive integers only.\nblank, null, default\n\n\nPositiveSmallIntegerField\nmodels.PositiveSmallIntegerField\nSmall positive integers.\nblank, null, default\n\n\nSmallIntegerField\nmodels.SmallIntegerField\nSmall integer values.\nblank, null, default\n\n\nFloatField\nmodels.FloatField\nFloating-point numbers.\nblank, null, default\n\n\nDecimalField\nmodels.DecimalField\nFixed-point decimal numbers (exact precision).\nmax_digits, decimal_places, blank, null\n\n\n\n\n\n\nüìÖ Date/Time Fields\n\n\n\n\n\n\n\n\n\nField Type\nField Class\nDescription\nCommon Arguments\n\n\n\n\nDateField\nmodels.DateField\nDate (year, month, day).\nauto_now, auto_now_add, blank, null\n\n\nTimeField\nmodels.TimeField\nTime (hour, minute, second).\nauto_now, auto_now_add, blank, null\n\n\nDateTimeField\nmodels.DateTimeField\nDate and time combined.\nauto_now, auto_now_add, blank, null\n\n\nDurationField\nmodels.DurationField\nStores periods of time (timedelta).\nblank, null\n\n\n\n\n\n\nüé® File/Media Fields\n\n\n\n\n\n\n\n\n\nField Type\nField Class\nDescription\nCommon Arguments\n\n\n\n\nFileField\nmodels.FileField\nUploads files to a specified directory.\nupload_to, blank, null\n\n\nImageField\nmodels.ImageField\nInherits from FileField, with image validation.\nupload_to, blank, null\n\n\n\n\n\n\n‚úÖ Boolean Fields\n\n\n\n\n\n\n\n\n\nField Type\nField Class\nDescription\nCommon Arguments\n\n\n\n\nBooleanField\nmodels.BooleanField\nTrue/False values.\ndefault\n\n\nNullBooleanField\nmodels.NullBooleanField\nTrue/False/Null (deprecated in Django 3.1+).\ndefault\n\n\n\n\n\n\nüîó Relational Fields\n\n\n\n\n\n\n\n\n\nField Type\nField Class\nDescription\nCommon Arguments\n\n\n\n\nForeignKey\nmodels.ForeignKey\nMany-to-one relationship.\nto, on_delete, related_name\n\n\nOneToOneField\nmodels.OneToOneField\nOne-to-one relationship.\nto, on_delete, related_name\n\n\nManyToManyField\nmodels.ManyToManyField\nMany-to-many relationship.\nto, related_name, through\n\n\n\n\n\n\nüì¶ Miscellaneous / Special Fields\n\n\n\n\n\n\n\n\n\nField Type\nField Class\nDescription\nCommon Arguments\n\n\n\n\nGenericIPAddressField\nmodels.GenericIPAddressField\nStores IPv4 or IPv6 addresses.\nprotocol, blank, null\n\n\nJSONField\nmodels.JSONField\nStores structured JSON data (Django 3.1+).\ndefault, blank, null\n\n\n\n\n\n\n‚úÖ Arguments Explained (Quick Reference)\n\n\n\n\n\n\n\nArgument\nDescription\n\n\n\n\nmax_length\nMaximum length of the field (required for CharField and SlugField).\n\n\nblank\nBoolean; whether the field is allowed to be blank in forms.\n\n\nnull\nBoolean; whether the field is allowed to be NULL in the database.\n\n\ndefault\nDefault value for the field.\n\n\nchoices\nChoices for limiting field values (e.g., for CharField or IntegerField).\n\n\nprimary_key\nBoolean; whether the field is the primary key for the model.\n\n\nunique\nBoolean; whether this field must be unique throughout the table.\n\n\nupload_to\nFunction or string to specify upload location (for FileField/ImageField).\n\n\nauto_now\nBoolean; updates field to now() every time the object is saved. (Date/Time)\n\n\nauto_now_add\nBoolean; sets field to now() when object is first created. (Date/Time)\n\n\n\n\n\n\n‚úÖ Common Use Cases and Recommendations\n\n\n\nUse Case\nRecommended Field\n\n\n\n\nText content\nCharField, TextField\n\n\nNumeric data\nIntegerField, DecimalField\n\n\nTimestamps\nDateTimeField with auto_now_add\n\n\nUser-uploaded files\nFileField, ImageField\n\n\nIP address logging\nGenericIPAddressField\n\n\nJSON or dynamic settings\nJSONField\n\n\nUUID primary keys\nUUIDField with primary_key=True\n\n\nForeign model relations\nForeignKey, OneToOneField\n\n\n\n\n\n\nüî® New Fields in Recent Django Versions\n\n\n\n\n\n\n\n\nVersion\nField\nNotes\n\n\n\n\nDjango 3.1\nJSONField\nCross-database support (previously Postgres only)\n\n\nDjango 3.2+\nBigAutoField\nDefault primary key field for new Django projects\n\n\nDjango 4.0\nSmallAutoField\nAutoField for small integers (optimizes small datasets)\n\n\n\n\n\n\n‚úÖ Summary Table by Category\n\n\n\n\n\n\n\nCategory\nFields\n\n\n\n\nText\nCharField, TextField, SlugField, EmailField, URLField, UUIDField\n\n\nNumeric\nIntegerField, FloatField, DecimalField, SmallIntegerField, BigIntegerField, PositiveIntegerField\n\n\nDate/Time\nDateField, TimeField, DateTimeField, DurationField\n\n\nBoolean\nBooleanField, NullBooleanField\n\n\nFile/Media\nFileField, ImageField\n\n\nRelations\nForeignKey, OneToOneField, ManyToManyField\n\n\nSpecial\nGenericIPAddressField, JSONField",
    "crumbs": [
      "Blog",
      "Django",
      "Model Design"
    ]
  },
  {
    "objectID": "Django/0_models_design.html#meta-options",
    "href": "Django/0_models_design.html#meta-options",
    "title": "Model Design",
    "section": "Meta Options",
    "text": "Meta Options\n\nMeta options are used to define model-level metadata, such as ordering, verbose names, and database table names.\n\nclass MyModel(models.Model):\n    my_field = models.CharField(max_length=100)\n\n    class Meta:\n        ordering = ['my_field']\n        verbose_name = 'My Model'\n        verbose_name_plural = 'My Models'",
    "crumbs": [
      "Blog",
      "Django",
      "Model Design"
    ]
  },
  {
    "objectID": "Django/0_models_design.html#model-relationships",
    "href": "Django/0_models_design.html#model-relationships",
    "title": "Model Design",
    "section": "Model Relationships",
    "text": "Model Relationships\nDjango ORM supports three types of relationships: - One-to-One (OneToOneField): Each instance of a model is related to one instance of another model. - Many-to-One (ForeignKey): Many instances of a model are related to one instance of another model. - Many-to-Many (ManyToManyField): Many instances of a model are related to many instances of another model.\nclass Author(models.Model):\n    name = models.CharField(max_length=100)\n\nclass Book(models.Model):\n    title = models.CharField(max_length=100)\n    author = models.ForeignKey(Author, on_delete=models.CASCADE)",
    "crumbs": [
      "Blog",
      "Django",
      "Model Design"
    ]
  },
  {
    "objectID": "Django/0_models_design.html#field-options",
    "href": "Django/0_models_design.html#field-options",
    "title": "Model Design",
    "section": "Field Options",
    "text": "Field Options\n\nField options allow you to specify constraints and attributes for model fields.\n\n\nmax_length: Maximum length of the field (for CharField and TextField).\ndefault: Default value for the field.\nnull: If True, Django will store empty values as NULL in the database.\nblank: If True, the field is allowed to be blank.\nchoices: A list of valid choices for this field.\nunique: If True, this field must be unique throughout the table.",
    "crumbs": [
      "Blog",
      "Django",
      "Model Design"
    ]
  },
  {
    "objectID": "Django/0_models_design.html#model-methods",
    "href": "Django/0_models_design.html#model-methods",
    "title": "Model Design",
    "section": "Model Methods",
    "text": "Model Methods\n\nYou can add methods to your model to encapsulate business logic or utility functions.\n\nclass Book(models.Model):\n    title = models.CharField(max_length=100)\n\n    def __str__(self):\n        return self.title\n\n    def get_absolute_url(self):\n        return f\"/books/{self.id}/\"",
    "crumbs": [
      "Blog",
      "Django",
      "Model Design"
    ]
  },
  {
    "objectID": "Django/0_models_design.html#custom-managers-and-querysets",
    "href": "Django/0_models_design.html#custom-managers-and-querysets",
    "title": "Model Design",
    "section": "Custom Managers and QuerySets",
    "text": "Custom Managers and QuerySets\n\nCustom managers and querysets allow you to define reusable query logic.\n\nclass BookManager(models.Manager):\n    def published(self):\n        return self.filter(published=True)\n\nclass Book(models.Model):\n    title = models.CharField(max_length=100)\n    published = models.BooleanField(default=False)\n\n    objects = BookManager()",
    "crumbs": [
      "Blog",
      "Django",
      "Model Design"
    ]
  },
  {
    "objectID": "Django/0_models_design.html#model-inheritance",
    "href": "Django/0_models_design.html#model-inheritance",
    "title": "Model Design",
    "section": "Model Inheritance",
    "text": "Model Inheritance\n\nDjango supports model inheritance, allowing you to reuse common fields and methods.\n\n\nAbstract Base Classes: Used when you want to put some common information into a base class.\nMulti-table Inheritance: Each model in the hierarchy gets its own database table.\nProxy Models: Used to modify the Python-level behavior without changing the model‚Äôs fields.\n\nclass CommonInfo(models.Model):\n    name = models.CharField(max_length=100)\n    created_at = models.DateTimeField(auto_now_add=True)\n\n    class Meta:\n        abstract = True\n\nclass Student(CommonInfo):\n    grade = models.CharField(max_length=2)",
    "crumbs": [
      "Blog",
      "Django",
      "Model Design"
    ]
  },
  {
    "objectID": "Django/0_models_design.html#signals",
    "href": "Django/0_models_design.html#signals",
    "title": "Model Design",
    "section": "Signals",
    "text": "Signals\n\nSignals allow decoupled applications to get notified when certain actions occur (e.g., a model instance is saved or deleted).\n\nfrom django.db.models.signals import post_save\nfrom django.dispatch import receiver\n\n@receiver(post_save, sender=Book)\ndef book_saved(sender, instance, **kwargs):\n    print(f\"Book saved: {instance.title}\")",
    "crumbs": [
      "Blog",
      "Django",
      "Model Design"
    ]
  },
  {
    "objectID": "Django/0_models_design.html#model-validations",
    "href": "Django/0_models_design.html#model-validations",
    "title": "Model Design",
    "section": "Model Validations",
    "text": "Model Validations\n\nYou can define custom validation logic within your model.\n\nclass Book(models.Model):\n    title = models.CharField(max_length=100)\n    publication_date = models.DateField()\n\n    def clean(self):\n        if self.publication_date &gt; datetime.date.today():\n            raise ValidationError('Publication date cannot be in the future.')",
    "crumbs": [
      "Blog",
      "Django",
      "Model Design"
    ]
  },
  {
    "objectID": "Django/0_permissions.html",
    "href": "Django/0_permissions.html",
    "title": "Permissions",
    "section": "",
    "text": "DRF comes with several built-in permission classes that can be used to restrict access to your API views:\n\n\nAllowAny: Grants access to any user, whether authenticated or not. It is the default permission class.\nIsAuthenticated: Grants access only to authenticated users.\nIsAdminUser: Grants access only to users with admin status.\nIsAuthenticatedOrReadOnly: Grants read-only access to unauthenticated users and full access to authenticated users.",
    "crumbs": [
      "Blog",
      "Django",
      "Permissions"
    ]
  },
  {
    "objectID": "Django/0_permissions.html#built-in-permission-classes",
    "href": "Django/0_permissions.html#built-in-permission-classes",
    "title": "Permissions",
    "section": "",
    "text": "DRF comes with several built-in permission classes that can be used to restrict access to your API views:\n\n\nAllowAny: Grants access to any user, whether authenticated or not. It is the default permission class.\nIsAuthenticated: Grants access only to authenticated users.\nIsAdminUser: Grants access only to users with admin status.\nIsAuthenticatedOrReadOnly: Grants read-only access to unauthenticated users and full access to authenticated users.",
    "crumbs": [
      "Blog",
      "Django",
      "Permissions"
    ]
  },
  {
    "objectID": "Django/0_permissions.html#using-permission-classes",
    "href": "Django/0_permissions.html#using-permission-classes",
    "title": "Permissions",
    "section": "Using Permission Classes",
    "text": "Using Permission Classes\n\nYou can set permission classes at the view level or globally in your settings.py file.\n\n\nView Level\nfrom rest_framework.permissions import IsAuthenticated\nfrom rest_framework.views import APIView\n\nclass MyView(APIView):\n    permission_classes = [IsAuthenticated]\n\n    def get(self, request):\n        return Response({\"message\": \"Hello, world!\"})\n\n\nGlobal Level\n# settings.py\nREST_FRAMEWORK = {\n    'DEFAULT_PERMISSION_CLASSES': [\n        'rest_framework.permissions.IsAuthenticated',\n    ],\n}",
    "crumbs": [
      "Blog",
      "Django",
      "Permissions"
    ]
  },
  {
    "objectID": "Django/0_permissions.html#custom-permission-classes",
    "href": "Django/0_permissions.html#custom-permission-classes",
    "title": "Permissions",
    "section": "Custom Permission Classes",
    "text": "Custom Permission Classes\n\nDRF allows you to define custom permission classes by subclassing BasePermission. Custom permissions can be used to implement more complex logic.\n\n\nExample: Custom Permission Class\nfrom rest_framework.permissions import BasePermission\n\nclass IsOwner(BasePermission):\n    def has_object_permission(self, request, view, obj):\n        return obj.owner == request.user",
    "crumbs": [
      "Blog",
      "Django",
      "Permissions"
    ]
  },
  {
    "objectID": "Django/0_permissions.html#permission-methods",
    "href": "Django/0_permissions.html#permission-methods",
    "title": "Permissions",
    "section": "Permission Methods",
    "text": "Permission Methods\nCustom permissions override two main methods: - has_permission(self, request, view): Checks permissions at the view level. - has_object_permission(self, request, view, obj): Checks permissions at the object level.\n\nExample: Custom Permission Methods\nclass IsOwner(BasePermission):\n    def has_permission(self, request, view):\n        # Custom logic for view level permission\n        return True\n\n    def has_object_permission(self, request, view, obj):\n        # Custom logic for object level permission\n        return obj.owner == request.user",
    "crumbs": [
      "Blog",
      "Django",
      "Permissions"
    ]
  },
  {
    "objectID": "Django/0_permissions.html#combining-permissions",
    "href": "Django/0_permissions.html#combining-permissions",
    "title": "Permissions",
    "section": "Combining Permissions",
    "text": "Combining Permissions\n\nYou can combine multiple permission classes to apply multiple layers of permission checks.\n\nfrom rest_framework.permissions import IsAuthenticated, IsAdminUser\n\nclass MyView(APIView):\n    permission_classes = [IsAuthenticated, IsAdminUser]\n\n    def get(self, request):\n        return Response({\"message\": \"Hello, world!\"})",
    "crumbs": [
      "Blog",
      "Django",
      "Permissions"
    ]
  },
  {
    "objectID": "Django/0_permissions.html#third-party-permissions",
    "href": "Django/0_permissions.html#third-party-permissions",
    "title": "Permissions",
    "section": "Third-Party Permissions",
    "text": "Third-Party Permissions\nDRF integrates with several third-party libraries to extend the default permissions system. For example:\n\ndjango-guardian: Provides per-object permissions.\ndjango-rules: Allows for rule-based permissions.",
    "crumbs": [
      "Blog",
      "Django",
      "Permissions"
    ]
  },
  {
    "objectID": "Django/0_permissions.html#best-practices",
    "href": "Django/0_permissions.html#best-practices",
    "title": "Permissions",
    "section": "Best Practices",
    "text": "Best Practices\n\nLeast Privilege Principle: Only give users the minimum permissions they need to perform their tasks.\nReuse Custom Permissions: Create custom permissions for reusable and consistent permission logic across views.\nObject-Level Permissions: Use object-level permissions to fine-tune access control, especially for models with user-specific data.",
    "crumbs": [
      "Blog",
      "Django",
      "Permissions"
    ]
  },
  {
    "objectID": "Django/0_permissions.html#advanced-permissions",
    "href": "Django/0_permissions.html#advanced-permissions",
    "title": "Permissions",
    "section": "Advanced Permissions",
    "text": "Advanced Permissions\n\nFor advanced use cases, you can create permissions that depend on request data, view arguments, or any other contextual information.\n\n\nExample: Permission Based on Query Parameter\n\nclass QueryParameterPermission(BasePermission):\n    def has_permission(self, request, view):\n        return 'allow' in request.query_params",
    "crumbs": [
      "Blog",
      "Django",
      "Permissions"
    ]
  },
  {
    "objectID": "Django/backups.html",
    "href": "Django/backups.html",
    "title": "Back ups",
    "section": "",
    "text": "django-dbbackup is a Django application designed to: 1. Back up your database (and optionally media files). 2. Restore your database from these backups. 3. Store backups locally or remotely (e.g., Amazon S3, Dropbox, etc.).\nIt integrates with Django‚Äôs settings and management commands, making it straightforward to schedule or invoke backups from the command line or cron jobs.\n\nGitHub Repo: django-dbbackup\nPyPI: django-dbbackup",
    "crumbs": [
      "Blog",
      "Django",
      "Back ups"
    ]
  },
  {
    "objectID": "Django/backups.html#what-is-django-dbbackup",
    "href": "Django/backups.html#what-is-django-dbbackup",
    "title": "Back ups",
    "section": "",
    "text": "django-dbbackup is a Django application designed to: 1. Back up your database (and optionally media files). 2. Restore your database from these backups. 3. Store backups locally or remotely (e.g., Amazon S3, Dropbox, etc.).\nIt integrates with Django‚Äôs settings and management commands, making it straightforward to schedule or invoke backups from the command line or cron jobs.\n\nGitHub Repo: django-dbbackup\nPyPI: django-dbbackup",
    "crumbs": [
      "Blog",
      "Django",
      "Back ups"
    ]
  },
  {
    "objectID": "Django/backups.html#installation",
    "href": "Django/backups.html#installation",
    "title": "Back ups",
    "section": "2. Installation",
    "text": "2. Installation\n\nInstall via pip:\npip install django-dbbackup\npip install django-storages\nAdd to Installed Apps:\nINSTALLED_APPS = [\n    ...\n    'dbbackup',  # django-dbbackup\n]\nMigrate (if any model changes):\npython manage.py migrate",
    "crumbs": [
      "Blog",
      "Django",
      "Back ups"
    ]
  },
  {
    "objectID": "Django/backups.html#basic-configuration-in-settings.py",
    "href": "Django/backups.html#basic-configuration-in-settings.py",
    "title": "Back ups",
    "section": "3. Basic Configuration in settings.py",
    "text": "3. Basic Configuration in settings.py\nA minimal setup might look like this:\n# DBBackup S3 Credentials\nDBBACKUP_S3_ACCESS_KEY_ID = os.environ.get('DBBACKUP_S3_ACCESS_KEY_ID')\nDBBACKUP_S3_SECRET_ACCESS_KEY = os.environ.get('DBBACKUP_S3_SECRET_ACCESS_KEY')\nDBBACKUP_S3_BUCKET_NAME = os.environ.get('DBBACKUP_S3_BUCKET_NAME')\n\n\n# DBBACKUP_STORAGE = 'django.core.files.storage.FileSystemStorage'\n# DBBACKUP_STORAGE_OPTIONS = {\n#     'location': BASE_DIR.parent / 'backup',  # Folder called 'backup' in the parent directory\n# }\n\n# DBBACKUP_STORAGE = 'dbbackup.storage.s3_storage.S3Storage'\nDBBACKUP_STORAGE = 'storages.backends.s3boto3.S3Boto3Storage'\n\nDBBACKUP_STORAGE_OPTIONS = {\n    'access_key': DBBACKUP_S3_ACCESS_KEY_ID,\n    'secret_key': DBBACKUP_S3_SECRET_ACCESS_KEY,\n    'bucket_name': DBBACKUP_S3_BUCKET_NAME,  # ‚úÖ Replace with your bucket name\n}\n\n\n# (Optional) Compress backups\nDBBACKUP_COMPRESS = True\n\n# (Optional) Encrypt backups using GPG\nDBBACKUP_GPG_RECIPIENT = None\nDBBACKUP_CLEANUP_KEEP = 5\n\n3.1 Key Settings\n\nDBBACKUP_STORAGE: Defines the storage class used to store backup files.\n\nCommon values:\n\ndjango.core.files.storage.FileSystemStorage for local backups.\nstorages.backends.s3boto3.S3Boto3Storage for S3 backups (requires django-storages).\n\n\nDBBACKUP_STORAGE_OPTIONS: A dictionary of options passed to your storage class.\n\nFor local file system: {'location': '/path/to/backups/'}.\nFor S3: {'access_key': '...', 'secret_key': '...', 'bucket_name': 'my-backups'}.\n\nDBBACKUP_FILENAME_TEMPLATE (Optional): Custom filename format for backups, e.g., \"{datetime}-{databasename}.{extension}\".\nDBBACKUP_CLEANUP_KEEP and DBBACKUP_CLEANUP_KEEP_MEDIA (Optional): Number of backups to keep if you use the cleanup command.\nDBBACKUP_COMPRESS (Boolean): If True, compresses backup files (default is False).\nEncryption: If you want GPG encryption, set DBBACKUP_GPG_RECIPIENT = 'my-gpg-id'.",
    "crumbs": [
      "Blog",
      "Django",
      "Back ups"
    ]
  },
  {
    "objectID": "Django/backups.html#usage-and-commands",
    "href": "Django/backups.html#usage-and-commands",
    "title": "Back ups",
    "section": "4. Usage and Commands",
    "text": "4. Usage and Commands\n\n4.1 Create a Database Backup\npython manage.py dbbackup\n\nThis command creates a backup of your default database and saves it to the configured storage.\nBy default, it also backs up all configured databases in settings.DATABASES unless you specify --database.\n\nKey Options: - --database &lt;alias&gt;: Backup a specific DB alias. - --compress: Override the default compress setting. - --encrypt: Override the default GPG encrypt setting. - --output or -o: Writes the backup to a local file (e.g., dbbackup -o /tmp/mydbbackup).\nExample:\npython manage.py dbbackup --database default --compress --encrypt\n\n\n4.2 Restore a Database Backup\npython manage.py dbrestore\nBy default, this looks for the latest backup file in the configured storage and restores it.\nKey Options: - --database &lt;alias&gt;: Restore a specific DB. - --input &lt;filename&gt; or -i: Restore from a specific backup file. - --noinput: Skip ‚ÄúAre you sure?‚Äù prompts. - --decrypt: Decrypt if needed.\nExample:\npython manage.py dbrestore --database default -i /path/to/backups/2023-01-20-default.gz --noinput\n\n\n4.3 Backing Up Media Files\ndjango-dbbackup can back up your MEDIA_ROOT with:\npython manage.py mediabackup\nAnd restore media:\npython manage.py mediarestore\n\nEnsure you have the relevant storage configured if you want media backups stored similarly (same or different location).\n\n\n\n4.4 Cleanup Old Backups\nTo automatically remove older backups (beyond a certain number): 1. Set DBBACKUP_CLEANUP_KEEP = &lt;int&gt; in settings. 2. Run: bash    python manage.py dbbackup_cleanup or bash    python manage.py mediabackup_cleanup",
    "crumbs": [
      "Blog",
      "Django",
      "Back ups"
    ]
  },
  {
    "objectID": "Django/backups.html#common-storage-options",
    "href": "Django/backups.html#common-storage-options",
    "title": "Back ups",
    "section": "5. Common Storage Options",
    "text": "5. Common Storage Options\n\n5.1 Local Filesystem\nSet:\nDBBACKUP_STORAGE = 'django.core.files.storage.FileSystemStorage'\nDBBACKUP_STORAGE_OPTIONS = {\n    'location': '/path/to/backups/',\n}\nMake sure /path/to/backups/ is writable by Django.\n\n\n5.2 Amazon S3\nYou can use django-storages: 1. Install: bash    pip install django-storages boto3 2. Configure S3 in settings.py: python    DBBACKUP_STORAGE = 'storages.backends.s3boto3.S3Boto3Storage'    DBBACKUP_STORAGE_OPTIONS = {        'access_key': 'YOUR_ACCESS_KEY',        'secret_key': 'YOUR_SECRET_KEY',        'bucket_name': 'my-backups-bucket',    } 3. Alternatively, if you already have a custom storage class for S3, point DBBACKUP_STORAGE to that class.\n\n\n5.3 Other Storage\n\nDropbox: There are examples of custom Dropbox storages or django-storages integration.\nFTP / SFTP: Use a custom storage or library that integrates with ftp/sftp.",
    "crumbs": [
      "Blog",
      "Django",
      "Back ups"
    ]
  },
  {
    "objectID": "Django/backups.html#scheduling-backups",
    "href": "Django/backups.html#scheduling-backups",
    "title": "Back ups",
    "section": "6. Scheduling Backups",
    "text": "6. Scheduling Backups\nTypically, you schedule backups with cron or a job scheduler like celery beat or systemd timers. For example, a cron job to back up the DB daily at midnight:\n0 0 * * * /path/to/venv/bin/python /path/to/project/manage.py dbbackup --compress --encrypt\nYou can similarly schedule media backups or calls to dbbackup_cleanup.",
    "crumbs": [
      "Blog",
      "Django",
      "Back ups"
    ]
  },
  {
    "objectID": "Django/backups.html#security-considerations",
    "href": "Django/backups.html#security-considerations",
    "title": "Back ups",
    "section": "7. Security Considerations",
    "text": "7. Security Considerations\n\nEncryption (GPG):\n\nIf you store backups in a remote location or want extra security, set DBBACKUP_GPG_RECIPIENT so that backups are encrypted at rest.\nYou‚Äôll need GPG installed and a matching key.\n\nPermissions:\n\nEnsure backup directories and keys are protected so only authorized users can read them.\n\nHandling Secrets:\n\nDo not commit your DB or storage credentials in version control. Use environment variables or a secrets manager.",
    "crumbs": [
      "Blog",
      "Django",
      "Back ups"
    ]
  },
  {
    "objectID": "Django/backups.html#debugging-common-issues",
    "href": "Django/backups.html#debugging-common-issues",
    "title": "Back ups",
    "section": "8. Debugging & Common Issues",
    "text": "8. Debugging & Common Issues\n\nFile Permissions:\n\nMake sure Django can write to DBBACKUP_STORAGE_OPTIONS['location'] if using local storage.\n\nMissing or Wrong Database Dumps:\n\nCheck that your DATABASES config has the correct engine. For example, if using Postgres, ensure the pg_dump utility is installed and in PATH.\n\nS3 Access Denied:\n\nDouble-check your AWS credentials and bucket permissions.",
    "crumbs": [
      "Blog",
      "Django",
      "Back ups"
    ]
  },
  {
    "objectID": "Django/backups.html#additional-features-tips",
    "href": "Django/backups.html#additional-features-tips",
    "title": "Back ups",
    "section": "9. Additional Features & Tips",
    "text": "9. Additional Features & Tips\n\nPartial Database Backup: Not supported out of the box, dbbackup typically dumps the entire DB.\nMultiple DBs:\n\nIf you have more than one database in settings.DATABASES, dbbackup will back them all up by default, naming them accordingly. Use --database to target one.\n\nVersioning: If storing backups on S3, you can enable versioning on the bucket for extra safety (though this is outside django-dbbackup‚Äôs scope).\nNotifications: You might integrate Slack or email notifications to confirm successful backups or handle errors.",
    "crumbs": [
      "Blog",
      "Django",
      "Back ups"
    ]
  },
  {
    "objectID": "Django/backups.html#example-end-to-end-setup",
    "href": "Django/backups.html#example-end-to-end-setup",
    "title": "Back ups",
    "section": "10. Example End-to-End Setup",
    "text": "10. Example End-to-End Setup\nsettings.py:\nINSTALLED_APPS = [\n    ...,\n    'dbbackup',\n]\n\nDBBACKUP_STORAGE = 'storages.backends.s3boto3.S3Boto3Storage'\nDBBACKUP_STORAGE_OPTIONS = {\n    'access_key': os.getenv('AWS_ACCESS_KEY_ID'),\n    'secret_key': os.getenv('AWS_SECRET_ACCESS_KEY'),\n    'bucket_name': 'myproject-dbbackups',\n}\nDBBACKUP_CLEANUP_KEEP = 5\nDBBACKUP_COMPRESS = True\nDBBACKUP_GPG_RECIPIENT = 'my_gpg_key@example.com'  # If you want encryption\nCrontab entry (runs daily at 2am):\n0 2 * * * /path/to/venv/bin/python /path/to/project/manage.py dbbackup_cleanup && \\\n /path/to/venv/bin/python /path/to/project/manage.py dbbackup --clean --compress --encrypt\n\n--clean triggers cleanup after backup, but you can also run dbbackup_cleanup separately.\n\nCommand line usage to restore the latest backup:\npython manage.py dbrestore --noinput --decrypt\n\nSummary\n\nInstall django-dbbackup, configure it in settings.py.\nChoose storage (local or remote).\nRun commands (dbbackup, dbrestore, mediabackup, etc.) from the CLI or a scheduler.\nOptional enhancements: GPG encryption, compression, and cleanup for old backups.\nTest your backup and restore procedure regularly to ensure your data can be recovered when needed.\n\nWith these steps, you‚Äôll have a robust backup and restore process in place for your Django project using django-dbbackup.",
    "crumbs": [
      "Blog",
      "Django",
      "Back ups"
    ]
  }
]